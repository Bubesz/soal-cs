//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\w3m0114v.dwf\SoalParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Soal {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SoalParser : Parser {
	public const int
		KNamespace=1, KEnum=2, KException=3, KStruct=4, KInterface=5, KThrows=6, 
		KOneway=7, KReturn=8, KBinding=9, KTransport=10, KEncoding=11, KProtocol=12, 
		KEndpoint=13, KAddress=14, KDatabase=15, KEntity=16, KAbstract=17, KComponent=18, 
		KComposite=19, KReference=20, KService=21, KWire=22, KTo=23, KImplementation=24, 
		KLanguage=25, KAssembly=26, KDeployment=27, KEnvironment=28, KRuntime=29, 
		KNull=30, KTrue=31, KFalse=32, KObject=33, KString=34, KInt=35, KLong=36, 
		KFloat=37, KDouble=38, KByte=39, KBool=40, KAny=41, KVoid=42, TSemicolon=43, 
		TColon=44, TDot=45, TComma=46, TAssign=47, TOpenParen=48, TCloseParen=49, 
		TOpenBracket=50, TCloseBracket=51, TOpenBrace=52, TCloseBrace=53, TLessThan=54, 
		TGreaterThan=55, TQuestion=56, TQuestionQuestion=57, TAmpersand=58, THat=59, 
		TBar=60, TAndAlso=61, TOrElse=62, TPlusPlus=63, TMinusMinus=64, TPlus=65, 
		TMinus=66, TTilde=67, TExclamation=68, TSlash=69, TAsterisk=70, TPercent=71, 
		TLessThanOrEqual=72, TGreaterThanOrEqual=73, TEqual=74, TNotEqual=75, 
		TAsteriskAssign=76, TSlashAssign=77, TPercentAssign=78, TPlusAssign=79, 
		TMinusAssign=80, TLeftShiftAssign=81, TRightShiftAssign=82, TAmpersandAssign=83, 
		THatAssign=84, TBarAssign=85, IDate=86, ITime=87, IDateTime=88, ITimeSpan=89, 
		IVersion=90, IStyle=91, IMTOM=92, ISSL=93, IHTTP=94, IREST=95, IWebSocket=96, 
		ISOAP=97, IXML=98, IJSON=99, IClientAuthentication=100, IdentifierNormal=101, 
		IdentifierVerbatim=102, IntegerLiteral=103, DecimalLiteral=104, ScientificLiteral=105, 
		DateTimeOffsetLiteral=106, DateTimeLiteral=107, DateLiteral=108, TimeLiteral=109, 
		RegularStringLiteral=110, GuidLiteral=111, UTF8BOM=112, WHITESPACE=113, 
		CRLF=114, LINEBREAK=115, LINE_COMMENT=116, COMMENT=117, DoubleQuoteVerbatimStringLiteral=118, 
		SingleQuoteVerbatimStringLiteral=119, DoubleQuoteVerbatimStringLiteralStart=120;
	public const int
		RULE_main = 0, RULE_qualifiedName = 1, RULE_identifierList = 2, RULE_qualifiedNameList = 3, 
		RULE_annotationList = 4, RULE_operationAnnotationList = 5, RULE_operationAnnotation = 6, 
		RULE_annotation = 7, RULE_returnAnnotation = 8, RULE_annotationBody = 9, 
		RULE_annotationProperties = 10, RULE_annotationPropertyList = 11, RULE_annotationProperty = 12, 
		RULE_namespaceDeclaration = 13, RULE_declaration = 14, RULE_enumDeclaration = 15, 
		RULE_enumLiterals = 16, RULE_enumLiteral = 17, RULE_structDeclaration = 18, 
		RULE_exceptionDeclaration = 19, RULE_entityDeclaration = 20, RULE_propertyDeclaration = 21, 
		RULE_databaseDeclaration = 22, RULE_entityReference = 23, RULE_interfaceDeclaration = 24, 
		RULE_operationDeclaration = 25, RULE_parameterList = 26, RULE_parameter = 27, 
		RULE_componentDeclaration = 28, RULE_componentElements = 29, RULE_componentElement = 30, 
		RULE_componentService = 31, RULE_componentReference = 32, RULE_componentServiceOrReferenceBody = 33, 
		RULE_componentServiceOrReferenceElement = 34, RULE_componentProperty = 35, 
		RULE_componentImplementation = 36, RULE_componentLanguage = 37, RULE_compositeDeclaration = 38, 
		RULE_compositeElements = 39, RULE_compositeElement = 40, RULE_compositeComponent = 41, 
		RULE_compositeWire = 42, RULE_wireSource = 43, RULE_wireTarget = 44, RULE_deploymentDeclaration = 45, 
		RULE_deploymentElements = 46, RULE_deploymentElement = 47, RULE_environmentDeclaration = 48, 
		RULE_runtimeDeclaration = 49, RULE_runtimeReference = 50, RULE_assemblyReference = 51, 
		RULE_databaseReference = 52, RULE_bindingDeclaration = 53, RULE_bindingLayers = 54, 
		RULE_transportLayer = 55, RULE_httpTransportLayer = 56, RULE_restTransportLayer = 57, 
		RULE_webSocketTransportLayer = 58, RULE_httpTransportLayerProperties = 59, 
		RULE_httpSslProperty = 60, RULE_httpClientAuthenticationProperty = 61, 
		RULE_encodingLayer = 62, RULE_soapEncodingLayer = 63, RULE_xmlEncodingLayer = 64, 
		RULE_jsonEncodingLayer = 65, RULE_soapEncodingProperties = 66, RULE_soapVersionProperty = 67, 
		RULE_soapMtomProperty = 68, RULE_soapStyleProperty = 69, RULE_protocolLayer = 70, 
		RULE_protocolLayerKind = 71, RULE_endpointDeclaration = 72, RULE_endpointProperties = 73, 
		RULE_endpointProperty = 74, RULE_endpointBindingProperty = 75, RULE_endpointAddressProperty = 76, 
		RULE_returnType = 77, RULE_typeReference = 78, RULE_simpleType = 79, RULE_nulledType = 80, 
		RULE_referenceType = 81, RULE_objectType = 82, RULE_valueType = 83, RULE_voidType = 84, 
		RULE_onewayType = 85, RULE_nullableType = 86, RULE_nonNullableType = 87, 
		RULE_nonNullableArrayType = 88, RULE_arrayType = 89, RULE_simpleArrayType = 90, 
		RULE_nulledArrayType = 91, RULE_constantValue = 92, RULE_identifier = 93, 
		RULE_literal = 94, RULE_nullLiteral = 95, RULE_booleanLiteral = 96, RULE_integerLiteral = 97, 
		RULE_decimalLiteral = 98, RULE_scientificLiteral = 99, RULE_stringLiteral = 100, 
		RULE_contextualKeywords = 101;
	public static readonly string[] ruleNames = {
		"main", "qualifiedName", "identifierList", "qualifiedNameList", "annotationList", 
		"operationAnnotationList", "operationAnnotation", "annotation", "returnAnnotation", 
		"annotationBody", "annotationProperties", "annotationPropertyList", "annotationProperty", 
		"namespaceDeclaration", "declaration", "enumDeclaration", "enumLiterals", 
		"enumLiteral", "structDeclaration", "exceptionDeclaration", "entityDeclaration", 
		"propertyDeclaration", "databaseDeclaration", "entityReference", "interfaceDeclaration", 
		"operationDeclaration", "parameterList", "parameter", "componentDeclaration", 
		"componentElements", "componentElement", "componentService", "componentReference", 
		"componentServiceOrReferenceBody", "componentServiceOrReferenceElement", 
		"componentProperty", "componentImplementation", "componentLanguage", "compositeDeclaration", 
		"compositeElements", "compositeElement", "compositeComponent", "compositeWire", 
		"wireSource", "wireTarget", "deploymentDeclaration", "deploymentElements", 
		"deploymentElement", "environmentDeclaration", "runtimeDeclaration", "runtimeReference", 
		"assemblyReference", "databaseReference", "bindingDeclaration", "bindingLayers", 
		"transportLayer", "httpTransportLayer", "restTransportLayer", "webSocketTransportLayer", 
		"httpTransportLayerProperties", "httpSslProperty", "httpClientAuthenticationProperty", 
		"encodingLayer", "soapEncodingLayer", "xmlEncodingLayer", "jsonEncodingLayer", 
		"soapEncodingProperties", "soapVersionProperty", "soapMtomProperty", "soapStyleProperty", 
		"protocolLayer", "protocolLayerKind", "endpointDeclaration", "endpointProperties", 
		"endpointProperty", "endpointBindingProperty", "endpointAddressProperty", 
		"returnType", "typeReference", "simpleType", "nulledType", "referenceType", 
		"objectType", "valueType", "voidType", "onewayType", "nullableType", "nonNullableType", 
		"nonNullableArrayType", "arrayType", "simpleArrayType", "nulledArrayType", 
		"constantValue", "identifier", "literal", "nullLiteral", "booleanLiteral", 
		"integerLiteral", "decimalLiteral", "scientificLiteral", "stringLiteral", 
		"contextualKeywords"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'enum'", "'exception'", "'struct'", "'interface'", 
		"'throws'", "'oneway'", "'return'", "'binding'", "'transport'", "'encoding'", 
		"'protocol'", "'endpoint'", "'address'", "'database'", "'entity'", "'abstract'", 
		"'component'", "'composite'", "'reference'", "'service'", "'wire'", "'to'", 
		"'implementation'", "'language'", "'assembly'", "'deployment'", "'environment'", 
		"'runtime'", "'null'", "'true'", "'false'", "'object'", "'string'", "'int'", 
		"'long'", "'float'", "'double'", "'byte'", "'bool'", "'any'", "'void'", 
		"';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", "'||'", 
		"'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", "'<='", 
		"'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'Date'", "'Time'", "'DateTime'", "'TimeSpan'", 
		"'Version'", "'Style'", "'MTOM'", "'SSL'", "'HTTP'", "'REST'", "'WebSocket'", 
		"'SOAP'", "'XML'", "'JSON'", "'ClientAuthentication'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KEnum", "KException", "KStruct", "KInterface", "KThrows", 
		"KOneway", "KReturn", "KBinding", "KTransport", "KEncoding", "KProtocol", 
		"KEndpoint", "KAddress", "KDatabase", "KEntity", "KAbstract", "KComponent", 
		"KComposite", "KReference", "KService", "KWire", "KTo", "KImplementation", 
		"KLanguage", "KAssembly", "KDeployment", "KEnvironment", "KRuntime", "KNull", 
		"KTrue", "KFalse", "KObject", "KString", "KInt", "KLong", "KFloat", "KDouble", 
		"KByte", "KBool", "KAny", "KVoid", "TSemicolon", "TColon", "TDot", "TComma", 
		"TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", "TQuestion", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IDate", "ITime", "IDateTime", 
		"ITimeSpan", "IVersion", "IStyle", "IMTOM", "ISSL", "IHTTP", "IREST", 
		"IWebSocket", "ISOAP", "IXML", "IJSON", "IClientAuthentication", "IdentifierNormal", 
		"IdentifierVerbatim", "IntegerLiteral", "DecimalLiteral", "ScientificLiteral", 
		"DateTimeOffsetLiteral", "DateTimeLiteral", "DateLiteral", "TimeLiteral", 
		"RegularStringLiteral", "GuidLiteral", "UTF8BOM", "WHITESPACE", "CRLF", 
		"LINEBREAK", "LINE_COMMENT", "COMMENT", "DoubleQuoteVerbatimStringLiteral", 
		"SingleQuoteVerbatimStringLiteral", "DoubleQuoteVerbatimStringLiteralStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SoalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SoalParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KNamespace || _la==TOpenBracket) {
				{
				{
				State = 204; namespaceDeclaration();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(SoalParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(SoalParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; identifier();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TDot) {
				{
				{
				State = 211; Match(TDot);
				State = 212; identifier();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; identifier();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 219; Match(TComma);
				State = 220; identifier();
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; qualifiedName();
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 227; Match(TComma);
				State = 228; qualifiedName();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(Context, State);
		EnterRule(_localctx, 8, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 234; annotation();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==TOpenBracket );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationAnnotationListContext : ParserRuleContext {
		public OperationAnnotationContext[] operationAnnotation() {
			return GetRuleContexts<OperationAnnotationContext>();
		}
		public OperationAnnotationContext operationAnnotation(int i) {
			return GetRuleContext<OperationAnnotationContext>(i);
		}
		public OperationAnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationAnnotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationAnnotationListContext operationAnnotationList() {
		OperationAnnotationListContext _localctx = new OperationAnnotationListContext(Context, State);
		EnterRule(_localctx, 10, RULE_operationAnnotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 239; operationAnnotation();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==TOpenBracket );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationAnnotationContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ReturnAnnotationContext returnAnnotation() {
			return GetRuleContext<ReturnAnnotationContext>(0);
		}
		public OperationAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationAnnotationContext operationAnnotation() {
		OperationAnnotationContext _localctx = new OperationAnnotationContext(Context, State);
		EnterRule(_localctx, 12, RULE_operationAnnotation);
		try {
			State = 246;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244; annotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245; returnAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(TOpenBracket);
			State = 249; annotationBody();
			State = 250; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnAnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode KReturn() { return GetToken(SoalParser.KReturn, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public ReturnAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnAnnotationContext returnAnnotation() {
		ReturnAnnotationContext _localctx = new ReturnAnnotationContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(TOpenBracket);
			State = 253; Match(KReturn);
			State = 254; Match(TColon);
			State = 255; annotationBody();
			State = 256; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationPropertiesContext annotationProperties() {
			return GetRuleContext<AnnotationPropertiesContext>(0);
		}
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_annotationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; identifier();
			State = 260;
			_la = TokenStream.La(1);
			if (_la==TOpenParen) {
				{
				State = 259; annotationProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertiesContext : ParserRuleContext {
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public AnnotationPropertyListContext annotationPropertyList() {
			return GetRuleContext<AnnotationPropertyListContext>(0);
		}
		public AnnotationPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertiesContext annotationProperties() {
		AnnotationPropertiesContext _localctx = new AnnotationPropertiesContext(Context, State);
		EnterRule(_localctx, 20, RULE_annotationProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(TOpenParen);
			State = 264;
			_la = TokenStream.La(1);
			if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				State = 263; annotationPropertyList();
				}
			}

			State = 266; Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertyListContext : ParserRuleContext {
		public AnnotationPropertyContext[] annotationProperty() {
			return GetRuleContexts<AnnotationPropertyContext>();
		}
		public AnnotationPropertyContext annotationProperty(int i) {
			return GetRuleContext<AnnotationPropertyContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public AnnotationPropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationPropertyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationPropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationPropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertyListContext annotationPropertyList() {
		AnnotationPropertyListContext _localctx = new AnnotationPropertyListContext(Context, State);
		EnterRule(_localctx, 22, RULE_annotationPropertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; annotationProperty();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 269; Match(TComma);
				State = 270; annotationProperty();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public AnnotationPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertyContext annotationProperty() {
		AnnotationPropertyContext _localctx = new AnnotationPropertyContext(Context, State);
		EnterRule(_localctx, 24, RULE_annotationProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; identifier();
			State = 277; Match(TAssign);
			State = 278; constantValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(SoalParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 280; annotationList();
				}
			}

			State = 283; Match(KNamespace);
			State = 284; qualifiedName();
			State = 285; Match(TAssign);
			State = 289;
			_la = TokenStream.La(1);
			if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				State = 286; identifier();
				State = 287; Match(TColon);
				}
			}

			State = 291; stringLiteral();
			State = 292; Match(TOpenBrace);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEnum) | (1L << KException) | (1L << KStruct) | (1L << KInterface) | (1L << KBinding) | (1L << KEndpoint) | (1L << KDatabase) | (1L << KEntity) | (1L << KAbstract) | (1L << KComponent) | (1L << KComposite) | (1L << KAssembly) | (1L << KDeployment) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 293; declaration();
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 299; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public ExceptionDeclarationContext exceptionDeclaration() {
			return GetRuleContext<ExceptionDeclarationContext>(0);
		}
		public EntityDeclarationContext entityDeclaration() {
			return GetRuleContext<EntityDeclarationContext>(0);
		}
		public DatabaseDeclarationContext databaseDeclaration() {
			return GetRuleContext<DatabaseDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ComponentDeclarationContext componentDeclaration() {
			return GetRuleContext<ComponentDeclarationContext>(0);
		}
		public CompositeDeclarationContext compositeDeclaration() {
			return GetRuleContext<CompositeDeclarationContext>(0);
		}
		public BindingDeclarationContext bindingDeclaration() {
			return GetRuleContext<BindingDeclarationContext>(0);
		}
		public EndpointDeclarationContext endpointDeclaration() {
			return GetRuleContext<EndpointDeclarationContext>(0);
		}
		public DeploymentDeclarationContext deploymentDeclaration() {
			return GetRuleContext<DeploymentDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_declaration);
		try {
			State = 312;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; enumDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; structDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 303; exceptionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 304; entityDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 305; databaseDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 306; interfaceDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 307; componentDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 308; compositeDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 309; bindingDeclaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 310; endpointDeclaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 311; deploymentDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(SoalParser.KEnum, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public EnumLiteralsContext enumLiterals() {
			return GetRuleContext<EnumLiteralsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 314; annotationList();
				}
			}

			State = 317; Match(KEnum);
			State = 318; identifier();
			State = 319; Match(TOpenBrace);
			State = 321;
			_la = TokenStream.La(1);
			if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (TOpenBracket - 50)) | (1L << (IDate - 50)) | (1L << (ITime - 50)) | (1L << (IDateTime - 50)) | (1L << (ITimeSpan - 50)) | (1L << (IVersion - 50)) | (1L << (IStyle - 50)) | (1L << (IMTOM - 50)) | (1L << (ISSL - 50)) | (1L << (IHTTP - 50)) | (1L << (IREST - 50)) | (1L << (IWebSocket - 50)) | (1L << (ISOAP - 50)) | (1L << (IXML - 50)) | (1L << (IJSON - 50)) | (1L << (IClientAuthentication - 50)) | (1L << (IdentifierNormal - 50)) | (1L << (IdentifierVerbatim - 50)))) != 0)) {
				{
				State = 320; enumLiterals();
				}
			}

			State = 323; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralsContext : ParserRuleContext {
		public EnumLiteralContext[] enumLiteral() {
			return GetRuleContexts<EnumLiteralContext>();
		}
		public EnumLiteralContext enumLiteral(int i) {
			return GetRuleContext<EnumLiteralContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public EnumLiteralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiterals; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumLiterals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumLiterals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiterals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralsContext enumLiterals() {
		EnumLiteralsContext _localctx = new EnumLiteralsContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumLiterals);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; enumLiteral();
			State = 330;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 326; Match(TComma);
					State = 327; enumLiteral();
					}
					} 
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 334;
			_la = TokenStream.La(1);
			if (_la==TComma) {
				{
				State = 333; Match(TComma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public EnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralContext enumLiteral() {
		EnumLiteralContext _localctx = new EnumLiteralContext(Context, State);
		EnterRule(_localctx, 34, RULE_enumLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 336; annotationList();
				}
			}

			State = 339; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode KStruct() { return GetToken(SoalParser.KStruct, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 341; annotationList();
				}
			}

			State = 344; Match(KStruct);
			State = 345; identifier();
			State = 348;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 346; Match(TColon);
				State = 347; qualifiedName();
				}
			}

			State = 350; Match(TOpenBrace);
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				{
				State = 351; propertyDeclaration();
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 357; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionDeclarationContext : ParserRuleContext {
		public ITerminalNode KException() { return GetToken(SoalParser.KException, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public ExceptionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterExceptionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitExceptionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionDeclarationContext exceptionDeclaration() {
		ExceptionDeclarationContext _localctx = new ExceptionDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_exceptionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 359; annotationList();
				}
			}

			State = 362; Match(KException);
			State = 363; identifier();
			State = 366;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 364; Match(TColon);
				State = 365; qualifiedName();
				}
			}

			State = 368; Match(TOpenBrace);
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				{
				State = 369; propertyDeclaration();
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 375; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclarationContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public EntityDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclarationContext entityDeclaration() {
		EntityDeclarationContext _localctx = new EntityDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_entityDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 377; annotationList();
				}
			}

			State = 380; Match(KEntity);
			State = 381; identifier();
			State = 384;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 382; Match(TColon);
				State = 383; qualifiedName();
				}
			}

			State = 386; Match(TOpenBrace);
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				{
				State = 387; propertyDeclaration();
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 393; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_propertyDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 395; annotationList();
				}
			}

			State = 398; typeReference();
			State = 399; identifier();
			State = 400; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseDeclarationContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public EntityReferenceContext[] entityReference() {
			return GetRuleContexts<EntityReferenceContext>();
		}
		public EntityReferenceContext entityReference(int i) {
			return GetRuleContext<EntityReferenceContext>(i);
		}
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public DatabaseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseDeclarationContext databaseDeclaration() {
		DatabaseDeclarationContext _localctx = new DatabaseDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_databaseDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 402; annotationList();
				}
			}

			State = 405; Match(KDatabase);
			State = 406; identifier();
			State = 407; Match(TOpenBrace);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KEntity) {
				{
				{
				State = 408; entityReference();
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid) | (1L << TOpenBracket))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				{
				State = 414; operationDeclaration();
				}
				}
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 420; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityReferenceContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EntityReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityReferenceContext entityReference() {
		EntityReferenceContext _localctx = new EntityReferenceContext(Context, State);
		EnterRule(_localctx, 46, RULE_entityReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(KEntity);
			State = 423; qualifiedName();
			State = 424; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KInterface() { return GetToken(SoalParser.KInterface, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 426; annotationList();
				}
			}

			State = 429; Match(KInterface);
			State = 430; identifier();
			State = 431; Match(TOpenBrace);
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid) | (1L << TOpenBracket))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				{
				State = 432; operationDeclaration();
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 438; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OnewayTypeContext onewayType() {
			return GetRuleContext<OnewayTypeContext>(0);
		}
		public OperationAnnotationListContext operationAnnotationList() {
			return GetRuleContext<OperationAnnotationListContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode KThrows() { return GetToken(SoalParser.KThrows, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 440; operationAnnotationList();
				}
			}

			State = 445;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KVoid:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				{
				State = 443; returnType();
				}
				break;
			case KOneway:
				{
				State = 444; onewayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 447; identifier();
			State = 448; Match(TOpenParen);
			State = 450;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				State = 449; parameterList();
				}
			}

			State = 452; Match(TCloseParen);
			State = 455;
			_la = TokenStream.La(1);
			if (_la==KThrows) {
				{
				State = 453; Match(KThrows);
				State = 454; qualifiedNameList();
				}
			}

			State = 457; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; parameter();
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 460; Match(TComma);
				State = 461; parameter();
				}
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 54, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 467; annotationList();
				}
			}

			State = 470; typeReference();
			State = 471; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentDeclarationContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode KAbstract() { return GetToken(SoalParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentElementsContext componentElements() {
			return GetRuleContext<ComponentElementsContext>(0);
		}
		public ComponentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDeclarationContext componentDeclaration() {
		ComponentDeclarationContext _localctx = new ComponentDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_componentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			_la = TokenStream.La(1);
			if (_la==KAbstract) {
				{
				State = 473; Match(KAbstract);
				}
			}

			State = 476; Match(KComponent);
			State = 477; identifier();
			State = 480;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 478; Match(TColon);
				State = 479; qualifiedName();
				}
			}

			State = 482; Match(TOpenBrace);
			State = 484;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				State = 483; componentElements();
				}
			}

			State = 486; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementsContext : ParserRuleContext {
		public ComponentElementContext[] componentElement() {
			return GetRuleContexts<ComponentElementContext>();
		}
		public ComponentElementContext componentElement(int i) {
			return GetRuleContext<ComponentElementContext>(i);
		}
		public ComponentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementsContext componentElements() {
		ComponentElementsContext _localctx = new ComponentElementsContext(Context, State);
		EnterRule(_localctx, 58, RULE_componentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 488; componentElement();
				}
				}
				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public ComponentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementContext componentElement() {
		ComponentElementContext _localctx = new ComponentElementContext(Context, State);
		EnterRule(_localctx, 60, RULE_componentElement);
		try {
			State = 498;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 495; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 496; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 497; componentLanguage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceContext : ParserRuleContext {
		public ITerminalNode KService() { return GetToken(SoalParser.KService, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentService; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentService(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentService(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentService(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceContext componentService() {
		ComponentServiceContext _localctx = new ComponentServiceContext(Context, State);
		EnterRule(_localctx, 62, RULE_componentService);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(KService);
			State = 501; qualifiedName();
			State = 503;
			_la = TokenStream.La(1);
			if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				State = 502; identifier();
				}
			}

			State = 505; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentReferenceContext : ParserRuleContext {
		public ITerminalNode KReference() { return GetToken(SoalParser.KReference, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentReferenceContext componentReference() {
		ComponentReferenceContext _localctx = new ComponentReferenceContext(Context, State);
		EnterRule(_localctx, 64, RULE_componentReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(KReference);
			State = 508; qualifiedName();
			State = 510;
			_la = TokenStream.La(1);
			if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				State = 509; identifier();
				}
			}

			State = 512; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceBodyContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ComponentServiceOrReferenceElementContext[] componentServiceOrReferenceElement() {
			return GetRuleContexts<ComponentServiceOrReferenceElementContext>();
		}
		public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement(int i) {
			return GetRuleContext<ComponentServiceOrReferenceElementContext>(i);
		}
		public ComponentServiceOrReferenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
		ComponentServiceOrReferenceBodyContext _localctx = new ComponentServiceOrReferenceBodyContext(Context, State);
		EnterRule(_localctx, 66, RULE_componentServiceOrReferenceBody);
		int _la;
		try {
			State = 523;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 515; Match(TOpenBrace);
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==KBinding) {
					{
					{
					State = 516; componentServiceOrReferenceElement();
					}
					}
					State = 521;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 522; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceElementContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentServiceOrReferenceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement() {
		ComponentServiceOrReferenceElementContext _localctx = new ComponentServiceOrReferenceElementContext(Context, State);
		EnterRule(_localctx, 68, RULE_componentServiceOrReferenceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(KBinding);
			State = 526; qualifiedName();
			State = 527; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentPropertyContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentPropertyContext componentProperty() {
		ComponentPropertyContext _localctx = new ComponentPropertyContext(Context, State);
		EnterRule(_localctx, 70, RULE_componentProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529; typeReference();
			State = 530; identifier();
			State = 531; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentImplementationContext : ParserRuleContext {
		public ITerminalNode KImplementation() { return GetToken(SoalParser.KImplementation, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentImplementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentImplementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentImplementation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentImplementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentImplementationContext componentImplementation() {
		ComponentImplementationContext _localctx = new ComponentImplementationContext(Context, State);
		EnterRule(_localctx, 72, RULE_componentImplementation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; Match(KImplementation);
			State = 534; identifier();
			State = 535; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentLanguageContext : ParserRuleContext {
		public ITerminalNode KLanguage() { return GetToken(SoalParser.KLanguage, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentLanguageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentLanguage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentLanguage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentLanguage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentLanguageContext componentLanguage() {
		ComponentLanguageContext _localctx = new ComponentLanguageContext(Context, State);
		EnterRule(_localctx, 74, RULE_componentLanguage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(KLanguage);
			State = 538; identifier();
			State = 539; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public ITerminalNode KComposite() { return GetToken(SoalParser.KComposite, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public CompositeElementsContext compositeElements() {
			return GetRuleContext<CompositeElementsContext>(0);
		}
		public CompositeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeDeclarationContext compositeDeclaration() {
		CompositeDeclarationContext _localctx = new CompositeDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_compositeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			_la = TokenStream.La(1);
			if ( !(_la==KComposite || _la==KAssembly) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 542; identifier();
			State = 545;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 543; Match(TColon);
				State = 544; qualifiedName();
				}
			}

			State = 547; Match(TOpenBrace);
			State = 549;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0)) {
				{
				State = 548; compositeElements();
				}
			}

			State = 551; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementsContext : ParserRuleContext {
		public CompositeElementContext[] compositeElement() {
			return GetRuleContexts<CompositeElementContext>();
		}
		public CompositeElementContext compositeElement(int i) {
			return GetRuleContext<CompositeElementContext>(i);
		}
		public CompositeElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementsContext compositeElements() {
		CompositeElementsContext _localctx = new CompositeElementsContext(Context, State);
		EnterRule(_localctx, 78, RULE_compositeElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 553; compositeElement();
				}
				}
				State = 556;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public CompositeComponentContext compositeComponent() {
			return GetRuleContext<CompositeComponentContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public CompositeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementContext compositeElement() {
		CompositeElementContext _localctx = new CompositeElementContext(Context, State);
		EnterRule(_localctx, 80, RULE_compositeElement);
		try {
			State = 565;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 558; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 559; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 560; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 561; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 562; componentLanguage();
				}
				break;
			case KComponent:
				EnterOuterAlt(_localctx, 6);
				{
				State = 563; compositeComponent();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 7);
				{
				State = 564; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeComponentContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeComponentContext compositeComponent() {
		CompositeComponentContext _localctx = new CompositeComponentContext(Context, State);
		EnterRule(_localctx, 82, RULE_compositeComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(KComponent);
			State = 568; qualifiedName();
			State = 569; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeWireContext : ParserRuleContext {
		public ITerminalNode KWire() { return GetToken(SoalParser.KWire, 0); }
		public WireSourceContext wireSource() {
			return GetRuleContext<WireSourceContext>(0);
		}
		public ITerminalNode KTo() { return GetToken(SoalParser.KTo, 0); }
		public WireTargetContext wireTarget() {
			return GetRuleContext<WireTargetContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeWireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeWire; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeWire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeWire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeWire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeWireContext compositeWire() {
		CompositeWireContext _localctx = new CompositeWireContext(Context, State);
		EnterRule(_localctx, 84, RULE_compositeWire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(KWire);
			State = 572; wireSource();
			State = 573; Match(KTo);
			State = 574; wireTarget();
			State = 575; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireSourceContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireSourceContext wireSource() {
		WireSourceContext _localctx = new WireSourceContext(Context, State);
		EnterRule(_localctx, 86, RULE_wireSource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireTargetContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireTargetContext wireTarget() {
		WireTargetContext _localctx = new WireTargetContext(Context, State);
		EnterRule(_localctx, 88, RULE_wireTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentDeclarationContext : ParserRuleContext {
		public ITerminalNode KDeployment() { return GetToken(SoalParser.KDeployment, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public DeploymentElementsContext deploymentElements() {
			return GetRuleContext<DeploymentElementsContext>(0);
		}
		public DeploymentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentDeclarationContext deploymentDeclaration() {
		DeploymentDeclarationContext _localctx = new DeploymentDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_deploymentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; Match(KDeployment);
			State = 582; identifier();
			State = 583; Match(TOpenBrace);
			State = 585;
			_la = TokenStream.La(1);
			if (_la==KWire || _la==KEnvironment) {
				{
				State = 584; deploymentElements();
				}
			}

			State = 587; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementsContext : ParserRuleContext {
		public DeploymentElementContext[] deploymentElement() {
			return GetRuleContexts<DeploymentElementContext>();
		}
		public DeploymentElementContext deploymentElement(int i) {
			return GetRuleContext<DeploymentElementContext>(i);
		}
		public DeploymentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementsContext deploymentElements() {
		DeploymentElementsContext _localctx = new DeploymentElementsContext(Context, State);
		EnterRule(_localctx, 92, RULE_deploymentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 589; deploymentElement();
				}
				}
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KWire || _la==KEnvironment );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementContext : ParserRuleContext {
		public EnvironmentDeclarationContext environmentDeclaration() {
			return GetRuleContext<EnvironmentDeclarationContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public DeploymentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementContext deploymentElement() {
		DeploymentElementContext _localctx = new DeploymentElementContext(Context, State);
		EnterRule(_localctx, 94, RULE_deploymentElement);
		try {
			State = 596;
			switch (TokenStream.La(1)) {
			case KEnvironment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 594; environmentDeclaration();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 2);
				{
				State = 595; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvironmentDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnvironment() { return GetToken(SoalParser.KEnvironment, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public RuntimeDeclarationContext runtimeDeclaration() {
			return GetRuleContext<RuntimeDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public RuntimeReferenceContext[] runtimeReference() {
			return GetRuleContexts<RuntimeReferenceContext>();
		}
		public RuntimeReferenceContext runtimeReference(int i) {
			return GetRuleContext<RuntimeReferenceContext>(i);
		}
		public EnvironmentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_environmentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnvironmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnvironmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvironmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvironmentDeclarationContext environmentDeclaration() {
		EnvironmentDeclarationContext _localctx = new EnvironmentDeclarationContext(Context, State);
		EnterRule(_localctx, 96, RULE_environmentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; Match(KEnvironment);
			State = 599; identifier();
			State = 600; Match(TOpenBrace);
			State = 601; runtimeDeclaration();
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KDatabase || _la==KAssembly) {
				{
				{
				State = 602; runtimeReference();
				}
				}
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 608; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeDeclarationContext : ParserRuleContext {
		public ITerminalNode KRuntime() { return GetToken(SoalParser.KRuntime, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public RuntimeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeDeclarationContext runtimeDeclaration() {
		RuntimeDeclarationContext _localctx = new RuntimeDeclarationContext(Context, State);
		EnterRule(_localctx, 98, RULE_runtimeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; Match(KRuntime);
			State = 611; identifier();
			State = 612; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeReferenceContext : ParserRuleContext {
		public AssemblyReferenceContext assemblyReference() {
			return GetRuleContext<AssemblyReferenceContext>(0);
		}
		public DatabaseReferenceContext databaseReference() {
			return GetRuleContext<DatabaseReferenceContext>(0);
		}
		public RuntimeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeReferenceContext runtimeReference() {
		RuntimeReferenceContext _localctx = new RuntimeReferenceContext(Context, State);
		EnterRule(_localctx, 100, RULE_runtimeReference);
		try {
			State = 616;
			switch (TokenStream.La(1)) {
			case KAssembly:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614; assemblyReference();
				}
				break;
			case KDatabase:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615; databaseReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyReferenceContext : ParserRuleContext {
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public AssemblyReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAssemblyReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAssemblyReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyReferenceContext assemblyReference() {
		AssemblyReferenceContext _localctx = new AssemblyReferenceContext(Context, State);
		EnterRule(_localctx, 102, RULE_assemblyReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(KAssembly);
			State = 619; qualifiedName();
			State = 620; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseReferenceContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public DatabaseReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseReferenceContext databaseReference() {
		DatabaseReferenceContext _localctx = new DatabaseReferenceContext(Context, State);
		EnterRule(_localctx, 104, RULE_databaseReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; Match(KDatabase);
			State = 623; qualifiedName();
			State = 624; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingDeclarationContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public BindingLayersContext bindingLayers() {
			return GetRuleContext<BindingLayersContext>(0);
		}
		public BindingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingDeclarationContext bindingDeclaration() {
		BindingDeclarationContext _localctx = new BindingDeclarationContext(Context, State);
		EnterRule(_localctx, 106, RULE_bindingDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626; Match(KBinding);
			State = 627; identifier();
			State = 628; Match(TOpenBrace);
			State = 630;
			_la = TokenStream.La(1);
			if (_la==KTransport) {
				{
				State = 629; bindingLayers();
				}
			}

			State = 632; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingLayersContext : ParserRuleContext {
		public TransportLayerContext transportLayer() {
			return GetRuleContext<TransportLayerContext>(0);
		}
		public EncodingLayerContext[] encodingLayer() {
			return GetRuleContexts<EncodingLayerContext>();
		}
		public EncodingLayerContext encodingLayer(int i) {
			return GetRuleContext<EncodingLayerContext>(i);
		}
		public ProtocolLayerContext[] protocolLayer() {
			return GetRuleContexts<ProtocolLayerContext>();
		}
		public ProtocolLayerContext protocolLayer(int i) {
			return GetRuleContext<ProtocolLayerContext>(i);
		}
		public BindingLayersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingLayers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingLayers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingLayers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingLayers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingLayersContext bindingLayers() {
		BindingLayersContext _localctx = new BindingLayersContext(Context, State);
		EnterRule(_localctx, 108, RULE_bindingLayers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; transportLayer();
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 635; encodingLayer();
				}
				}
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KEncoding );
			State = 643;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KProtocol) {
				{
				{
				State = 640; protocolLayer();
				}
				}
				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransportLayerContext : ParserRuleContext {
		public HttpTransportLayerContext httpTransportLayer() {
			return GetRuleContext<HttpTransportLayerContext>(0);
		}
		public RestTransportLayerContext restTransportLayer() {
			return GetRuleContext<RestTransportLayerContext>(0);
		}
		public WebSocketTransportLayerContext webSocketTransportLayer() {
			return GetRuleContext<WebSocketTransportLayerContext>(0);
		}
		public TransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransportLayerContext transportLayer() {
		TransportLayerContext _localctx = new TransportLayerContext(Context, State);
		EnterRule(_localctx, 110, RULE_transportLayer);
		try {
			State = 649;
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 646; httpTransportLayer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 647; restTransportLayer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 648; webSocketTransportLayer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IHTTP() { return GetToken(SoalParser.IHTTP, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public HttpTransportLayerPropertiesContext[] httpTransportLayerProperties() {
			return GetRuleContexts<HttpTransportLayerPropertiesContext>();
		}
		public HttpTransportLayerPropertiesContext httpTransportLayerProperties(int i) {
			return GetRuleContext<HttpTransportLayerPropertiesContext>(i);
		}
		public HttpTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpTransportLayerContext httpTransportLayer() {
		HttpTransportLayerContext _localctx = new HttpTransportLayerContext(Context, State);
		EnterRule(_localctx, 112, RULE_httpTransportLayer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; Match(KTransport);
			State = 652; Match(IHTTP);
			State = 662;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 653; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 654; Match(TOpenBrace);
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==ISSL || _la==IClientAuthentication) {
					{
					{
					State = 655; httpTransportLayerProperties();
					}
					}
					State = 660;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 661; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IREST() { return GetToken(SoalParser.IREST, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public RestTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRestTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRestTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestTransportLayerContext restTransportLayer() {
		RestTransportLayerContext _localctx = new RestTransportLayerContext(Context, State);
		EnterRule(_localctx, 114, RULE_restTransportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(KTransport);
			State = 665; Match(IREST);
			State = 669;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 666; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 667; Match(TOpenBrace);
				State = 668; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WebSocketTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IWebSocket() { return GetToken(SoalParser.IWebSocket, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public WebSocketTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webSocketTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWebSocketTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWebSocketTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebSocketTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebSocketTransportLayerContext webSocketTransportLayer() {
		WebSocketTransportLayerContext _localctx = new WebSocketTransportLayerContext(Context, State);
		EnterRule(_localctx, 116, RULE_webSocketTransportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671; Match(KTransport);
			State = 672; Match(IWebSocket);
			State = 676;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 673; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 674; Match(TOpenBrace);
				State = 675; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpTransportLayerPropertiesContext : ParserRuleContext {
		public HttpSslPropertyContext httpSslProperty() {
			return GetRuleContext<HttpSslPropertyContext>(0);
		}
		public HttpClientAuthenticationPropertyContext httpClientAuthenticationProperty() {
			return GetRuleContext<HttpClientAuthenticationPropertyContext>(0);
		}
		public HttpTransportLayerPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpTransportLayerProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayerProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayerProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayerProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpTransportLayerPropertiesContext httpTransportLayerProperties() {
		HttpTransportLayerPropertiesContext _localctx = new HttpTransportLayerPropertiesContext(Context, State);
		EnterRule(_localctx, 118, RULE_httpTransportLayerProperties);
		try {
			State = 680;
			switch (TokenStream.La(1)) {
			case ISSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 678; httpSslProperty();
				}
				break;
			case IClientAuthentication:
				EnterOuterAlt(_localctx, 2);
				{
				State = 679; httpClientAuthenticationProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpSslPropertyContext : ParserRuleContext {
		public ITerminalNode ISSL() { return GetToken(SoalParser.ISSL, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public HttpSslPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpSslProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpSslProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpSslProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpSslProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpSslPropertyContext httpSslProperty() {
		HttpSslPropertyContext _localctx = new HttpSslPropertyContext(Context, State);
		EnterRule(_localctx, 120, RULE_httpSslProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682; Match(ISSL);
			State = 683; Match(TAssign);
			State = 684; booleanLiteral();
			State = 685; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpClientAuthenticationPropertyContext : ParserRuleContext {
		public ITerminalNode IClientAuthentication() { return GetToken(SoalParser.IClientAuthentication, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public HttpClientAuthenticationPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpClientAuthenticationProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpClientAuthenticationProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpClientAuthenticationProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpClientAuthenticationProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpClientAuthenticationPropertyContext httpClientAuthenticationProperty() {
		HttpClientAuthenticationPropertyContext _localctx = new HttpClientAuthenticationPropertyContext(Context, State);
		EnterRule(_localctx, 122, RULE_httpClientAuthenticationProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; Match(IClientAuthentication);
			State = 688; Match(TAssign);
			State = 689; booleanLiteral();
			State = 690; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingLayerContext : ParserRuleContext {
		public SoapEncodingLayerContext soapEncodingLayer() {
			return GetRuleContext<SoapEncodingLayerContext>(0);
		}
		public XmlEncodingLayerContext xmlEncodingLayer() {
			return GetRuleContext<XmlEncodingLayerContext>(0);
		}
		public JsonEncodingLayerContext jsonEncodingLayer() {
			return GetRuleContext<JsonEncodingLayerContext>(0);
		}
		public EncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingLayerContext encodingLayer() {
		EncodingLayerContext _localctx = new EncodingLayerContext(Context, State);
		EnterRule(_localctx, 124, RULE_encodingLayer);
		try {
			State = 695;
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692; soapEncodingLayer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693; xmlEncodingLayer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 694; jsonEncodingLayer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode ISOAP() { return GetToken(SoalParser.ISOAP, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public SoapEncodingPropertiesContext[] soapEncodingProperties() {
			return GetRuleContexts<SoapEncodingPropertiesContext>();
		}
		public SoapEncodingPropertiesContext soapEncodingProperties(int i) {
			return GetRuleContext<SoapEncodingPropertiesContext>(i);
		}
		public SoapEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapEncodingLayerContext soapEncodingLayer() {
		SoapEncodingLayerContext _localctx = new SoapEncodingLayerContext(Context, State);
		EnterRule(_localctx, 126, RULE_soapEncodingLayer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697; Match(KEncoding);
			State = 698; Match(ISOAP);
			State = 708;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 699; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 700; Match(TOpenBrace);
				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (IVersion - 90)) | (1L << (IStyle - 90)) | (1L << (IMTOM - 90)))) != 0)) {
					{
					{
					State = 701; soapEncodingProperties();
					}
					}
					State = 706;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 707; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode IXML() { return GetToken(SoalParser.IXML, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public XmlEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterXmlEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitXmlEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlEncodingLayerContext xmlEncodingLayer() {
		XmlEncodingLayerContext _localctx = new XmlEncodingLayerContext(Context, State);
		EnterRule(_localctx, 128, RULE_xmlEncodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; Match(KEncoding);
			State = 711; Match(IXML);
			State = 715;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 712; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 713; Match(TOpenBrace);
				State = 714; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode IJSON() { return GetToken(SoalParser.IJSON, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public JsonEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterJsonEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitJsonEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEncodingLayerContext jsonEncodingLayer() {
		JsonEncodingLayerContext _localctx = new JsonEncodingLayerContext(Context, State);
		EnterRule(_localctx, 130, RULE_jsonEncodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717; Match(KEncoding);
			State = 718; Match(IJSON);
			State = 722;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 719; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 720; Match(TOpenBrace);
				State = 721; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapEncodingPropertiesContext : ParserRuleContext {
		public SoapVersionPropertyContext soapVersionProperty() {
			return GetRuleContext<SoapVersionPropertyContext>(0);
		}
		public SoapMtomPropertyContext soapMtomProperty() {
			return GetRuleContext<SoapMtomPropertyContext>(0);
		}
		public SoapStylePropertyContext soapStyleProperty() {
			return GetRuleContext<SoapStylePropertyContext>(0);
		}
		public SoapEncodingPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapEncodingProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapEncodingPropertiesContext soapEncodingProperties() {
		SoapEncodingPropertiesContext _localctx = new SoapEncodingPropertiesContext(Context, State);
		EnterRule(_localctx, 132, RULE_soapEncodingProperties);
		try {
			State = 727;
			switch (TokenStream.La(1)) {
			case IVersion:
				EnterOuterAlt(_localctx, 1);
				{
				State = 724; soapVersionProperty();
				}
				break;
			case IMTOM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 725; soapMtomProperty();
				}
				break;
			case IStyle:
				EnterOuterAlt(_localctx, 3);
				{
				State = 726; soapStyleProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapVersionPropertyContext : ParserRuleContext {
		public ITerminalNode IVersion() { return GetToken(SoalParser.IVersion, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapVersionPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapVersionProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapVersionProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapVersionProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapVersionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapVersionPropertyContext soapVersionProperty() {
		SoapVersionPropertyContext _localctx = new SoapVersionPropertyContext(Context, State);
		EnterRule(_localctx, 134, RULE_soapVersionProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(IVersion);
			State = 730; Match(TAssign);
			State = 731; identifier();
			State = 732; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapMtomPropertyContext : ParserRuleContext {
		public ITerminalNode IMTOM() { return GetToken(SoalParser.IMTOM, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapMtomPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapMtomProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapMtomProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapMtomProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapMtomProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapMtomPropertyContext soapMtomProperty() {
		SoapMtomPropertyContext _localctx = new SoapMtomPropertyContext(Context, State);
		EnterRule(_localctx, 136, RULE_soapMtomProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; Match(IMTOM);
			State = 735; Match(TAssign);
			State = 736; booleanLiteral();
			State = 737; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapStylePropertyContext : ParserRuleContext {
		public ITerminalNode IStyle() { return GetToken(SoalParser.IStyle, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapStylePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapStyleProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapStyleProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapStyleProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapStyleProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapStylePropertyContext soapStyleProperty() {
		SoapStylePropertyContext _localctx = new SoapStylePropertyContext(Context, State);
		EnterRule(_localctx, 138, RULE_soapStyleProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(IStyle);
			State = 740; Match(TAssign);
			State = 741; identifier();
			State = 742; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerContext : ParserRuleContext {
		public ITerminalNode KProtocol() { return GetToken(SoalParser.KProtocol, 0); }
		public ProtocolLayerKindContext protocolLayerKind() {
			return GetRuleContext<ProtocolLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ProtocolLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerContext protocolLayer() {
		ProtocolLayerContext _localctx = new ProtocolLayerContext(Context, State);
		EnterRule(_localctx, 140, RULE_protocolLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744; Match(KProtocol);
			State = 745; protocolLayerKind();
			State = 746; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerKindContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ProtocolLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerKindContext protocolLayerKind() {
		ProtocolLayerKindContext _localctx = new ProtocolLayerKindContext(Context, State);
		EnterRule(_localctx, 142, RULE_protocolLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointDeclarationContext : ParserRuleContext {
		public ITerminalNode KEndpoint() { return GetToken(SoalParser.KEndpoint, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EndpointPropertiesContext endpointProperties() {
			return GetRuleContext<EndpointPropertiesContext>(0);
		}
		public EndpointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointDeclarationContext endpointDeclaration() {
		EndpointDeclarationContext _localctx = new EndpointDeclarationContext(Context, State);
		EnterRule(_localctx, 144, RULE_endpointDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750; Match(KEndpoint);
			State = 751; identifier();
			State = 752; Match(TColon);
			State = 753; qualifiedName();
			State = 754; Match(TOpenBrace);
			State = 756;
			_la = TokenStream.La(1);
			if (_la==KBinding || _la==KAddress) {
				{
				State = 755; endpointProperties();
				}
			}

			State = 758; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertiesContext : ParserRuleContext {
		public EndpointPropertyContext[] endpointProperty() {
			return GetRuleContexts<EndpointPropertyContext>();
		}
		public EndpointPropertyContext endpointProperty(int i) {
			return GetRuleContext<EndpointPropertyContext>(i);
		}
		public EndpointPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertiesContext endpointProperties() {
		EndpointPropertiesContext _localctx = new EndpointPropertiesContext(Context, State);
		EnterRule(_localctx, 146, RULE_endpointProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 760; endpointProperty();
				}
				}
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KBinding || _la==KAddress );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertyContext : ParserRuleContext {
		public EndpointBindingPropertyContext endpointBindingProperty() {
			return GetRuleContext<EndpointBindingPropertyContext>(0);
		}
		public EndpointAddressPropertyContext endpointAddressProperty() {
			return GetRuleContext<EndpointAddressPropertyContext>(0);
		}
		public EndpointPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertyContext endpointProperty() {
		EndpointPropertyContext _localctx = new EndpointPropertyContext(Context, State);
		EnterRule(_localctx, 148, RULE_endpointProperty);
		try {
			State = 767;
			switch (TokenStream.La(1)) {
			case KBinding:
				EnterOuterAlt(_localctx, 1);
				{
				State = 765; endpointBindingProperty();
				}
				break;
			case KAddress:
				EnterOuterAlt(_localctx, 2);
				{
				State = 766; endpointAddressProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointBindingPropertyContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointBindingPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointBindingProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointBindingProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointBindingProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointBindingProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointBindingPropertyContext endpointBindingProperty() {
		EndpointBindingPropertyContext _localctx = new EndpointBindingPropertyContext(Context, State);
		EnterRule(_localctx, 150, RULE_endpointBindingProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769; Match(KBinding);
			State = 770; qualifiedName();
			State = 771; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointAddressPropertyContext : ParserRuleContext {
		public ITerminalNode KAddress() { return GetToken(SoalParser.KAddress, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointAddressPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointAddressProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointAddressProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointAddressProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointAddressProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointAddressPropertyContext endpointAddressProperty() {
		EndpointAddressPropertyContext _localctx = new EndpointAddressPropertyContext(Context, State);
		EnterRule(_localctx, 152, RULE_endpointAddressProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; Match(KAddress);
			State = 774; stringLiteral();
			State = 775; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NonNullableArrayTypeContext nonNullableArrayType() {
			return GetRuleContext<NonNullableArrayTypeContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 154, RULE_returnType);
		try {
			State = 781;
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 777; arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 778; simpleType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 779; nonNullableArrayType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 780; voidType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public NonNullableArrayTypeContext nonNullableArrayType() {
			return GetRuleContext<NonNullableArrayTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NulledTypeContext nulledType() {
			return GetRuleContext<NulledTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 156, RULE_typeReference);
		try {
			State = 787;
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 783; nonNullableArrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 784; arrayType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 785; simpleType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 786; nulledType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_simpleType);
		try {
			State = 792;
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789; valueType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 791; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NulledTypeContext : ParserRuleContext {
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public NonNullableTypeContext nonNullableType() {
			return GetRuleContext<NonNullableTypeContext>(0);
		}
		public NulledTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulledType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNulledType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNulledType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulledType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NulledTypeContext nulledType() {
		NulledTypeContext _localctx = new NulledTypeContext(Context, State);
		EnterRule(_localctx, 160, RULE_nulledType);
		try {
			State = 796;
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 794; nullableType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 795; nonNullableType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_referenceType);
		try {
			State = 800;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798; objectType();
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 799; qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(SoalParser.KObject, 0); }
		public ITerminalNode KString() { return GetToken(SoalParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			_la = TokenStream.La(1);
			if ( !(_la==KObject || _la==KString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(SoalParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(SoalParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(SoalParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(SoalParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(SoalParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(SoalParser.KBool, 0); }
		public ITerminalNode IDate() { return GetToken(SoalParser.IDate, 0); }
		public ITerminalNode ITime() { return GetToken(SoalParser.ITime, 0); }
		public ITerminalNode IDateTime() { return GetToken(SoalParser.IDateTime, 0); }
		public ITerminalNode ITimeSpan() { return GetToken(SoalParser.ITimeSpan, 0); }
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterValueType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitValueType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		ValueTypeContext _localctx = new ValueTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_valueType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			_la = TokenStream.La(1);
			if ( !(((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (KInt - 35)) | (1L << (KLong - 35)) | (1L << (KFloat - 35)) | (1L << (KDouble - 35)) | (1L << (KByte - 35)) | (1L << (KBool - 35)) | (1L << (IDate - 35)) | (1L << (ITime - 35)) | (1L << (IDateTime - 35)) | (1L << (ITimeSpan - 35)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(SoalParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnewayTypeContext : ParserRuleContext {
		public ITerminalNode KOneway() { return GetToken(SoalParser.KOneway, 0); }
		public OnewayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onewayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOnewayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOnewayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnewayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnewayTypeContext onewayType() {
		OnewayTypeContext _localctx = new OnewayTypeContext(Context, State);
		EnterRule(_localctx, 170, RULE_onewayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808; Match(KOneway);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(SoalParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 172, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810; valueType();
			State = 811; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullableTypeContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ITerminalNode TExclamation() { return GetToken(SoalParser.TExclamation, 0); }
		public NonNullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNonNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNonNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNullableTypeContext nonNullableType() {
		NonNullableTypeContext _localctx = new NonNullableTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_nonNullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813; referenceType();
			State = 814; Match(TExclamation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullableArrayTypeContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ITerminalNode TExclamation() { return GetToken(SoalParser.TExclamation, 0); }
		public NonNullableArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullableArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNonNullableArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNonNullableArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNullableArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNullableArrayTypeContext nonNullableArrayType() {
		NonNullableArrayTypeContext _localctx = new NonNullableArrayTypeContext(Context, State);
		EnterRule(_localctx, 176, RULE_nonNullableArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; arrayType();
			State = 817; Match(TExclamation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public SimpleArrayTypeContext simpleArrayType() {
			return GetRuleContext<SimpleArrayTypeContext>(0);
		}
		public NulledArrayTypeContext nulledArrayType() {
			return GetRuleContext<NulledArrayTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 178, RULE_arrayType);
		try {
			State = 821;
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 819; simpleArrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 820; nulledArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleArrayTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public SimpleArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSimpleArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSimpleArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleArrayTypeContext simpleArrayType() {
		SimpleArrayTypeContext _localctx = new SimpleArrayTypeContext(Context, State);
		EnterRule(_localctx, 180, RULE_simpleArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; simpleType();
			State = 824; Match(TOpenBracket);
			State = 825; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NulledArrayTypeContext : ParserRuleContext {
		public NulledTypeContext nulledType() {
			return GetRuleContext<NulledTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public NulledArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulledArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNulledArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNulledArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulledArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NulledArrayTypeContext nulledArrayType() {
		NulledArrayTypeContext _localctx = new NulledArrayTypeContext(Context, State);
		EnterRule(_localctx, 182, RULE_nulledArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827; nulledType();
			State = 828; Match(TOpenBracket);
			State = 829; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantValueContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstantValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterConstantValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitConstantValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantValueContext constantValue() {
		ConstantValueContext _localctx = new ConstantValueContext(Context, State);
		EnterRule(_localctx, 184, RULE_constantValue);
		try {
			State = 833;
			switch (TokenStream.La(1)) {
			case KNull:
			case KTrue:
			case KFalse:
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
			case SingleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 831; literal();
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 832; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(SoalParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(SoalParser.IdentifierVerbatim, 0); }
		public ContextualKeywordsContext contextualKeywords() {
			return GetRuleContext<ContextualKeywordsContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 186, RULE_identifier);
		try {
			State = 838;
			switch (TokenStream.La(1)) {
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 835; Match(IdentifierNormal);
				}
				break;
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 836; Match(IdentifierVerbatim);
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
				EnterOuterAlt(_localctx, 3);
				{
				State = 837; contextualKeywords();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 188, RULE_literal);
		try {
			State = 846;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 840; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 841; booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 842; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 843; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 844; scientificLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
			case SingleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 845; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(SoalParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 190, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(SoalParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(SoalParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 192, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(SoalParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 852; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(SoalParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 196, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(SoalParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(SoalParser.RegularStringLiteral, 0); }
		public ITerminalNode SingleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.SingleQuoteVerbatimStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 200, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			_la = TokenStream.La(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (RegularStringLiteral - 110)) | (1L << (DoubleQuoteVerbatimStringLiteral - 110)) | (1L << (SingleQuoteVerbatimStringLiteral - 110)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextualKeywordsContext : ParserRuleContext {
		public ITerminalNode IDate() { return GetToken(SoalParser.IDate, 0); }
		public ITerminalNode ITime() { return GetToken(SoalParser.ITime, 0); }
		public ITerminalNode IDateTime() { return GetToken(SoalParser.IDateTime, 0); }
		public ITerminalNode ITimeSpan() { return GetToken(SoalParser.ITimeSpan, 0); }
		public ITerminalNode IVersion() { return GetToken(SoalParser.IVersion, 0); }
		public ITerminalNode IStyle() { return GetToken(SoalParser.IStyle, 0); }
		public ITerminalNode IMTOM() { return GetToken(SoalParser.IMTOM, 0); }
		public ITerminalNode ISSL() { return GetToken(SoalParser.ISSL, 0); }
		public ITerminalNode IHTTP() { return GetToken(SoalParser.IHTTP, 0); }
		public ITerminalNode IREST() { return GetToken(SoalParser.IREST, 0); }
		public ITerminalNode IWebSocket() { return GetToken(SoalParser.IWebSocket, 0); }
		public ITerminalNode ISOAP() { return GetToken(SoalParser.ISOAP, 0); }
		public ITerminalNode IXML() { return GetToken(SoalParser.IXML, 0); }
		public ITerminalNode IJSON() { return GetToken(SoalParser.IJSON, 0); }
		public ITerminalNode IClientAuthentication() { return GetToken(SoalParser.IClientAuthentication, 0); }
		public ContextualKeywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextualKeywords; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterContextualKeywords(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitContextualKeywords(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextualKeywords(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextualKeywordsContext contextualKeywords() {
		ContextualKeywordsContext _localctx = new ContextualKeywordsContext(Context, State);
		EnterRule(_localctx, 202, RULE_contextualKeywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860;
			_la = TokenStream.La(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (IDate - 86)) | (1L << (ITime - 86)) | (1L << (IDateTime - 86)) | (1L << (ITimeSpan - 86)) | (1L << (IVersion - 86)) | (1L << (IStyle - 86)) | (1L << (IMTOM - 86)) | (1L << (ISSL - 86)) | (1L << (IHTTP - 86)) | (1L << (IREST - 86)) | (1L << (IWebSocket - 86)) | (1L << (ISOAP - 86)) | (1L << (IXML - 86)) | (1L << (IJSON - 86)) | (1L << (IClientAuthentication - 86)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3z\x361\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x3\x2\a\x2\xD0\n\x2\f\x2\xE\x2\xD3\v\x2\x3\x3\x3\x3\x3\x3\a\x3\xD8"+
		"\n\x3\f\x3\xE\x3\xDB\v\x3\x3\x4\x3\x4\x3\x4\a\x4\xE0\n\x4\f\x4\xE\x4\xE3"+
		"\v\x4\x3\x5\x3\x5\x3\x5\a\x5\xE8\n\x5\f\x5\xE\x5\xEB\v\x5\x3\x6\x6\x6"+
		"\xEE\n\x6\r\x6\xE\x6\xEF\x3\a\x6\a\xF3\n\a\r\a\xE\a\xF4\x3\b\x3\b\x5\b"+
		"\xF9\n\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x5"+
		"\v\x107\n\v\x3\f\x3\f\x5\f\x10B\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\a\r\x112"+
		"\n\r\f\r\xE\r\x115\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x5\xF\x11C\n\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x124\n\xF\x3\xF\x3\xF\x3\xF\a"+
		"\xF\x129\n\xF\f\xF\xE\xF\x12C\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x13B\n\x10"+
		"\x3\x11\x5\x11\x13E\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x144\n\x11"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\a\x12\x14B\n\x12\f\x12\xE\x12\x14E"+
		"\v\x12\x3\x12\x5\x12\x151\n\x12\x3\x13\x5\x13\x154\n\x13\x3\x13\x3\x13"+
		"\x3\x14\x5\x14\x159\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x15F\n\x14"+
		"\x3\x14\x3\x14\a\x14\x163\n\x14\f\x14\xE\x14\x166\v\x14\x3\x14\x3\x14"+
		"\x3\x15\x5\x15\x16B\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x171\n\x15"+
		"\x3\x15\x3\x15\a\x15\x175\n\x15\f\x15\xE\x15\x178\v\x15\x3\x15\x3\x15"+
		"\x3\x16\x5\x16\x17D\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x183\n\x16"+
		"\x3\x16\x3\x16\a\x16\x187\n\x16\f\x16\xE\x16\x18A\v\x16\x3\x16\x3\x16"+
		"\x3\x17\x5\x17\x18F\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x5\x18\x196"+
		"\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x19C\n\x18\f\x18\xE\x18\x19F"+
		"\v\x18\x3\x18\a\x18\x1A2\n\x18\f\x18\xE\x18\x1A5\v\x18\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x5\x1A\x1AE\n\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\a\x1A\x1B4\n\x1A\f\x1A\xE\x1A\x1B7\v\x1A\x3\x1A\x3\x1A\x3\x1B"+
		"\x5\x1B\x1BC\n\x1B\x3\x1B\x3\x1B\x5\x1B\x1C0\n\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x1C5\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x1CA\n\x1B\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\a\x1C\x1D1\n\x1C\f\x1C\xE\x1C\x1D4\v\x1C\x3\x1D"+
		"\x5\x1D\x1D7\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x5\x1E\x1DD\n\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x1E3\n\x1E\x3\x1E\x3\x1E\x5\x1E\x1E7\n\x1E"+
		"\x3\x1E\x3\x1E\x3\x1F\x6\x1F\x1EC\n\x1F\r\x1F\xE\x1F\x1ED\x3 \x3 \x3 "+
		"\x3 \x3 \x5 \x1F5\n \x3!\x3!\x3!\x5!\x1FA\n!\x3!\x3!\x3\"\x3\"\x3\"\x5"+
		"\"\x201\n\"\x3\"\x3\"\x3#\x3#\x3#\a#\x208\n#\f#\xE#\x20B\v#\x3#\x5#\x20E"+
		"\n#\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3"+
		"\'\x3(\x3(\x3(\x3(\x5(\x224\n(\x3(\x3(\x5(\x228\n(\x3(\x3(\x3)\x6)\x22D"+
		"\n)\r)\xE)\x22E\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x238\n*\x3+\x3+\x3+\x3"+
		"+\x3,\x3,\x3,\x3,\x3,\x3,\x3-\x3-\x3.\x3.\x3/\x3/\x3/\x3/\x5/\x24C\n/"+
		"\x3/\x3/\x3\x30\x6\x30\x251\n\x30\r\x30\xE\x30\x252\x3\x31\x3\x31\x5\x31"+
		"\x257\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x25E\n\x32\f\x32"+
		"\xE\x32\x261\v\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3"+
		"\x34\x5\x34\x26B\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x279\n\x37\x3\x37\x3\x37\x3"+
		"\x38\x3\x38\x6\x38\x27F\n\x38\r\x38\xE\x38\x280\x3\x38\a\x38\x284\n\x38"+
		"\f\x38\xE\x38\x287\v\x38\x3\x39\x3\x39\x3\x39\x5\x39\x28C\n\x39\x3:\x3"+
		":\x3:\x3:\x3:\a:\x293\n:\f:\xE:\x296\v:\x3:\x5:\x299\n:\x3;\x3;\x3;\x3"+
		";\x3;\x5;\x2A0\n;\x3<\x3<\x3<\x3<\x3<\x5<\x2A7\n<\x3=\x3=\x5=\x2AB\n="+
		"\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x5@\x2BA\n@\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\a\x41\x2C1\n\x41\f\x41\xE\x41\x2C4\v\x41"+
		"\x3\x41\x5\x41\x2C7\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2CE"+
		"\n\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x2D5\n\x43\x3\x44\x3"+
		"\x44\x3\x44\x5\x44\x2DA\n\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3H\x3H\x3H\x3H\x3I\x3"+
		"I\x3J\x3J\x3J\x3J\x3J\x3J\x5J\x2F7\nJ\x3J\x3J\x3K\x6K\x2FC\nK\rK\xEK\x2FD"+
		"\x3L\x3L\x5L\x302\nL\x3M\x3M\x3M\x3M\x3N\x3N\x3N\x3N\x3O\x3O\x3O\x3O\x5"+
		"O\x310\nO\x3P\x3P\x3P\x3P\x5P\x316\nP\x3Q\x3Q\x3Q\x5Q\x31B\nQ\x3R\x3R"+
		"\x5R\x31F\nR\x3S\x3S\x5S\x323\nS\x3T\x3T\x3U\x3U\x3V\x3V\x3W\x3W\x3X\x3"+
		"X\x3X\x3Y\x3Y\x3Y\x3Z\x3Z\x3Z\x3[\x3[\x5[\x338\n[\x3\\\x3\\\x3\\\x3\\"+
		"\x3]\x3]\x3]\x3]\x3^\x3^\x5^\x344\n^\x3_\x3_\x3_\x5_\x349\n_\x3`\x3`\x3"+
		"`\x3`\x3`\x3`\x5`\x351\n`\x3\x61\x3\x61\x3\x62\x3\x62\x3\x63\x3\x63\x3"+
		"\x64\x3\x64\x3\x65\x3\x65\x3\x66\x3\x66\x3g\x3g\x3g\x2\x2h\x2\x4\x6\b"+
		"\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:"+
		"<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86"+
		"\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA"+
		"\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC\x2"+
		"\b\x4\x2\x15\x15\x1C\x1C\x3\x2#$\x4\x2%*X[\x3\x2!\"\x4\x2ppxy\x3\x2X\x66"+
		"\x36D\x2\xD1\x3\x2\x2\x2\x4\xD4\x3\x2\x2\x2\x6\xDC\x3\x2\x2\x2\b\xE4\x3"+
		"\x2\x2\x2\n\xED\x3\x2\x2\x2\f\xF2\x3\x2\x2\x2\xE\xF8\x3\x2\x2\x2\x10\xFA"+
		"\x3\x2\x2\x2\x12\xFE\x3\x2\x2\x2\x14\x104\x3\x2\x2\x2\x16\x108\x3\x2\x2"+
		"\x2\x18\x10E\x3\x2\x2\x2\x1A\x116\x3\x2\x2\x2\x1C\x11B\x3\x2\x2\x2\x1E"+
		"\x13A\x3\x2\x2\x2 \x13D\x3\x2\x2\x2\"\x147\x3\x2\x2\x2$\x153\x3\x2\x2"+
		"\x2&\x158\x3\x2\x2\x2(\x16A\x3\x2\x2\x2*\x17C\x3\x2\x2\x2,\x18E\x3\x2"+
		"\x2\x2.\x195\x3\x2\x2\x2\x30\x1A8\x3\x2\x2\x2\x32\x1AD\x3\x2\x2\x2\x34"+
		"\x1BB\x3\x2\x2\x2\x36\x1CD\x3\x2\x2\x2\x38\x1D6\x3\x2\x2\x2:\x1DC\x3\x2"+
		"\x2\x2<\x1EB\x3\x2\x2\x2>\x1F4\x3\x2\x2\x2@\x1F6\x3\x2\x2\x2\x42\x1FD"+
		"\x3\x2\x2\x2\x44\x20D\x3\x2\x2\x2\x46\x20F\x3\x2\x2\x2H\x213\x3\x2\x2"+
		"\x2J\x217\x3\x2\x2\x2L\x21B\x3\x2\x2\x2N\x21F\x3\x2\x2\x2P\x22C\x3\x2"+
		"\x2\x2R\x237\x3\x2\x2\x2T\x239\x3\x2\x2\x2V\x23D\x3\x2\x2\x2X\x243\x3"+
		"\x2\x2\x2Z\x245\x3\x2\x2\x2\\\x247\x3\x2\x2\x2^\x250\x3\x2\x2\x2`\x256"+
		"\x3\x2\x2\x2\x62\x258\x3\x2\x2\x2\x64\x264\x3\x2\x2\x2\x66\x26A\x3\x2"+
		"\x2\x2h\x26C\x3\x2\x2\x2j\x270\x3\x2\x2\x2l\x274\x3\x2\x2\x2n\x27C\x3"+
		"\x2\x2\x2p\x28B\x3\x2\x2\x2r\x28D\x3\x2\x2\x2t\x29A\x3\x2\x2\x2v\x2A1"+
		"\x3\x2\x2\x2x\x2AA\x3\x2\x2\x2z\x2AC\x3\x2\x2\x2|\x2B1\x3\x2\x2\x2~\x2B9"+
		"\x3\x2\x2\x2\x80\x2BB\x3\x2\x2\x2\x82\x2C8\x3\x2\x2\x2\x84\x2CF\x3\x2"+
		"\x2\x2\x86\x2D9\x3\x2\x2\x2\x88\x2DB\x3\x2\x2\x2\x8A\x2E0\x3\x2\x2\x2"+
		"\x8C\x2E5\x3\x2\x2\x2\x8E\x2EA\x3\x2\x2\x2\x90\x2EE\x3\x2\x2\x2\x92\x2F0"+
		"\x3\x2\x2\x2\x94\x2FB\x3\x2\x2\x2\x96\x301\x3\x2\x2\x2\x98\x303\x3\x2"+
		"\x2\x2\x9A\x307\x3\x2\x2\x2\x9C\x30F\x3\x2\x2\x2\x9E\x315\x3\x2\x2\x2"+
		"\xA0\x31A\x3\x2\x2\x2\xA2\x31E\x3\x2\x2\x2\xA4\x322\x3\x2\x2\x2\xA6\x324"+
		"\x3\x2\x2\x2\xA8\x326\x3\x2\x2\x2\xAA\x328\x3\x2\x2\x2\xAC\x32A\x3\x2"+
		"\x2\x2\xAE\x32C\x3\x2\x2\x2\xB0\x32F\x3\x2\x2\x2\xB2\x332\x3\x2\x2\x2"+
		"\xB4\x337\x3\x2\x2\x2\xB6\x339\x3\x2\x2\x2\xB8\x33D\x3\x2\x2\x2\xBA\x343"+
		"\x3\x2\x2\x2\xBC\x348\x3\x2\x2\x2\xBE\x350\x3\x2\x2\x2\xC0\x352\x3\x2"+
		"\x2\x2\xC2\x354\x3\x2\x2\x2\xC4\x356\x3\x2\x2\x2\xC6\x358\x3\x2\x2\x2"+
		"\xC8\x35A\x3\x2\x2\x2\xCA\x35C\x3\x2\x2\x2\xCC\x35E\x3\x2\x2\x2\xCE\xD0"+
		"\x5\x1C\xF\x2\xCF\xCE\x3\x2\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1\xCF\x3\x2\x2"+
		"\x2\xD1\xD2\x3\x2\x2\x2\xD2\x3\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD9"+
		"\x5\xBC_\x2\xD5\xD6\a/\x2\x2\xD6\xD8\x5\xBC_\x2\xD7\xD5\x3\x2\x2\x2\xD8"+
		"\xDB\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\x5\x3\x2"+
		"\x2\x2\xDB\xD9\x3\x2\x2\x2\xDC\xE1\x5\xBC_\x2\xDD\xDE\a\x30\x2\x2\xDE"+
		"\xE0\x5\xBC_\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2"+
		"\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\a\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE9"+
		"\x5\x4\x3\x2\xE5\xE6\a\x30\x2\x2\xE6\xE8\x5\x4\x3\x2\xE7\xE5\x3\x2\x2"+
		"\x2\xE8\xEB\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\t"+
		"\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEC\xEE\x5\x10\t\x2\xED\xEC\x3\x2\x2"+
		"\x2\xEE\xEF\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\v"+
		"\x3\x2\x2\x2\xF1\xF3\x5\xE\b\x2\xF2\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2"+
		"\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\r\x3\x2\x2\x2\xF6\xF9\x5"+
		"\x10\t\x2\xF7\xF9\x5\x12\n\x2\xF8\xF6\x3\x2\x2\x2\xF8\xF7\x3\x2\x2\x2"+
		"\xF9\xF\x3\x2\x2\x2\xFA\xFB\a\x34\x2\x2\xFB\xFC\x5\x14\v\x2\xFC\xFD\a"+
		"\x35\x2\x2\xFD\x11\x3\x2\x2\x2\xFE\xFF\a\x34\x2\x2\xFF\x100\a\n\x2\x2"+
		"\x100\x101\a.\x2\x2\x101\x102\x5\x14\v\x2\x102\x103\a\x35\x2\x2\x103\x13"+
		"\x3\x2\x2\x2\x104\x106\x5\xBC_\x2\x105\x107\x5\x16\f\x2\x106\x105\x3\x2"+
		"\x2\x2\x106\x107\x3\x2\x2\x2\x107\x15\x3\x2\x2\x2\x108\x10A\a\x32\x2\x2"+
		"\x109\x10B\x5\x18\r\x2\x10A\x109\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B"+
		"\x10C\x3\x2\x2\x2\x10C\x10D\a\x33\x2\x2\x10D\x17\x3\x2\x2\x2\x10E\x113"+
		"\x5\x1A\xE\x2\x10F\x110\a\x30\x2\x2\x110\x112\x5\x1A\xE\x2\x111\x10F\x3"+
		"\x2\x2\x2\x112\x115\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x114\x3\x2"+
		"\x2\x2\x114\x19\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x116\x117\x5\xBC_\x2"+
		"\x117\x118\a\x31\x2\x2\x118\x119\x5\xBA^\x2\x119\x1B\x3\x2\x2\x2\x11A"+
		"\x11C\x5\n\x6\x2\x11B\x11A\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11D"+
		"\x3\x2\x2\x2\x11D\x11E\a\x3\x2\x2\x11E\x11F\x5\x4\x3\x2\x11F\x123\a\x31"+
		"\x2\x2\x120\x121\x5\xBC_\x2\x121\x122\a.\x2\x2\x122\x124\x3\x2\x2\x2\x123"+
		"\x120\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x126"+
		"\x5\xCA\x66\x2\x126\x12A\a\x36\x2\x2\x127\x129\x5\x1E\x10\x2\x128\x127"+
		"\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12A\x12B\x3"+
		"\x2\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D\x12E\a\x37"+
		"\x2\x2\x12E\x1D\x3\x2\x2\x2\x12F\x13B\x5 \x11\x2\x130\x13B\x5&\x14\x2"+
		"\x131\x13B\x5(\x15\x2\x132\x13B\x5*\x16\x2\x133\x13B\x5.\x18\x2\x134\x13B"+
		"\x5\x32\x1A\x2\x135\x13B\x5:\x1E\x2\x136\x13B\x5N(\x2\x137\x13B\x5l\x37"+
		"\x2\x138\x13B\x5\x92J\x2\x139\x13B\x5\\/\x2\x13A\x12F\x3\x2\x2\x2\x13A"+
		"\x130\x3\x2\x2\x2\x13A\x131\x3\x2\x2\x2\x13A\x132\x3\x2\x2\x2\x13A\x133"+
		"\x3\x2\x2\x2\x13A\x134\x3\x2\x2\x2\x13A\x135\x3\x2\x2\x2\x13A\x136\x3"+
		"\x2\x2\x2\x13A\x137\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2\x13A\x139\x3\x2"+
		"\x2\x2\x13B\x1F\x3\x2\x2\x2\x13C\x13E\x5\n\x6\x2\x13D\x13C\x3\x2\x2\x2"+
		"\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x140\a\x4\x2\x2\x140"+
		"\x141\x5\xBC_\x2\x141\x143\a\x36\x2\x2\x142\x144\x5\"\x12\x2\x143\x142"+
		"\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x146\a\x37"+
		"\x2\x2\x146!\x3\x2\x2\x2\x147\x14C\x5$\x13\x2\x148\x149\a\x30\x2\x2\x149"+
		"\x14B\x5$\x13\x2\x14A\x148\x3\x2\x2\x2\x14B\x14E\x3\x2\x2\x2\x14C\x14A"+
		"\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x150\x3\x2\x2\x2\x14E\x14C\x3"+
		"\x2\x2\x2\x14F\x151\a\x30\x2\x2\x150\x14F\x3\x2\x2\x2\x150\x151\x3\x2"+
		"\x2\x2\x151#\x3\x2\x2\x2\x152\x154\x5\n\x6\x2\x153\x152\x3\x2\x2\x2\x153"+
		"\x154\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x156\x5\xBC_\x2\x156%\x3"+
		"\x2\x2\x2\x157\x159\x5\n\x6\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2"+
		"\x2\x159\x15A\x3\x2\x2\x2\x15A\x15B\a\x6\x2\x2\x15B\x15E\x5\xBC_\x2\x15C"+
		"\x15D\a.\x2\x2\x15D\x15F\x5\x4\x3\x2\x15E\x15C\x3\x2\x2\x2\x15E\x15F\x3"+
		"\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x164\a\x36\x2\x2\x161\x163\x5,\x17"+
		"\x2\x162\x161\x3\x2\x2\x2\x163\x166\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2"+
		"\x164\x165\x3\x2\x2\x2\x165\x167\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x167"+
		"\x168\a\x37\x2\x2\x168\'\x3\x2\x2\x2\x169\x16B\x5\n\x6\x2\x16A\x169\x3"+
		"\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16C\x16D\a\x5\x2"+
		"\x2\x16D\x170\x5\xBC_\x2\x16E\x16F\a.\x2\x2\x16F\x171\x5\x4\x3\x2\x170"+
		"\x16E\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172\x176"+
		"\a\x36\x2\x2\x173\x175\x5,\x17\x2\x174\x173\x3\x2\x2\x2\x175\x178\x3\x2"+
		"\x2\x2\x176\x174\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177\x179\x3\x2\x2"+
		"\x2\x178\x176\x3\x2\x2\x2\x179\x17A\a\x37\x2\x2\x17A)\x3\x2\x2\x2\x17B"+
		"\x17D\x5\n\x6\x2\x17C\x17B\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17E"+
		"\x3\x2\x2\x2\x17E\x17F\a\x12\x2\x2\x17F\x182\x5\xBC_\x2\x180\x181\a.\x2"+
		"\x2\x181\x183\x5\x4\x3\x2\x182\x180\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2"+
		"\x183\x184\x3\x2\x2\x2\x184\x188\a\x36\x2\x2\x185\x187\x5,\x17\x2\x186"+
		"\x185\x3\x2\x2\x2\x187\x18A\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x188\x189"+
		"\x3\x2\x2\x2\x189\x18B\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18B\x18C\a\x37"+
		"\x2\x2\x18C+\x3\x2\x2\x2\x18D\x18F\x5\n\x6\x2\x18E\x18D\x3\x2\x2\x2\x18E"+
		"\x18F\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x191\x5\x9EP\x2\x191\x192"+
		"\x5\xBC_\x2\x192\x193\a-\x2\x2\x193-\x3\x2\x2\x2\x194\x196\x5\n\x6\x2"+
		"\x195\x194\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197"+
		"\x198\a\x11\x2\x2\x198\x199\x5\xBC_\x2\x199\x19D\a\x36\x2\x2\x19A\x19C"+
		"\x5\x30\x19\x2\x19B\x19A\x3\x2\x2\x2\x19C\x19F\x3\x2\x2\x2\x19D\x19B\x3"+
		"\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E\x1A3\x3\x2\x2\x2\x19F\x19D\x3\x2"+
		"\x2\x2\x1A0\x1A2\x5\x34\x1B\x2\x1A1\x1A0\x3\x2\x2\x2\x1A2\x1A5\x3\x2\x2"+
		"\x2\x1A3\x1A1\x3\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A6\x3\x2\x2\x2"+
		"\x1A5\x1A3\x3\x2\x2\x2\x1A6\x1A7\a\x37\x2\x2\x1A7/\x3\x2\x2\x2\x1A8\x1A9"+
		"\a\x12\x2\x2\x1A9\x1AA\x5\x4\x3\x2\x1AA\x1AB\a-\x2\x2\x1AB\x31\x3\x2\x2"+
		"\x2\x1AC\x1AE\x5\n\x6\x2\x1AD\x1AC\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE"+
		"\x1AF\x3\x2\x2\x2\x1AF\x1B0\a\a\x2\x2\x1B0\x1B1\x5\xBC_\x2\x1B1\x1B5\a"+
		"\x36\x2\x2\x1B2\x1B4\x5\x34\x1B\x2\x1B3\x1B2\x3\x2\x2\x2\x1B4\x1B7\x3"+
		"\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B8\x3\x2"+
		"\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8\x1B9\a\x37\x2\x2\x1B9\x33\x3\x2\x2\x2"+
		"\x1BA\x1BC\x5\f\a\x2\x1BB\x1BA\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC"+
		"\x1BF\x3\x2\x2\x2\x1BD\x1C0\x5\x9CO\x2\x1BE\x1C0\x5\xACW\x2\x1BF\x1BD"+
		"\x3\x2\x2\x2\x1BF\x1BE\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C2\x5"+
		"\xBC_\x2\x1C2\x1C4\a\x32\x2\x2\x1C3\x1C5\x5\x36\x1C\x2\x1C4\x1C3\x3\x2"+
		"\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C9\a\x33\x2"+
		"\x2\x1C7\x1C8\a\b\x2\x2\x1C8\x1CA\x5\b\x5\x2\x1C9\x1C7\x3\x2\x2\x2\x1C9"+
		"\x1CA\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CC\a-\x2\x2\x1CC\x35\x3"+
		"\x2\x2\x2\x1CD\x1D2\x5\x38\x1D\x2\x1CE\x1CF\a\x30\x2\x2\x1CF\x1D1\x5\x38"+
		"\x1D\x2\x1D0\x1CE\x3\x2\x2\x2\x1D1\x1D4\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2"+
		"\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x37\x3\x2\x2\x2\x1D4\x1D2\x3\x2\x2\x2\x1D5"+
		"\x1D7\x5\n\x6\x2\x1D6\x1D5\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D8"+
		"\x3\x2\x2\x2\x1D8\x1D9\x5\x9EP\x2\x1D9\x1DA\x5\xBC_\x2\x1DA\x39\x3\x2"+
		"\x2\x2\x1DB\x1DD\a\x13\x2\x2\x1DC\x1DB\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2"+
		"\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1DF\a\x14\x2\x2\x1DF\x1E2\x5\xBC_\x2\x1E0"+
		"\x1E1\a.\x2\x2\x1E1\x1E3\x5\x4\x3\x2\x1E2\x1E0\x3\x2\x2\x2\x1E2\x1E3\x3"+
		"\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E6\a\x36\x2\x2\x1E5\x1E7\x5<\x1F"+
		"\x2\x1E6\x1E5\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2"+
		"\x1E8\x1E9\a\x37\x2\x2\x1E9;\x3\x2\x2\x2\x1EA\x1EC\x5> \x2\x1EB\x1EA\x3"+
		"\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2\x2\x1ED\x1EE\x3\x2"+
		"\x2\x2\x1EE=\x3\x2\x2\x2\x1EF\x1F5\x5@!\x2\x1F0\x1F5\x5\x42\"\x2\x1F1"+
		"\x1F5\x5H%\x2\x1F2\x1F5\x5J&\x2\x1F3\x1F5\x5L\'\x2\x1F4\x1EF\x3\x2\x2"+
		"\x2\x1F4\x1F0\x3\x2\x2\x2\x1F4\x1F1\x3\x2\x2\x2\x1F4\x1F2\x3\x2\x2\x2"+
		"\x1F4\x1F3\x3\x2\x2\x2\x1F5?\x3\x2\x2\x2\x1F6\x1F7\a\x17\x2\x2\x1F7\x1F9"+
		"\x5\x4\x3\x2\x1F8\x1FA\x5\xBC_\x2\x1F9\x1F8\x3\x2\x2\x2\x1F9\x1FA\x3\x2"+
		"\x2\x2\x1FA\x1FB\x3\x2\x2\x2\x1FB\x1FC\x5\x44#\x2\x1FC\x41\x3\x2\x2\x2"+
		"\x1FD\x1FE\a\x16\x2\x2\x1FE\x200\x5\x4\x3\x2\x1FF\x201\x5\xBC_\x2\x200"+
		"\x1FF\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202\x203"+
		"\x5\x44#\x2\x203\x43\x3\x2\x2\x2\x204\x20E\a-\x2\x2\x205\x209\a\x36\x2"+
		"\x2\x206\x208\x5\x46$\x2\x207\x206\x3\x2\x2\x2\x208\x20B\x3\x2\x2\x2\x209"+
		"\x207\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x20C\x3\x2\x2\x2\x20B\x209"+
		"\x3\x2\x2\x2\x20C\x20E\a\x37\x2\x2\x20D\x204\x3\x2\x2\x2\x20D\x205\x3"+
		"\x2\x2\x2\x20E\x45\x3\x2\x2\x2\x20F\x210\a\v\x2\x2\x210\x211\x5\x4\x3"+
		"\x2\x211\x212\a-\x2\x2\x212G\x3\x2\x2\x2\x213\x214\x5\x9EP\x2\x214\x215"+
		"\x5\xBC_\x2\x215\x216\a-\x2\x2\x216I\x3\x2\x2\x2\x217\x218\a\x1A\x2\x2"+
		"\x218\x219\x5\xBC_\x2\x219\x21A\a-\x2\x2\x21AK\x3\x2\x2\x2\x21B\x21C\a"+
		"\x1B\x2\x2\x21C\x21D\x5\xBC_\x2\x21D\x21E\a-\x2\x2\x21EM\x3\x2\x2\x2\x21F"+
		"\x220\t\x2\x2\x2\x220\x223\x5\xBC_\x2\x221\x222\a.\x2\x2\x222\x224\x5"+
		"\x4\x3\x2\x223\x221\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x225\x3\x2"+
		"\x2\x2\x225\x227\a\x36\x2\x2\x226\x228\x5P)\x2\x227\x226\x3\x2\x2\x2\x227"+
		"\x228\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2\x229\x22A\a\x37\x2\x2\x22AO\x3"+
		"\x2\x2\x2\x22B\x22D\x5R*\x2\x22C\x22B\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2"+
		"\x22E\x22C\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22FQ\x3\x2\x2\x2\x230\x238"+
		"\x5@!\x2\x231\x238\x5\x42\"\x2\x232\x238\x5H%\x2\x233\x238\x5J&\x2\x234"+
		"\x238\x5L\'\x2\x235\x238\x5T+\x2\x236\x238\x5V,\x2\x237\x230\x3\x2\x2"+
		"\x2\x237\x231\x3\x2\x2\x2\x237\x232\x3\x2\x2\x2\x237\x233\x3\x2\x2\x2"+
		"\x237\x234\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x237\x236\x3\x2\x2\x2\x238"+
		"S\x3\x2\x2\x2\x239\x23A\a\x14\x2\x2\x23A\x23B\x5\x4\x3\x2\x23B\x23C\a"+
		"-\x2\x2\x23CU\x3\x2\x2\x2\x23D\x23E\a\x18\x2\x2\x23E\x23F\x5X-\x2\x23F"+
		"\x240\a\x19\x2\x2\x240\x241\x5Z.\x2\x241\x242\a-\x2\x2\x242W\x3\x2\x2"+
		"\x2\x243\x244\x5\x4\x3\x2\x244Y\x3\x2\x2\x2\x245\x246\x5\x4\x3\x2\x246"+
		"[\x3\x2\x2\x2\x247\x248\a\x1D\x2\x2\x248\x249\x5\xBC_\x2\x249\x24B\a\x36"+
		"\x2\x2\x24A\x24C\x5^\x30\x2\x24B\x24A\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2"+
		"\x24C\x24D\x3\x2\x2\x2\x24D\x24E\a\x37\x2\x2\x24E]\x3\x2\x2\x2\x24F\x251"+
		"\x5`\x31\x2\x250\x24F\x3\x2\x2\x2\x251\x252\x3\x2\x2\x2\x252\x250\x3\x2"+
		"\x2\x2\x252\x253\x3\x2\x2\x2\x253_\x3\x2\x2\x2\x254\x257\x5\x62\x32\x2"+
		"\x255\x257\x5V,\x2\x256\x254\x3\x2\x2\x2\x256\x255\x3\x2\x2\x2\x257\x61"+
		"\x3\x2\x2\x2\x258\x259\a\x1E\x2\x2\x259\x25A\x5\xBC_\x2\x25A\x25B\a\x36"+
		"\x2\x2\x25B\x25F\x5\x64\x33\x2\x25C\x25E\x5\x66\x34\x2\x25D\x25C\x3\x2"+
		"\x2\x2\x25E\x261\x3\x2\x2\x2\x25F\x25D\x3\x2\x2\x2\x25F\x260\x3\x2\x2"+
		"\x2\x260\x262\x3\x2\x2\x2\x261\x25F\x3\x2\x2\x2\x262\x263\a\x37\x2\x2"+
		"\x263\x63\x3\x2\x2\x2\x264\x265\a\x1F\x2\x2\x265\x266\x5\xBC_\x2\x266"+
		"\x267\a-\x2\x2\x267\x65\x3\x2\x2\x2\x268\x26B\x5h\x35\x2\x269\x26B\x5"+
		"j\x36\x2\x26A\x268\x3\x2\x2\x2\x26A\x269\x3\x2\x2\x2\x26Bg\x3\x2\x2\x2"+
		"\x26C\x26D\a\x1C\x2\x2\x26D\x26E\x5\x4\x3\x2\x26E\x26F\a-\x2\x2\x26Fi"+
		"\x3\x2\x2\x2\x270\x271\a\x11\x2\x2\x271\x272\x5\x4\x3\x2\x272\x273\a-"+
		"\x2\x2\x273k\x3\x2\x2\x2\x274\x275\a\v\x2\x2\x275\x276\x5\xBC_\x2\x276"+
		"\x278\a\x36\x2\x2\x277\x279\x5n\x38\x2\x278\x277\x3\x2\x2\x2\x278\x279"+
		"\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x27B\a\x37\x2\x2\x27Bm\x3\x2\x2"+
		"\x2\x27C\x27E\x5p\x39\x2\x27D\x27F\x5~@\x2\x27E\x27D\x3\x2\x2\x2\x27F"+
		"\x280\x3\x2\x2\x2\x280\x27E\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x285"+
		"\x3\x2\x2\x2\x282\x284\x5\x8EH\x2\x283\x282\x3\x2\x2\x2\x284\x287\x3\x2"+
		"\x2\x2\x285\x283\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286o\x3\x2\x2\x2\x287"+
		"\x285\x3\x2\x2\x2\x288\x28C\x5r:\x2\x289\x28C\x5t;\x2\x28A\x28C\x5v<\x2"+
		"\x28B\x288\x3\x2\x2\x2\x28B\x289\x3\x2\x2\x2\x28B\x28A\x3\x2\x2\x2\x28C"+
		"q\x3\x2\x2\x2\x28D\x28E\a\f\x2\x2\x28E\x298\a`\x2\x2\x28F\x299\a-\x2\x2"+
		"\x290\x294\a\x36\x2\x2\x291\x293\x5x=\x2\x292\x291\x3\x2\x2\x2\x293\x296"+
		"\x3\x2\x2\x2\x294\x292\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x297\x3"+
		"\x2\x2\x2\x296\x294\x3\x2\x2\x2\x297\x299\a\x37\x2\x2\x298\x28F\x3\x2"+
		"\x2\x2\x298\x290\x3\x2\x2\x2\x299s\x3\x2\x2\x2\x29A\x29B\a\f\x2\x2\x29B"+
		"\x29F\a\x61\x2\x2\x29C\x2A0\a-\x2\x2\x29D\x29E\a\x36\x2\x2\x29E\x2A0\a"+
		"\x37\x2\x2\x29F\x29C\x3\x2\x2\x2\x29F\x29D\x3\x2\x2\x2\x2A0u\x3\x2\x2"+
		"\x2\x2A1\x2A2\a\f\x2\x2\x2A2\x2A6\a\x62\x2\x2\x2A3\x2A7\a-\x2\x2\x2A4"+
		"\x2A5\a\x36\x2\x2\x2A5\x2A7\a\x37\x2\x2\x2A6\x2A3\x3\x2\x2\x2\x2A6\x2A4"+
		"\x3\x2\x2\x2\x2A7w\x3\x2\x2\x2\x2A8\x2AB\x5z>\x2\x2A9\x2AB\x5|?\x2\x2AA"+
		"\x2A8\x3\x2\x2\x2\x2AA\x2A9\x3\x2\x2\x2\x2ABy\x3\x2\x2\x2\x2AC\x2AD\a"+
		"_\x2\x2\x2AD\x2AE\a\x31\x2\x2\x2AE\x2AF\x5\xC2\x62\x2\x2AF\x2B0\a-\x2"+
		"\x2\x2B0{\x3\x2\x2\x2\x2B1\x2B2\a\x66\x2\x2\x2B2\x2B3\a\x31\x2\x2\x2B3"+
		"\x2B4\x5\xC2\x62\x2\x2B4\x2B5\a-\x2\x2\x2B5}\x3\x2\x2\x2\x2B6\x2BA\x5"+
		"\x80\x41\x2\x2B7\x2BA\x5\x82\x42\x2\x2B8\x2BA\x5\x84\x43\x2\x2B9\x2B6"+
		"\x3\x2\x2\x2\x2B9\x2B7\x3\x2\x2\x2\x2B9\x2B8\x3\x2\x2\x2\x2BA\x7F\x3\x2"+
		"\x2\x2\x2BB\x2BC\a\r\x2\x2\x2BC\x2C6\a\x63\x2\x2\x2BD\x2C7\a-\x2\x2\x2BE"+
		"\x2C2\a\x36\x2\x2\x2BF\x2C1\x5\x86\x44\x2\x2C0\x2BF\x3\x2\x2\x2\x2C1\x2C4"+
		"\x3\x2\x2\x2\x2C2\x2C0\x3\x2\x2\x2\x2C2\x2C3\x3\x2\x2\x2\x2C3\x2C5\x3"+
		"\x2\x2\x2\x2C4\x2C2\x3\x2\x2\x2\x2C5\x2C7\a\x37\x2\x2\x2C6\x2BD\x3\x2"+
		"\x2\x2\x2C6\x2BE\x3\x2\x2\x2\x2C7\x81\x3\x2\x2\x2\x2C8\x2C9\a\r\x2\x2"+
		"\x2C9\x2CD\a\x64\x2\x2\x2CA\x2CE\a-\x2\x2\x2CB\x2CC\a\x36\x2\x2\x2CC\x2CE"+
		"\a\x37\x2\x2\x2CD\x2CA\x3\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CE\x83\x3\x2"+
		"\x2\x2\x2CF\x2D0\a\r\x2\x2\x2D0\x2D4\a\x65\x2\x2\x2D1\x2D5\a-\x2\x2\x2D2"+
		"\x2D3\a\x36\x2\x2\x2D3\x2D5\a\x37\x2\x2\x2D4\x2D1\x3\x2\x2\x2\x2D4\x2D2"+
		"\x3\x2\x2\x2\x2D5\x85\x3\x2\x2\x2\x2D6\x2DA\x5\x88\x45\x2\x2D7\x2DA\x5"+
		"\x8A\x46\x2\x2D8\x2DA\x5\x8CG\x2\x2D9\x2D6\x3\x2\x2\x2\x2D9\x2D7\x3\x2"+
		"\x2\x2\x2D9\x2D8\x3\x2\x2\x2\x2DA\x87\x3\x2\x2\x2\x2DB\x2DC\a\\\x2\x2"+
		"\x2DC\x2DD\a\x31\x2\x2\x2DD\x2DE\x5\xBC_\x2\x2DE\x2DF\a-\x2\x2\x2DF\x89"+
		"\x3\x2\x2\x2\x2E0\x2E1\a^\x2\x2\x2E1\x2E2\a\x31\x2\x2\x2E2\x2E3\x5\xC2"+
		"\x62\x2\x2E3\x2E4\a-\x2\x2\x2E4\x8B\x3\x2\x2\x2\x2E5\x2E6\a]\x2\x2\x2E6"+
		"\x2E7\a\x31\x2\x2\x2E7\x2E8\x5\xBC_\x2\x2E8\x2E9\a-\x2\x2\x2E9\x8D\x3"+
		"\x2\x2\x2\x2EA\x2EB\a\xE\x2\x2\x2EB\x2EC\x5\x90I\x2\x2EC\x2ED\a-\x2\x2"+
		"\x2ED\x8F\x3\x2\x2\x2\x2EE\x2EF\x5\xBC_\x2\x2EF\x91\x3\x2\x2\x2\x2F0\x2F1"+
		"\a\xF\x2\x2\x2F1\x2F2\x5\xBC_\x2\x2F2\x2F3\a.\x2\x2\x2F3\x2F4\x5\x4\x3"+
		"\x2\x2F4\x2F6\a\x36\x2\x2\x2F5\x2F7\x5\x94K\x2\x2F6\x2F5\x3\x2\x2\x2\x2F6"+
		"\x2F7\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2F9\a\x37\x2\x2\x2F9\x93"+
		"\x3\x2\x2\x2\x2FA\x2FC\x5\x96L\x2\x2FB\x2FA\x3\x2\x2\x2\x2FC\x2FD\x3\x2"+
		"\x2\x2\x2FD\x2FB\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x95\x3\x2\x2\x2"+
		"\x2FF\x302\x5\x98M\x2\x300\x302\x5\x9AN\x2\x301\x2FF\x3\x2\x2\x2\x301"+
		"\x300\x3\x2\x2\x2\x302\x97\x3\x2\x2\x2\x303\x304\a\v\x2\x2\x304\x305\x5"+
		"\x4\x3\x2\x305\x306\a-\x2\x2\x306\x99\x3\x2\x2\x2\x307\x308\a\x10\x2\x2"+
		"\x308\x309\x5\xCA\x66\x2\x309\x30A\a-\x2\x2\x30A\x9B\x3\x2\x2\x2\x30B"+
		"\x310\x5\xB4[\x2\x30C\x310\x5\xA0Q\x2\x30D\x310\x5\xB2Z\x2\x30E\x310\x5"+
		"\xAAV\x2\x30F\x30B\x3\x2\x2\x2\x30F\x30C\x3\x2\x2\x2\x30F\x30D\x3\x2\x2"+
		"\x2\x30F\x30E\x3\x2\x2\x2\x310\x9D\x3\x2\x2\x2\x311\x316\x5\xB2Z\x2\x312"+
		"\x316\x5\xB4[\x2\x313\x316\x5\xA0Q\x2\x314\x316\x5\xA2R\x2\x315\x311\x3"+
		"\x2\x2\x2\x315\x312\x3\x2\x2\x2\x315\x313\x3\x2\x2\x2\x315\x314\x3\x2"+
		"\x2\x2\x316\x9F\x3\x2\x2\x2\x317\x31B\x5\xA8U\x2\x318\x31B\x5\xA6T\x2"+
		"\x319\x31B\x5\x4\x3\x2\x31A\x317\x3\x2\x2\x2\x31A\x318\x3\x2\x2\x2\x31A"+
		"\x319\x3\x2\x2\x2\x31B\xA1\x3\x2\x2\x2\x31C\x31F\x5\xAEX\x2\x31D\x31F"+
		"\x5\xB0Y\x2\x31E\x31C\x3\x2\x2\x2\x31E\x31D\x3\x2\x2\x2\x31F\xA3\x3\x2"+
		"\x2\x2\x320\x323\x5\xA6T\x2\x321\x323\x5\x4\x3\x2\x322\x320\x3\x2\x2\x2"+
		"\x322\x321\x3\x2\x2\x2\x323\xA5\x3\x2\x2\x2\x324\x325\t\x3\x2\x2\x325"+
		"\xA7\x3\x2\x2\x2\x326\x327\t\x4\x2\x2\x327\xA9\x3\x2\x2\x2\x328\x329\a"+
		",\x2\x2\x329\xAB\x3\x2\x2\x2\x32A\x32B\a\t\x2\x2\x32B\xAD\x3\x2\x2\x2"+
		"\x32C\x32D\x5\xA8U\x2\x32D\x32E\a:\x2\x2\x32E\xAF\x3\x2\x2\x2\x32F\x330"+
		"\x5\xA4S\x2\x330\x331\a\x46\x2\x2\x331\xB1\x3\x2\x2\x2\x332\x333\x5\xB4"+
		"[\x2\x333\x334\a\x46\x2\x2\x334\xB3\x3\x2\x2\x2\x335\x338\x5\xB6\\\x2"+
		"\x336\x338\x5\xB8]\x2\x337\x335\x3\x2\x2\x2\x337\x336\x3\x2\x2\x2\x338"+
		"\xB5\x3\x2\x2\x2\x339\x33A\x5\xA0Q\x2\x33A\x33B\a\x34\x2\x2\x33B\x33C"+
		"\a\x35\x2\x2\x33C\xB7\x3\x2\x2\x2\x33D\x33E\x5\xA2R\x2\x33E\x33F\a\x34"+
		"\x2\x2\x33F\x340\a\x35\x2\x2\x340\xB9\x3\x2\x2\x2\x341\x344\x5\xBE`\x2"+
		"\x342\x344\x5\xBC_\x2\x343\x341\x3\x2\x2\x2\x343\x342\x3\x2\x2\x2\x344"+
		"\xBB\x3\x2\x2\x2\x345\x349\ag\x2\x2\x346\x349\ah\x2\x2\x347\x349\x5\xCC"+
		"g\x2\x348\x345\x3\x2\x2\x2\x348\x346\x3\x2\x2\x2\x348\x347\x3\x2\x2\x2"+
		"\x349\xBD\x3\x2\x2\x2\x34A\x351\x5\xC0\x61\x2\x34B\x351\x5\xC2\x62\x2"+
		"\x34C\x351\x5\xC4\x63\x2\x34D\x351\x5\xC6\x64\x2\x34E\x351\x5\xC8\x65"+
		"\x2\x34F\x351\x5\xCA\x66\x2\x350\x34A\x3\x2\x2\x2\x350\x34B\x3\x2\x2\x2"+
		"\x350\x34C\x3\x2\x2\x2\x350\x34D\x3\x2\x2\x2\x350\x34E\x3\x2\x2\x2\x350"+
		"\x34F\x3\x2\x2\x2\x351\xBF\x3\x2\x2\x2\x352\x353\a \x2\x2\x353\xC1\x3"+
		"\x2\x2\x2\x354\x355\t\x5\x2\x2\x355\xC3\x3\x2\x2\x2\x356\x357\ai\x2\x2"+
		"\x357\xC5\x3\x2\x2\x2\x358\x359\aj\x2\x2\x359\xC7\x3\x2\x2\x2\x35A\x35B"+
		"\ak\x2\x2\x35B\xC9\x3\x2\x2\x2\x35C\x35D\t\x6\x2\x2\x35D\xCB\x3\x2\x2"+
		"\x2\x35E\x35F\t\a\x2\x2\x35F\xCD\x3\x2\x2\x2W\xD1\xD9\xE1\xE9\xEF\xF4"+
		"\xF8\x106\x10A\x113\x11B\x123\x12A\x13A\x13D\x143\x14C\x150\x153\x158"+
		"\x15E\x164\x16A\x170\x176\x17C\x182\x188\x18E\x195\x19D\x1A3\x1AD\x1B5"+
		"\x1BB\x1BF\x1C4\x1C9\x1D2\x1D6\x1DC\x1E2\x1E6\x1ED\x1F4\x1F9\x200\x209"+
		"\x20D\x223\x227\x22E\x237\x24B\x252\x256\x25F\x26A\x278\x280\x285\x28B"+
		"\x294\x298\x29F\x2A6\x2AA\x2B9\x2C2\x2C6\x2CD\x2D4\x2D9\x2F6\x2FD\x301"+
		"\x30F\x315\x31A\x31E\x322\x337\x343\x348\x350";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Soal
