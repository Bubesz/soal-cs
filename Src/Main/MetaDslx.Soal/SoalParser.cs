//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\o2yznt3k.5v4\SoalParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Soal {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SoalParser : Parser {
	public const int
		KNamespace=1, KEnum=2, KException=3, KStruct=4, KInterface=5, KThrows=6, 
		KOneway=7, KBinding=8, KTransport=9, KEncoding=10, KProtocol=11, KEndpoint=12, 
		KAddress=13, KDatabase=14, KEntity=15, KAbstract=16, KComponent=17, KComposite=18, 
		KReference=19, KService=20, KWire=21, KTo=22, KImplementation=23, KLanguage=24, 
		KAssembly=25, KDeployment=26, KEnvironment=27, KRuntime=28, KNull=29, 
		KTrue=30, KFalse=31, KObject=32, KString=33, KInt=34, KLong=35, KFloat=36, 
		KDouble=37, KByte=38, KBool=39, KAny=40, KVoid=41, TSemicolon=42, TColon=43, 
		TDot=44, TComma=45, TAssign=46, TOpenParen=47, TCloseParen=48, TOpenBracket=49, 
		TCloseBracket=50, TOpenBrace=51, TCloseBrace=52, TLessThan=53, TGreaterThan=54, 
		TQuestion=55, TQuestionQuestion=56, TAmpersand=57, THat=58, TBar=59, TAndAlso=60, 
		TOrElse=61, TPlusPlus=62, TMinusMinus=63, TPlus=64, TMinus=65, TTilde=66, 
		TExclamation=67, TSlash=68, TAsterisk=69, TPercent=70, TLessThanOrEqual=71, 
		TGreaterThanOrEqual=72, TEqual=73, TNotEqual=74, TAsteriskAssign=75, TSlashAssign=76, 
		TPercentAssign=77, TPlusAssign=78, TMinusAssign=79, TLeftShiftAssign=80, 
		TRightShiftAssign=81, TAmpersandAssign=82, THatAssign=83, TBarAssign=84, 
		IDate=85, ITime=86, IDateTime=87, ITimeSpan=88, IVersion=89, IStyle=90, 
		IMTOM=91, ISSL=92, IHTTP=93, IREST=94, IWebSocket=95, ISOAP=96, IXML=97, 
		IJSON=98, IClientAuthentication=99, IdentifierNormal=100, IdentifierVerbatim=101, 
		IntegerLiteral=102, DecimalLiteral=103, ScientificLiteral=104, DateTimeOffsetLiteral=105, 
		DateTimeLiteral=106, DateLiteral=107, TimeLiteral=108, RegularStringLiteral=109, 
		GuidLiteral=110, UTF8BOM=111, WHITESPACE=112, CRLF=113, LINEBREAK=114, 
		LINE_COMMENT=115, COMMENT=116, DoubleQuoteVerbatimStringLiteral=117, SingleQuoteVerbatimStringLiteral=118, 
		DoubleQuoteVerbatimStringLiteralStart=119;
	public const int
		RULE_main = 0, RULE_qualifiedName = 1, RULE_identifierList = 2, RULE_qualifiedNameList = 3, 
		RULE_namespaceDeclaration = 4, RULE_declaration = 5, RULE_enumDeclaration = 6, 
		RULE_enumLiterals = 7, RULE_enumLiteral = 8, RULE_structDeclaration = 9, 
		RULE_exceptionDeclaration = 10, RULE_entityDeclaration = 11, RULE_propertyDeclaration = 12, 
		RULE_databaseDeclaration = 13, RULE_entityReference = 14, RULE_interfaceDeclaration = 15, 
		RULE_operationDeclaration = 16, RULE_parameterList = 17, RULE_parameter = 18, 
		RULE_componentDeclaration = 19, RULE_componentElements = 20, RULE_componentElement = 21, 
		RULE_componentService = 22, RULE_componentReference = 23, RULE_componentServiceOrReferenceBody = 24, 
		RULE_componentServiceOrReferenceElement = 25, RULE_componentProperty = 26, 
		RULE_componentImplementation = 27, RULE_componentLanguage = 28, RULE_compositeDeclaration = 29, 
		RULE_compositeElements = 30, RULE_compositeElement = 31, RULE_compositeComponent = 32, 
		RULE_compositeWire = 33, RULE_wireSource = 34, RULE_wireTarget = 35, RULE_deploymentDeclaration = 36, 
		RULE_deploymentElements = 37, RULE_deploymentElement = 38, RULE_environmentDeclaration = 39, 
		RULE_runtimeDeclaration = 40, RULE_runtimeReference = 41, RULE_assemblyReference = 42, 
		RULE_databaseReference = 43, RULE_bindingDeclaration = 44, RULE_bindingLayers = 45, 
		RULE_transportLayer = 46, RULE_httpTransportLayer = 47, RULE_restTransportLayer = 48, 
		RULE_webSocketTransportLayer = 49, RULE_httpTransportLayerProperties = 50, 
		RULE_httpSslProperty = 51, RULE_httpClientAuthenticationProperty = 52, 
		RULE_encodingLayer = 53, RULE_soapEncodingLayer = 54, RULE_xmlEncodingLayer = 55, 
		RULE_jsonEncodingLayer = 56, RULE_soapEncodingProperties = 57, RULE_soapVersionProperty = 58, 
		RULE_soapMtomProperty = 59, RULE_soapStyleProperty = 60, RULE_protocolLayer = 61, 
		RULE_protocolLayerKind = 62, RULE_endpointDeclaration = 63, RULE_endpointProperties = 64, 
		RULE_endpointProperty = 65, RULE_endpointBindingProperty = 66, RULE_endpointAddressProperty = 67, 
		RULE_returnType = 68, RULE_typeReference = 69, RULE_simpleType = 70, RULE_referenceType = 71, 
		RULE_objectType = 72, RULE_primitiveType = 73, RULE_voidType = 74, RULE_onewayType = 75, 
		RULE_nullableType = 76, RULE_nonNullableType = 77, RULE_nonNullableArrayType = 78, 
		RULE_arrayType = 79, RULE_identifier = 80, RULE_literal = 81, RULE_nullLiteral = 82, 
		RULE_booleanLiteral = 83, RULE_integerLiteral = 84, RULE_decimalLiteral = 85, 
		RULE_scientificLiteral = 86, RULE_stringLiteral = 87, RULE_contextualKeywords = 88;
	public static readonly string[] ruleNames = {
		"main", "qualifiedName", "identifierList", "qualifiedNameList", "namespaceDeclaration", 
		"declaration", "enumDeclaration", "enumLiterals", "enumLiteral", "structDeclaration", 
		"exceptionDeclaration", "entityDeclaration", "propertyDeclaration", "databaseDeclaration", 
		"entityReference", "interfaceDeclaration", "operationDeclaration", "parameterList", 
		"parameter", "componentDeclaration", "componentElements", "componentElement", 
		"componentService", "componentReference", "componentServiceOrReferenceBody", 
		"componentServiceOrReferenceElement", "componentProperty", "componentImplementation", 
		"componentLanguage", "compositeDeclaration", "compositeElements", "compositeElement", 
		"compositeComponent", "compositeWire", "wireSource", "wireTarget", "deploymentDeclaration", 
		"deploymentElements", "deploymentElement", "environmentDeclaration", "runtimeDeclaration", 
		"runtimeReference", "assemblyReference", "databaseReference", "bindingDeclaration", 
		"bindingLayers", "transportLayer", "httpTransportLayer", "restTransportLayer", 
		"webSocketTransportLayer", "httpTransportLayerProperties", "httpSslProperty", 
		"httpClientAuthenticationProperty", "encodingLayer", "soapEncodingLayer", 
		"xmlEncodingLayer", "jsonEncodingLayer", "soapEncodingProperties", "soapVersionProperty", 
		"soapMtomProperty", "soapStyleProperty", "protocolLayer", "protocolLayerKind", 
		"endpointDeclaration", "endpointProperties", "endpointProperty", "endpointBindingProperty", 
		"endpointAddressProperty", "returnType", "typeReference", "simpleType", 
		"referenceType", "objectType", "primitiveType", "voidType", "onewayType", 
		"nullableType", "nonNullableType", "nonNullableArrayType", "arrayType", 
		"identifier", "literal", "nullLiteral", "booleanLiteral", "integerLiteral", 
		"decimalLiteral", "scientificLiteral", "stringLiteral", "contextualKeywords"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'enum'", "'exception'", "'struct'", "'interface'", 
		"'throws'", "'oneway'", "'binding'", "'transport'", "'encoding'", "'protocol'", 
		"'endpoint'", "'address'", "'database'", "'entity'", "'abstract'", "'component'", 
		"'composite'", "'reference'", "'service'", "'wire'", "'to'", "'implementation'", 
		"'language'", "'assembly'", "'deployment'", "'environment'", "'runtime'", 
		"'null'", "'true'", "'false'", "'object'", "'string'", "'int'", "'long'", 
		"'float'", "'double'", "'byte'", "'bool'", "'any'", "'void'", "';'", "':'", 
		"'.'", "','", "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", 
		"'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", "'||'", "'++'", "'--'", 
		"'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", "'<='", "'>='", "'=='", 
		"'!='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
		"'^='", "'|='", "'Date'", "'Time'", "'DateTime'", "'TimeSpan'", "'Version'", 
		"'Style'", "'MTOM'", "'SSL'", "'HTTP'", "'REST'", "'WebSocket'", "'SOAP'", 
		"'XML'", "'JSON'", "'ClientAuthentication'", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KEnum", "KException", "KStruct", "KInterface", "KThrows", 
		"KOneway", "KBinding", "KTransport", "KEncoding", "KProtocol", "KEndpoint", 
		"KAddress", "KDatabase", "KEntity", "KAbstract", "KComponent", "KComposite", 
		"KReference", "KService", "KWire", "KTo", "KImplementation", "KLanguage", 
		"KAssembly", "KDeployment", "KEnvironment", "KRuntime", "KNull", "KTrue", 
		"KFalse", "KObject", "KString", "KInt", "KLong", "KFloat", "KDouble", 
		"KByte", "KBool", "KAny", "KVoid", "TSemicolon", "TColon", "TDot", "TComma", 
		"TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", "TQuestion", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IDate", "ITime", "IDateTime", 
		"ITimeSpan", "IVersion", "IStyle", "IMTOM", "ISSL", "IHTTP", "IREST", 
		"IWebSocket", "ISOAP", "IXML", "IJSON", "IClientAuthentication", "IdentifierNormal", 
		"IdentifierVerbatim", "IntegerLiteral", "DecimalLiteral", "ScientificLiteral", 
		"DateTimeOffsetLiteral", "DateTimeLiteral", "DateLiteral", "TimeLiteral", 
		"RegularStringLiteral", "GuidLiteral", "UTF8BOM", "WHITESPACE", "CRLF", 
		"LINEBREAK", "LINE_COMMENT", "COMMENT", "DoubleQuoteVerbatimStringLiteral", 
		"SingleQuoteVerbatimStringLiteral", "DoubleQuoteVerbatimStringLiteralStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SoalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SoalParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KNamespace) {
				{
				{
				State = 178; namespaceDeclaration();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(SoalParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(SoalParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; identifier();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TDot) {
				{
				{
				State = 185; Match(TDot);
				State = 186; identifier();
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; identifier();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 193; Match(TComma);
				State = 194; identifier();
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; qualifiedName();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 201; Match(TComma);
				State = 202; qualifiedName();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(SoalParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(KNamespace);
			State = 209; qualifiedName();
			State = 210; Match(TAssign);
			{
			State = 211; identifier();
			State = 212; Match(TColon);
			}
			State = 214; stringLiteral();
			State = 215; Match(TOpenBrace);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEnum) | (1L << KException) | (1L << KStruct) | (1L << KInterface) | (1L << KBinding) | (1L << KEndpoint) | (1L << KDatabase) | (1L << KEntity) | (1L << KAbstract) | (1L << KComponent) | (1L << KComposite) | (1L << KAssembly) | (1L << KDeployment))) != 0)) {
				{
				{
				State = 216; declaration();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 222; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public ExceptionDeclarationContext exceptionDeclaration() {
			return GetRuleContext<ExceptionDeclarationContext>(0);
		}
		public EntityDeclarationContext entityDeclaration() {
			return GetRuleContext<EntityDeclarationContext>(0);
		}
		public DatabaseDeclarationContext databaseDeclaration() {
			return GetRuleContext<DatabaseDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ComponentDeclarationContext componentDeclaration() {
			return GetRuleContext<ComponentDeclarationContext>(0);
		}
		public CompositeDeclarationContext compositeDeclaration() {
			return GetRuleContext<CompositeDeclarationContext>(0);
		}
		public BindingDeclarationContext bindingDeclaration() {
			return GetRuleContext<BindingDeclarationContext>(0);
		}
		public EndpointDeclarationContext endpointDeclaration() {
			return GetRuleContext<EndpointDeclarationContext>(0);
		}
		public DeploymentDeclarationContext deploymentDeclaration() {
			return GetRuleContext<DeploymentDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 235;
			switch (TokenStream.La(1)) {
			case KEnum:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; enumDeclaration();
				}
				break;
			case KStruct:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; structDeclaration();
				}
				break;
			case KException:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226; exceptionDeclaration();
				}
				break;
			case KEntity:
				EnterOuterAlt(_localctx, 4);
				{
				State = 227; entityDeclaration();
				}
				break;
			case KDatabase:
				EnterOuterAlt(_localctx, 5);
				{
				State = 228; databaseDeclaration();
				}
				break;
			case KInterface:
				EnterOuterAlt(_localctx, 6);
				{
				State = 229; interfaceDeclaration();
				}
				break;
			case KAbstract:
			case KComponent:
				EnterOuterAlt(_localctx, 7);
				{
				State = 230; componentDeclaration();
				}
				break;
			case KComposite:
			case KAssembly:
				EnterOuterAlt(_localctx, 8);
				{
				State = 231; compositeDeclaration();
				}
				break;
			case KBinding:
				EnterOuterAlt(_localctx, 9);
				{
				State = 232; bindingDeclaration();
				}
				break;
			case KEndpoint:
				EnterOuterAlt(_localctx, 10);
				{
				State = 233; endpointDeclaration();
				}
				break;
			case KDeployment:
				EnterOuterAlt(_localctx, 11);
				{
				State = 234; deploymentDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(SoalParser.KEnum, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EnumLiteralsContext enumLiterals() {
			return GetRuleContext<EnumLiteralsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(KEnum);
			State = 238; identifier();
			State = 239; Match(TOpenBrace);
			State = 241;
			_la = TokenStream.La(1);
			if (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				State = 240; enumLiterals();
				}
			}

			State = 243; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralsContext : ParserRuleContext {
		public EnumLiteralContext[] enumLiteral() {
			return GetRuleContexts<EnumLiteralContext>();
		}
		public EnumLiteralContext enumLiteral(int i) {
			return GetRuleContext<EnumLiteralContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public EnumLiteralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiterals; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumLiterals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumLiterals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiterals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralsContext enumLiterals() {
		EnumLiteralsContext _localctx = new EnumLiteralsContext(Context, State);
		EnterRule(_localctx, 14, RULE_enumLiterals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; enumLiteral();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 246; Match(TComma);
				State = 247; enumLiteral();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralContext enumLiteral() {
		EnumLiteralContext _localctx = new EnumLiteralContext(Context, State);
		EnterRule(_localctx, 16, RULE_enumLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode KStruct() { return GetToken(SoalParser.KStruct, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(KStruct);
			State = 256; identifier();
			State = 259;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 257; Match(TColon);
				State = 258; qualifiedName();
				}
			}

			State = 261; Match(TOpenBrace);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				{
				State = 262; propertyDeclaration();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 268; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionDeclarationContext : ParserRuleContext {
		public ITerminalNode KException() { return GetToken(SoalParser.KException, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public ExceptionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterExceptionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitExceptionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionDeclarationContext exceptionDeclaration() {
		ExceptionDeclarationContext _localctx = new ExceptionDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_exceptionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(KException);
			State = 271; identifier();
			State = 274;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 272; Match(TColon);
				State = 273; qualifiedName();
				}
			}

			State = 276; Match(TOpenBrace);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				{
				State = 277; propertyDeclaration();
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 283; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclarationContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public EntityDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclarationContext entityDeclaration() {
		EntityDeclarationContext _localctx = new EntityDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_entityDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(KEntity);
			State = 286; identifier();
			State = 289;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 287; Match(TColon);
				State = 288; qualifiedName();
				}
			}

			State = 291; Match(TOpenBrace);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				{
				State = 292; propertyDeclaration();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 298; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_propertyDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; typeReference();
			State = 301; identifier();
			State = 302; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseDeclarationContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EntityReferenceContext[] entityReference() {
			return GetRuleContexts<EntityReferenceContext>();
		}
		public EntityReferenceContext entityReference(int i) {
			return GetRuleContext<EntityReferenceContext>(i);
		}
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public DatabaseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseDeclarationContext databaseDeclaration() {
		DatabaseDeclarationContext _localctx = new DatabaseDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_databaseDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(KDatabase);
			State = 305; identifier();
			State = 306; Match(TOpenBrace);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KEntity) {
				{
				{
				State = 307; entityReference();
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				{
				State = 313; operationDeclaration();
				}
				}
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 319; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityReferenceContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EntityReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityReferenceContext entityReference() {
		EntityReferenceContext _localctx = new EntityReferenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_entityReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(KEntity);
			State = 322; qualifiedName();
			State = 323; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KInterface() { return GetToken(SoalParser.KInterface, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(KInterface);
			State = 326; identifier();
			State = 327; Match(TOpenBrace);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				{
				State = 328; operationDeclaration();
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 334; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OnewayTypeContext onewayType() {
			return GetRuleContext<OnewayTypeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode KThrows() { return GetToken(SoalParser.KThrows, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KVoid:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				{
				State = 336; returnType();
				}
				break;
			case KOneway:
				{
				State = 337; onewayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 340; identifier();
			State = 341; Match(TOpenParen);
			State = 343;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				State = 342; parameterList();
				}
			}

			State = 345; Match(TCloseParen);
			State = 348;
			_la = TokenStream.La(1);
			if (_la==KThrows) {
				{
				State = 346; Match(KThrows);
				State = 347; qualifiedNameList();
				}
			}

			State = 350; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; parameter();
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 353; Match(TComma);
				State = 354; parameter();
				}
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; typeReference();
			State = 361; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentDeclarationContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode KAbstract() { return GetToken(SoalParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentElementsContext componentElements() {
			return GetRuleContext<ComponentElementsContext>(0);
		}
		public ComponentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDeclarationContext componentDeclaration() {
		ComponentDeclarationContext _localctx = new ComponentDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_componentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_la = TokenStream.La(1);
			if (_la==KAbstract) {
				{
				State = 363; Match(KAbstract);
				}
			}

			State = 366; Match(KComponent);
			State = 367; identifier();
			State = 370;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 368; Match(TColon);
				State = 369; qualifiedName();
				}
			}

			State = 372; Match(TOpenBrace);
			State = 374;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				State = 373; componentElements();
				}
			}

			State = 376; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementsContext : ParserRuleContext {
		public ComponentElementContext[] componentElement() {
			return GetRuleContexts<ComponentElementContext>();
		}
		public ComponentElementContext componentElement(int i) {
			return GetRuleContext<ComponentElementContext>(i);
		}
		public ComponentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementsContext componentElements() {
		ComponentElementsContext _localctx = new ComponentElementsContext(Context, State);
		EnterRule(_localctx, 40, RULE_componentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 378; componentElement();
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public ComponentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementContext componentElement() {
		ComponentElementContext _localctx = new ComponentElementContext(Context, State);
		EnterRule(_localctx, 42, RULE_componentElement);
		try {
			State = 388;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 385; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 386; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 387; componentLanguage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceContext : ParserRuleContext {
		public ITerminalNode KService() { return GetToken(SoalParser.KService, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentService; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentService(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentService(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentService(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceContext componentService() {
		ComponentServiceContext _localctx = new ComponentServiceContext(Context, State);
		EnterRule(_localctx, 44, RULE_componentService);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(KService);
			State = 391; qualifiedName();
			State = 393;
			_la = TokenStream.La(1);
			if (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				State = 392; identifier();
				}
			}

			State = 395; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentReferenceContext : ParserRuleContext {
		public ITerminalNode KReference() { return GetToken(SoalParser.KReference, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentReferenceContext componentReference() {
		ComponentReferenceContext _localctx = new ComponentReferenceContext(Context, State);
		EnterRule(_localctx, 46, RULE_componentReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(KReference);
			State = 398; qualifiedName();
			State = 400;
			_la = TokenStream.La(1);
			if (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				State = 399; identifier();
				}
			}

			State = 402; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceBodyContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ComponentServiceOrReferenceElementContext[] componentServiceOrReferenceElement() {
			return GetRuleContexts<ComponentServiceOrReferenceElementContext>();
		}
		public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement(int i) {
			return GetRuleContext<ComponentServiceOrReferenceElementContext>(i);
		}
		public ComponentServiceOrReferenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
		ComponentServiceOrReferenceBodyContext _localctx = new ComponentServiceOrReferenceBodyContext(Context, State);
		EnterRule(_localctx, 48, RULE_componentServiceOrReferenceBody);
		int _la;
		try {
			State = 413;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405; Match(TOpenBrace);
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==KBinding) {
					{
					{
					State = 406; componentServiceOrReferenceElement();
					}
					}
					State = 411;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 412; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceElementContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentServiceOrReferenceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement() {
		ComponentServiceOrReferenceElementContext _localctx = new ComponentServiceOrReferenceElementContext(Context, State);
		EnterRule(_localctx, 50, RULE_componentServiceOrReferenceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; Match(KBinding);
			State = 416; qualifiedName();
			State = 417; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentPropertyContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentPropertyContext componentProperty() {
		ComponentPropertyContext _localctx = new ComponentPropertyContext(Context, State);
		EnterRule(_localctx, 52, RULE_componentProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; typeReference();
			State = 420; identifier();
			State = 421; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentImplementationContext : ParserRuleContext {
		public ITerminalNode KImplementation() { return GetToken(SoalParser.KImplementation, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentImplementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentImplementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentImplementation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentImplementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentImplementationContext componentImplementation() {
		ComponentImplementationContext _localctx = new ComponentImplementationContext(Context, State);
		EnterRule(_localctx, 54, RULE_componentImplementation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(KImplementation);
			State = 424; identifier();
			State = 425; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentLanguageContext : ParserRuleContext {
		public ITerminalNode KLanguage() { return GetToken(SoalParser.KLanguage, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentLanguageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentLanguage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentLanguage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentLanguage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentLanguageContext componentLanguage() {
		ComponentLanguageContext _localctx = new ComponentLanguageContext(Context, State);
		EnterRule(_localctx, 56, RULE_componentLanguage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(KLanguage);
			State = 428; identifier();
			State = 429; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public ITerminalNode KComposite() { return GetToken(SoalParser.KComposite, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public CompositeElementsContext compositeElements() {
			return GetRuleContext<CompositeElementsContext>(0);
		}
		public CompositeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeDeclarationContext compositeDeclaration() {
		CompositeDeclarationContext _localctx = new CompositeDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_compositeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_la = TokenStream.La(1);
			if ( !(_la==KComposite || _la==KAssembly) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 432; identifier();
			State = 435;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 433; Match(TColon);
				State = 434; qualifiedName();
				}
			}

			State = 437; Match(TOpenBrace);
			State = 439;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0)) {
				{
				State = 438; compositeElements();
				}
			}

			State = 441; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementsContext : ParserRuleContext {
		public CompositeElementContext[] compositeElement() {
			return GetRuleContexts<CompositeElementContext>();
		}
		public CompositeElementContext compositeElement(int i) {
			return GetRuleContext<CompositeElementContext>(i);
		}
		public CompositeElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementsContext compositeElements() {
		CompositeElementsContext _localctx = new CompositeElementsContext(Context, State);
		EnterRule(_localctx, 60, RULE_compositeElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 443; compositeElement();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)) | (1L << (IdentifierNormal - 85)) | (1L << (IdentifierVerbatim - 85)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public CompositeComponentContext compositeComponent() {
			return GetRuleContext<CompositeComponentContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public CompositeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementContext compositeElement() {
		CompositeElementContext _localctx = new CompositeElementContext(Context, State);
		EnterRule(_localctx, 62, RULE_compositeElement);
		try {
			State = 455;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 448; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 450; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 451; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 452; componentLanguage();
				}
				break;
			case KComponent:
				EnterOuterAlt(_localctx, 6);
				{
				State = 453; compositeComponent();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 7);
				{
				State = 454; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeComponentContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeComponentContext compositeComponent() {
		CompositeComponentContext _localctx = new CompositeComponentContext(Context, State);
		EnterRule(_localctx, 64, RULE_compositeComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(KComponent);
			State = 458; qualifiedName();
			State = 459; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeWireContext : ParserRuleContext {
		public ITerminalNode KWire() { return GetToken(SoalParser.KWire, 0); }
		public WireSourceContext wireSource() {
			return GetRuleContext<WireSourceContext>(0);
		}
		public ITerminalNode KTo() { return GetToken(SoalParser.KTo, 0); }
		public WireTargetContext wireTarget() {
			return GetRuleContext<WireTargetContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeWireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeWire; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeWire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeWire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeWire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeWireContext compositeWire() {
		CompositeWireContext _localctx = new CompositeWireContext(Context, State);
		EnterRule(_localctx, 66, RULE_compositeWire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; Match(KWire);
			State = 462; wireSource();
			State = 463; Match(KTo);
			State = 464; wireTarget();
			State = 465; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireSourceContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireSourceContext wireSource() {
		WireSourceContext _localctx = new WireSourceContext(Context, State);
		EnterRule(_localctx, 68, RULE_wireSource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireTargetContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireTargetContext wireTarget() {
		WireTargetContext _localctx = new WireTargetContext(Context, State);
		EnterRule(_localctx, 70, RULE_wireTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentDeclarationContext : ParserRuleContext {
		public ITerminalNode KDeployment() { return GetToken(SoalParser.KDeployment, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public DeploymentElementsContext deploymentElements() {
			return GetRuleContext<DeploymentElementsContext>(0);
		}
		public DeploymentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentDeclarationContext deploymentDeclaration() {
		DeploymentDeclarationContext _localctx = new DeploymentDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_deploymentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(KDeployment);
			State = 472; identifier();
			State = 473; Match(TOpenBrace);
			State = 475;
			_la = TokenStream.La(1);
			if (_la==KWire || _la==KEnvironment) {
				{
				State = 474; deploymentElements();
				}
			}

			State = 477; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementsContext : ParserRuleContext {
		public DeploymentElementContext[] deploymentElement() {
			return GetRuleContexts<DeploymentElementContext>();
		}
		public DeploymentElementContext deploymentElement(int i) {
			return GetRuleContext<DeploymentElementContext>(i);
		}
		public DeploymentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementsContext deploymentElements() {
		DeploymentElementsContext _localctx = new DeploymentElementsContext(Context, State);
		EnterRule(_localctx, 74, RULE_deploymentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 479; deploymentElement();
				}
				}
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KWire || _la==KEnvironment );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementContext : ParserRuleContext {
		public EnvironmentDeclarationContext environmentDeclaration() {
			return GetRuleContext<EnvironmentDeclarationContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public DeploymentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementContext deploymentElement() {
		DeploymentElementContext _localctx = new DeploymentElementContext(Context, State);
		EnterRule(_localctx, 76, RULE_deploymentElement);
		try {
			State = 486;
			switch (TokenStream.La(1)) {
			case KEnvironment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 484; environmentDeclaration();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvironmentDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnvironment() { return GetToken(SoalParser.KEnvironment, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public RuntimeDeclarationContext runtimeDeclaration() {
			return GetRuleContext<RuntimeDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public RuntimeReferenceContext[] runtimeReference() {
			return GetRuleContexts<RuntimeReferenceContext>();
		}
		public RuntimeReferenceContext runtimeReference(int i) {
			return GetRuleContext<RuntimeReferenceContext>(i);
		}
		public EnvironmentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_environmentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnvironmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnvironmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvironmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvironmentDeclarationContext environmentDeclaration() {
		EnvironmentDeclarationContext _localctx = new EnvironmentDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_environmentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488; Match(KEnvironment);
			State = 489; identifier();
			State = 490; Match(TOpenBrace);
			State = 491; runtimeDeclaration();
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KDatabase || _la==KAssembly) {
				{
				{
				State = 492; runtimeReference();
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 498; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeDeclarationContext : ParserRuleContext {
		public ITerminalNode KRuntime() { return GetToken(SoalParser.KRuntime, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public RuntimeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeDeclarationContext runtimeDeclaration() {
		RuntimeDeclarationContext _localctx = new RuntimeDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_runtimeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(KRuntime);
			State = 501; identifier();
			State = 502; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeReferenceContext : ParserRuleContext {
		public AssemblyReferenceContext assemblyReference() {
			return GetRuleContext<AssemblyReferenceContext>(0);
		}
		public DatabaseReferenceContext databaseReference() {
			return GetRuleContext<DatabaseReferenceContext>(0);
		}
		public RuntimeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeReferenceContext runtimeReference() {
		RuntimeReferenceContext _localctx = new RuntimeReferenceContext(Context, State);
		EnterRule(_localctx, 82, RULE_runtimeReference);
		try {
			State = 506;
			switch (TokenStream.La(1)) {
			case KAssembly:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504; assemblyReference();
				}
				break;
			case KDatabase:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505; databaseReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyReferenceContext : ParserRuleContext {
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public AssemblyReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAssemblyReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAssemblyReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyReferenceContext assemblyReference() {
		AssemblyReferenceContext _localctx = new AssemblyReferenceContext(Context, State);
		EnterRule(_localctx, 84, RULE_assemblyReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508; Match(KAssembly);
			State = 509; qualifiedName();
			State = 510; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseReferenceContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public DatabaseReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseReferenceContext databaseReference() {
		DatabaseReferenceContext _localctx = new DatabaseReferenceContext(Context, State);
		EnterRule(_localctx, 86, RULE_databaseReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512; Match(KDatabase);
			State = 513; qualifiedName();
			State = 514; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingDeclarationContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public BindingLayersContext bindingLayers() {
			return GetRuleContext<BindingLayersContext>(0);
		}
		public BindingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingDeclarationContext bindingDeclaration() {
		BindingDeclarationContext _localctx = new BindingDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_bindingDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(KBinding);
			State = 517; identifier();
			State = 518; Match(TOpenBrace);
			State = 520;
			_la = TokenStream.La(1);
			if (_la==KTransport) {
				{
				State = 519; bindingLayers();
				}
			}

			State = 522; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingLayersContext : ParserRuleContext {
		public TransportLayerContext transportLayer() {
			return GetRuleContext<TransportLayerContext>(0);
		}
		public EncodingLayerContext[] encodingLayer() {
			return GetRuleContexts<EncodingLayerContext>();
		}
		public EncodingLayerContext encodingLayer(int i) {
			return GetRuleContext<EncodingLayerContext>(i);
		}
		public ProtocolLayerContext[] protocolLayer() {
			return GetRuleContexts<ProtocolLayerContext>();
		}
		public ProtocolLayerContext protocolLayer(int i) {
			return GetRuleContext<ProtocolLayerContext>(i);
		}
		public BindingLayersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingLayers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingLayers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingLayers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingLayers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingLayersContext bindingLayers() {
		BindingLayersContext _localctx = new BindingLayersContext(Context, State);
		EnterRule(_localctx, 90, RULE_bindingLayers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524; transportLayer();
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 525; encodingLayer();
				}
				}
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KEncoding );
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KProtocol) {
				{
				{
				State = 530; protocolLayer();
				}
				}
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransportLayerContext : ParserRuleContext {
		public HttpTransportLayerContext httpTransportLayer() {
			return GetRuleContext<HttpTransportLayerContext>(0);
		}
		public RestTransportLayerContext restTransportLayer() {
			return GetRuleContext<RestTransportLayerContext>(0);
		}
		public WebSocketTransportLayerContext webSocketTransportLayer() {
			return GetRuleContext<WebSocketTransportLayerContext>(0);
		}
		public TransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransportLayerContext transportLayer() {
		TransportLayerContext _localctx = new TransportLayerContext(Context, State);
		EnterRule(_localctx, 92, RULE_transportLayer);
		try {
			State = 539;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 536; httpTransportLayer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 537; restTransportLayer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 538; webSocketTransportLayer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IHTTP() { return GetToken(SoalParser.IHTTP, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public HttpTransportLayerPropertiesContext[] httpTransportLayerProperties() {
			return GetRuleContexts<HttpTransportLayerPropertiesContext>();
		}
		public HttpTransportLayerPropertiesContext httpTransportLayerProperties(int i) {
			return GetRuleContext<HttpTransportLayerPropertiesContext>(i);
		}
		public HttpTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpTransportLayerContext httpTransportLayer() {
		HttpTransportLayerContext _localctx = new HttpTransportLayerContext(Context, State);
		EnterRule(_localctx, 94, RULE_httpTransportLayer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541; Match(KTransport);
			State = 542; Match(IHTTP);
			State = 552;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 543; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 544; Match(TOpenBrace);
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==ISSL || _la==IClientAuthentication) {
					{
					{
					State = 545; httpTransportLayerProperties();
					}
					}
					State = 550;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 551; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IREST() { return GetToken(SoalParser.IREST, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public RestTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRestTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRestTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestTransportLayerContext restTransportLayer() {
		RestTransportLayerContext _localctx = new RestTransportLayerContext(Context, State);
		EnterRule(_localctx, 96, RULE_restTransportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554; Match(KTransport);
			State = 555; Match(IREST);
			State = 559;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 556; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 557; Match(TOpenBrace);
				State = 558; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WebSocketTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IWebSocket() { return GetToken(SoalParser.IWebSocket, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public WebSocketTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webSocketTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWebSocketTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWebSocketTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebSocketTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebSocketTransportLayerContext webSocketTransportLayer() {
		WebSocketTransportLayerContext _localctx = new WebSocketTransportLayerContext(Context, State);
		EnterRule(_localctx, 98, RULE_webSocketTransportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(KTransport);
			State = 562; Match(IWebSocket);
			State = 566;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 563; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 564; Match(TOpenBrace);
				State = 565; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpTransportLayerPropertiesContext : ParserRuleContext {
		public HttpSslPropertyContext httpSslProperty() {
			return GetRuleContext<HttpSslPropertyContext>(0);
		}
		public HttpClientAuthenticationPropertyContext httpClientAuthenticationProperty() {
			return GetRuleContext<HttpClientAuthenticationPropertyContext>(0);
		}
		public HttpTransportLayerPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpTransportLayerProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayerProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayerProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayerProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpTransportLayerPropertiesContext httpTransportLayerProperties() {
		HttpTransportLayerPropertiesContext _localctx = new HttpTransportLayerPropertiesContext(Context, State);
		EnterRule(_localctx, 100, RULE_httpTransportLayerProperties);
		try {
			State = 570;
			switch (TokenStream.La(1)) {
			case ISSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568; httpSslProperty();
				}
				break;
			case IClientAuthentication:
				EnterOuterAlt(_localctx, 2);
				{
				State = 569; httpClientAuthenticationProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpSslPropertyContext : ParserRuleContext {
		public ITerminalNode ISSL() { return GetToken(SoalParser.ISSL, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public HttpSslPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpSslProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpSslProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpSslProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpSslProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpSslPropertyContext httpSslProperty() {
		HttpSslPropertyContext _localctx = new HttpSslPropertyContext(Context, State);
		EnterRule(_localctx, 102, RULE_httpSslProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; Match(ISSL);
			State = 573; Match(TAssign);
			State = 574; booleanLiteral();
			State = 575; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpClientAuthenticationPropertyContext : ParserRuleContext {
		public ITerminalNode IClientAuthentication() { return GetToken(SoalParser.IClientAuthentication, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public HttpClientAuthenticationPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpClientAuthenticationProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpClientAuthenticationProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpClientAuthenticationProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpClientAuthenticationProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpClientAuthenticationPropertyContext httpClientAuthenticationProperty() {
		HttpClientAuthenticationPropertyContext _localctx = new HttpClientAuthenticationPropertyContext(Context, State);
		EnterRule(_localctx, 104, RULE_httpClientAuthenticationProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(IClientAuthentication);
			State = 578; Match(TAssign);
			State = 579; booleanLiteral();
			State = 580; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingLayerContext : ParserRuleContext {
		public SoapEncodingLayerContext soapEncodingLayer() {
			return GetRuleContext<SoapEncodingLayerContext>(0);
		}
		public XmlEncodingLayerContext xmlEncodingLayer() {
			return GetRuleContext<XmlEncodingLayerContext>(0);
		}
		public JsonEncodingLayerContext jsonEncodingLayer() {
			return GetRuleContext<JsonEncodingLayerContext>(0);
		}
		public EncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingLayerContext encodingLayer() {
		EncodingLayerContext _localctx = new EncodingLayerContext(Context, State);
		EnterRule(_localctx, 106, RULE_encodingLayer);
		try {
			State = 585;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 582; soapEncodingLayer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583; xmlEncodingLayer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 584; jsonEncodingLayer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode ISOAP() { return GetToken(SoalParser.ISOAP, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public SoapEncodingPropertiesContext[] soapEncodingProperties() {
			return GetRuleContexts<SoapEncodingPropertiesContext>();
		}
		public SoapEncodingPropertiesContext soapEncodingProperties(int i) {
			return GetRuleContext<SoapEncodingPropertiesContext>(i);
		}
		public SoapEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapEncodingLayerContext soapEncodingLayer() {
		SoapEncodingLayerContext _localctx = new SoapEncodingLayerContext(Context, State);
		EnterRule(_localctx, 108, RULE_soapEncodingLayer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587; Match(KEncoding);
			State = 588; Match(ISOAP);
			State = 598;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 589; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 590; Match(TOpenBrace);
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IVersion - 89)) | (1L << (IStyle - 89)) | (1L << (IMTOM - 89)))) != 0)) {
					{
					{
					State = 591; soapEncodingProperties();
					}
					}
					State = 596;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 597; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode IXML() { return GetToken(SoalParser.IXML, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public XmlEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterXmlEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitXmlEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlEncodingLayerContext xmlEncodingLayer() {
		XmlEncodingLayerContext _localctx = new XmlEncodingLayerContext(Context, State);
		EnterRule(_localctx, 110, RULE_xmlEncodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; Match(KEncoding);
			State = 601; Match(IXML);
			State = 605;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 602; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 603; Match(TOpenBrace);
				State = 604; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode IJSON() { return GetToken(SoalParser.IJSON, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public JsonEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterJsonEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitJsonEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEncodingLayerContext jsonEncodingLayer() {
		JsonEncodingLayerContext _localctx = new JsonEncodingLayerContext(Context, State);
		EnterRule(_localctx, 112, RULE_jsonEncodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607; Match(KEncoding);
			State = 608; Match(IJSON);
			State = 612;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 609; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 610; Match(TOpenBrace);
				State = 611; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapEncodingPropertiesContext : ParserRuleContext {
		public SoapVersionPropertyContext soapVersionProperty() {
			return GetRuleContext<SoapVersionPropertyContext>(0);
		}
		public SoapMtomPropertyContext soapMtomProperty() {
			return GetRuleContext<SoapMtomPropertyContext>(0);
		}
		public SoapStylePropertyContext soapStyleProperty() {
			return GetRuleContext<SoapStylePropertyContext>(0);
		}
		public SoapEncodingPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapEncodingProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapEncodingPropertiesContext soapEncodingProperties() {
		SoapEncodingPropertiesContext _localctx = new SoapEncodingPropertiesContext(Context, State);
		EnterRule(_localctx, 114, RULE_soapEncodingProperties);
		try {
			State = 617;
			switch (TokenStream.La(1)) {
			case IVersion:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614; soapVersionProperty();
				}
				break;
			case IMTOM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615; soapMtomProperty();
				}
				break;
			case IStyle:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616; soapStyleProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapVersionPropertyContext : ParserRuleContext {
		public ITerminalNode IVersion() { return GetToken(SoalParser.IVersion, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapVersionPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapVersionProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapVersionProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapVersionProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapVersionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapVersionPropertyContext soapVersionProperty() {
		SoapVersionPropertyContext _localctx = new SoapVersionPropertyContext(Context, State);
		EnterRule(_localctx, 116, RULE_soapVersionProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; Match(IVersion);
			State = 620; Match(TAssign);
			State = 621; identifier();
			State = 622; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapMtomPropertyContext : ParserRuleContext {
		public ITerminalNode IMTOM() { return GetToken(SoalParser.IMTOM, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapMtomPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapMtomProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapMtomProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapMtomProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapMtomProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapMtomPropertyContext soapMtomProperty() {
		SoapMtomPropertyContext _localctx = new SoapMtomPropertyContext(Context, State);
		EnterRule(_localctx, 118, RULE_soapMtomProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624; Match(IMTOM);
			State = 625; Match(TAssign);
			State = 626; booleanLiteral();
			State = 627; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapStylePropertyContext : ParserRuleContext {
		public ITerminalNode IStyle() { return GetToken(SoalParser.IStyle, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapStylePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapStyleProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapStyleProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapStyleProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapStyleProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapStylePropertyContext soapStyleProperty() {
		SoapStylePropertyContext _localctx = new SoapStylePropertyContext(Context, State);
		EnterRule(_localctx, 120, RULE_soapStyleProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629; Match(IStyle);
			State = 630; Match(TAssign);
			State = 631; identifier();
			State = 632; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerContext : ParserRuleContext {
		public ITerminalNode KProtocol() { return GetToken(SoalParser.KProtocol, 0); }
		public ProtocolLayerKindContext protocolLayerKind() {
			return GetRuleContext<ProtocolLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ProtocolLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerContext protocolLayer() {
		ProtocolLayerContext _localctx = new ProtocolLayerContext(Context, State);
		EnterRule(_localctx, 122, RULE_protocolLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; Match(KProtocol);
			State = 635; protocolLayerKind();
			State = 636; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerKindContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ProtocolLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerKindContext protocolLayerKind() {
		ProtocolLayerKindContext _localctx = new ProtocolLayerKindContext(Context, State);
		EnterRule(_localctx, 124, RULE_protocolLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointDeclarationContext : ParserRuleContext {
		public ITerminalNode KEndpoint() { return GetToken(SoalParser.KEndpoint, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EndpointPropertiesContext endpointProperties() {
			return GetRuleContext<EndpointPropertiesContext>(0);
		}
		public EndpointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointDeclarationContext endpointDeclaration() {
		EndpointDeclarationContext _localctx = new EndpointDeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_endpointDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(KEndpoint);
			State = 641; identifier();
			State = 642; Match(TColon);
			State = 643; qualifiedName();
			State = 644; Match(TOpenBrace);
			State = 646;
			_la = TokenStream.La(1);
			if (_la==KBinding || _la==KAddress) {
				{
				State = 645; endpointProperties();
				}
			}

			State = 648; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertiesContext : ParserRuleContext {
		public EndpointPropertyContext[] endpointProperty() {
			return GetRuleContexts<EndpointPropertyContext>();
		}
		public EndpointPropertyContext endpointProperty(int i) {
			return GetRuleContext<EndpointPropertyContext>(i);
		}
		public EndpointPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertiesContext endpointProperties() {
		EndpointPropertiesContext _localctx = new EndpointPropertiesContext(Context, State);
		EnterRule(_localctx, 128, RULE_endpointProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 650; endpointProperty();
				}
				}
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KBinding || _la==KAddress );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertyContext : ParserRuleContext {
		public EndpointBindingPropertyContext endpointBindingProperty() {
			return GetRuleContext<EndpointBindingPropertyContext>(0);
		}
		public EndpointAddressPropertyContext endpointAddressProperty() {
			return GetRuleContext<EndpointAddressPropertyContext>(0);
		}
		public EndpointPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertyContext endpointProperty() {
		EndpointPropertyContext _localctx = new EndpointPropertyContext(Context, State);
		EnterRule(_localctx, 130, RULE_endpointProperty);
		try {
			State = 657;
			switch (TokenStream.La(1)) {
			case KBinding:
				EnterOuterAlt(_localctx, 1);
				{
				State = 655; endpointBindingProperty();
				}
				break;
			case KAddress:
				EnterOuterAlt(_localctx, 2);
				{
				State = 656; endpointAddressProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointBindingPropertyContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointBindingPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointBindingProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointBindingProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointBindingProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointBindingProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointBindingPropertyContext endpointBindingProperty() {
		EndpointBindingPropertyContext _localctx = new EndpointBindingPropertyContext(Context, State);
		EnterRule(_localctx, 132, RULE_endpointBindingProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659; Match(KBinding);
			State = 660; qualifiedName();
			State = 661; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointAddressPropertyContext : ParserRuleContext {
		public ITerminalNode KAddress() { return GetToken(SoalParser.KAddress, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointAddressPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointAddressProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointAddressProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointAddressProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointAddressProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointAddressPropertyContext endpointAddressProperty() {
		EndpointAddressPropertyContext _localctx = new EndpointAddressPropertyContext(Context, State);
		EnterRule(_localctx, 134, RULE_endpointAddressProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663; Match(KAddress);
			State = 664; stringLiteral();
			State = 665; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 136, RULE_returnType);
		try {
			State = 669;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 667; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public NonNullableArrayTypeContext nonNullableArrayType() {
			return GetRuleContext<NonNullableArrayTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 138, RULE_typeReference);
		try {
			State = 674;
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 671; arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 672; nonNullableArrayType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 673; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public NonNullableTypeContext nonNullableType() {
			return GetRuleContext<NonNullableTypeContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_simpleType);
		try {
			State = 680;
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 676; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 677; nullableType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 678; nonNullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 679; referenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 142, RULE_referenceType);
		try {
			State = 684;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 682; objectType();
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 683; qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(SoalParser.KObject, 0); }
		public ITerminalNode KString() { return GetToken(SoalParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			_la = TokenStream.La(1);
			if ( !(_la==KObject || _la==KString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(SoalParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(SoalParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(SoalParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(SoalParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(SoalParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(SoalParser.KBool, 0); }
		public ITerminalNode IDate() { return GetToken(SoalParser.IDate, 0); }
		public ITerminalNode ITime() { return GetToken(SoalParser.ITime, 0); }
		public ITerminalNode IDateTime() { return GetToken(SoalParser.IDateTime, 0); }
		public ITerminalNode ITimeSpan() { return GetToken(SoalParser.ITimeSpan, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			_la = TokenStream.La(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (KInt - 34)) | (1L << (KLong - 34)) | (1L << (KFloat - 34)) | (1L << (KDouble - 34)) | (1L << (KByte - 34)) | (1L << (KBool - 34)) | (1L << (IDate - 34)) | (1L << (ITime - 34)) | (1L << (IDateTime - 34)) | (1L << (ITimeSpan - 34)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(SoalParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 148, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnewayTypeContext : ParserRuleContext {
		public ITerminalNode KOneway() { return GetToken(SoalParser.KOneway, 0); }
		public OnewayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onewayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOnewayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOnewayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnewayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnewayTypeContext onewayType() {
		OnewayTypeContext _localctx = new OnewayTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_onewayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692; Match(KOneway);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(SoalParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; primitiveType();
			State = 695; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullableTypeContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ITerminalNode TExclamation() { return GetToken(SoalParser.TExclamation, 0); }
		public NonNullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNonNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNonNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNullableTypeContext nonNullableType() {
		NonNullableTypeContext _localctx = new NonNullableTypeContext(Context, State);
		EnterRule(_localctx, 154, RULE_nonNullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697; referenceType();
			State = 698; Match(TExclamation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullableArrayTypeContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ITerminalNode TExclamation() { return GetToken(SoalParser.TExclamation, 0); }
		public NonNullableArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullableArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNonNullableArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNonNullableArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNullableArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNullableArrayTypeContext nonNullableArrayType() {
		NonNullableArrayTypeContext _localctx = new NonNullableArrayTypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_nonNullableArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700; arrayType();
			State = 701; Match(TExclamation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; simpleType();
			State = 704; Match(TOpenBracket);
			State = 705; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(SoalParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(SoalParser.IdentifierVerbatim, 0); }
		public ContextualKeywordsContext contextualKeywords() {
			return GetRuleContext<ContextualKeywordsContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 160, RULE_identifier);
		try {
			State = 710;
			switch (TokenStream.La(1)) {
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 707; Match(IdentifierNormal);
				}
				break;
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 708; Match(IdentifierVerbatim);
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
				EnterOuterAlt(_localctx, 3);
				{
				State = 709; contextualKeywords();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 162, RULE_literal);
		try {
			State = 718;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 713; booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 714; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 715; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 716; scientificLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
			case SingleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 717; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(SoalParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 164, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(SoalParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(SoalParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 166, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(SoalParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 168, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(SoalParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 170, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(SoalParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 172, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(SoalParser.RegularStringLiteral, 0); }
		public ITerminalNode SingleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.SingleQuoteVerbatimStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 174, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			_la = TokenStream.La(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (RegularStringLiteral - 109)) | (1L << (DoubleQuoteVerbatimStringLiteral - 109)) | (1L << (SingleQuoteVerbatimStringLiteral - 109)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextualKeywordsContext : ParserRuleContext {
		public ITerminalNode IDate() { return GetToken(SoalParser.IDate, 0); }
		public ITerminalNode ITime() { return GetToken(SoalParser.ITime, 0); }
		public ITerminalNode IDateTime() { return GetToken(SoalParser.IDateTime, 0); }
		public ITerminalNode ITimeSpan() { return GetToken(SoalParser.ITimeSpan, 0); }
		public ITerminalNode IVersion() { return GetToken(SoalParser.IVersion, 0); }
		public ITerminalNode IStyle() { return GetToken(SoalParser.IStyle, 0); }
		public ITerminalNode IMTOM() { return GetToken(SoalParser.IMTOM, 0); }
		public ITerminalNode ISSL() { return GetToken(SoalParser.ISSL, 0); }
		public ITerminalNode IHTTP() { return GetToken(SoalParser.IHTTP, 0); }
		public ITerminalNode IREST() { return GetToken(SoalParser.IREST, 0); }
		public ITerminalNode IWebSocket() { return GetToken(SoalParser.IWebSocket, 0); }
		public ITerminalNode ISOAP() { return GetToken(SoalParser.ISOAP, 0); }
		public ITerminalNode IXML() { return GetToken(SoalParser.IXML, 0); }
		public ITerminalNode IJSON() { return GetToken(SoalParser.IJSON, 0); }
		public ITerminalNode IClientAuthentication() { return GetToken(SoalParser.IClientAuthentication, 0); }
		public ContextualKeywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextualKeywords; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterContextualKeywords(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitContextualKeywords(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextualKeywords(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextualKeywordsContext contextualKeywords() {
		ContextualKeywordsContext _localctx = new ContextualKeywordsContext(Context, State);
		EnterRule(_localctx, 176, RULE_contextualKeywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			_la = TokenStream.La(1);
			if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (IDate - 85)) | (1L << (ITime - 85)) | (1L << (IDateTime - 85)) | (1L << (ITimeSpan - 85)) | (1L << (IVersion - 85)) | (1L << (IStyle - 85)) | (1L << (IMTOM - 85)) | (1L << (ISSL - 85)) | (1L << (IHTTP - 85)) | (1L << (IREST - 85)) | (1L << (IWebSocket - 85)) | (1L << (ISOAP - 85)) | (1L << (IXML - 85)) | (1L << (IJSON - 85)) | (1L << (IClientAuthentication - 85)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3y\x2E1\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x3\x2\a\x2\xB6\n\x2\f\x2\xE\x2\xB9\v\x2\x3\x3\x3\x3\x3"+
		"\x3\a\x3\xBE\n\x3\f\x3\xE\x3\xC1\v\x3\x3\x4\x3\x4\x3\x4\a\x4\xC6\n\x4"+
		"\f\x4\xE\x4\xC9\v\x4\x3\x5\x3\x5\x3\x5\a\x5\xCE\n\x5\f\x5\xE\x5\xD1\v"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xDC\n\x6"+
		"\f\x6\xE\x6\xDF\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x5\a\xEE\n\a\x3\b\x3\b\x3\b\x3\b\x5\b\xF4\n\b\x3\b\x3"+
		"\b\x3\t\x3\t\x3\t\a\t\xFB\n\t\f\t\xE\t\xFE\v\t\x3\n\x3\n\x3\v\x3\v\x3"+
		"\v\x3\v\x5\v\x106\n\v\x3\v\x3\v\a\v\x10A\n\v\f\v\xE\v\x10D\v\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\f\x5\f\x115\n\f\x3\f\x3\f\a\f\x119\n\f\f\f\xE\f\x11C"+
		"\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x5\r\x124\n\r\x3\r\x3\r\a\r\x128\n"+
		"\r\f\r\xE\r\x12B\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\a\xF\x137\n\xF\f\xF\xE\xF\x13A\v\xF\x3\xF\a\xF\x13D\n\xF\f\xF"+
		"\xE\xF\x140\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\a\x11\x14C\n\x11\f\x11\xE\x11\x14F\v\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x5\x12\x155\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x15A\n\x12"+
		"\x3\x12\x3\x12\x3\x12\x5\x12\x15F\n\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3"+
		"\x13\a\x13\x166\n\x13\f\x13\xE\x13\x169\v\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x15\x5\x15\x16F\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x175\n\x15\x3"+
		"\x15\x3\x15\x5\x15\x179\n\x15\x3\x15\x3\x15\x3\x16\x6\x16\x17E\n\x16\r"+
		"\x16\xE\x16\x17F\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x187\n\x17"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\x18C\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3"+
		"\x19\x5\x19\x193\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\x19A\n"+
		"\x1A\f\x1A\xE\x1A\x19D\v\x1A\x3\x1A\x5\x1A\x1A0\n\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1B6\n\x1F"+
		"\x3\x1F\x3\x1F\x5\x1F\x1BA\n\x1F\x3\x1F\x3\x1F\x3 \x6 \x1BF\n \r \xE "+
		"\x1C0\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x1CA\n!\x3\"\x3\"\x3\"\x3\"\x3#"+
		"\x3#\x3#\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3&\x3&\x5&\x1DE\n&\x3&\x3"+
		"&\x3\'\x6\'\x1E3\n\'\r\'\xE\'\x1E4\x3(\x3(\x5(\x1E9\n(\x3)\x3)\x3)\x3"+
		")\x3)\a)\x1F0\n)\f)\xE)\x1F3\v)\x3)\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x5+\x1FD"+
		"\n+\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x3.\x5.\x20B\n.\x3.\x3"+
		".\x3/\x3/\x6/\x211\n/\r/\xE/\x212\x3/\a/\x216\n/\f/\xE/\x219\v/\x3\x30"+
		"\x3\x30\x3\x30\x5\x30\x21E\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\a"+
		"\x31\x225\n\x31\f\x31\xE\x31\x228\v\x31\x3\x31\x5\x31\x22B\n\x31\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x232\n\x32\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x5\x33\x239\n\x33\x3\x34\x3\x34\x5\x34\x23D\n\x34\x3\x35\x3"+
		"\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3"+
		"\x37\x3\x37\x5\x37\x24C\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\a\x38"+
		"\x253\n\x38\f\x38\xE\x38\x256\v\x38\x3\x38\x5\x38\x259\n\x38\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x5\x39\x260\n\x39\x3:\x3:\x3:\x3:\x3:\x5:\x267"+
		"\n:\x3;\x3;\x3;\x5;\x26C\n;\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3"+
		">\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x5\x41\x289\n\x41\x3\x41\x3\x41\x3\x42\x6\x42\x28E\n\x42"+
		"\r\x42\xE\x42\x28F\x3\x43\x3\x43\x5\x43\x294\n\x43\x3\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x46\x3\x46\x5\x46\x2A0\n\x46\x3"+
		"G\x3G\x3G\x5G\x2A5\nG\x3H\x3H\x3H\x3H\x5H\x2AB\nH\x3I\x3I\x5I\x2AF\nI"+
		"\x3J\x3J\x3K\x3K\x3L\x3L\x3M\x3M\x3N\x3N\x3N\x3O\x3O\x3O\x3P\x3P\x3P\x3"+
		"Q\x3Q\x3Q\x3Q\x3R\x3R\x3R\x5R\x2C9\nR\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x2D1"+
		"\nS\x3T\x3T\x3U\x3U\x3V\x3V\x3W\x3W\x3X\x3X\x3Y\x3Y\x3Z\x3Z\x3Z\x2\x2"+
		"[\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34"+
		"\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82"+
		"\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6"+
		"\xA8\xAA\xAC\xAE\xB0\xB2\x2\b\x4\x2\x14\x14\x1B\x1B\x3\x2\"#\x4\x2$)W"+
		"Z\x3\x2 !\x4\x2oowx\x3\x2W\x65\x2E2\x2\xB7\x3\x2\x2\x2\x4\xBA\x3\x2\x2"+
		"\x2\x6\xC2\x3\x2\x2\x2\b\xCA\x3\x2\x2\x2\n\xD2\x3\x2\x2\x2\f\xED\x3\x2"+
		"\x2\x2\xE\xEF\x3\x2\x2\x2\x10\xF7\x3\x2\x2\x2\x12\xFF\x3\x2\x2\x2\x14"+
		"\x101\x3\x2\x2\x2\x16\x110\x3\x2\x2\x2\x18\x11F\x3\x2\x2\x2\x1A\x12E\x3"+
		"\x2\x2\x2\x1C\x132\x3\x2\x2\x2\x1E\x143\x3\x2\x2\x2 \x147\x3\x2\x2\x2"+
		"\"\x154\x3\x2\x2\x2$\x162\x3\x2\x2\x2&\x16A\x3\x2\x2\x2(\x16E\x3\x2\x2"+
		"\x2*\x17D\x3\x2\x2\x2,\x186\x3\x2\x2\x2.\x188\x3\x2\x2\x2\x30\x18F\x3"+
		"\x2\x2\x2\x32\x19F\x3\x2\x2\x2\x34\x1A1\x3\x2\x2\x2\x36\x1A5\x3\x2\x2"+
		"\x2\x38\x1A9\x3\x2\x2\x2:\x1AD\x3\x2\x2\x2<\x1B1\x3\x2\x2\x2>\x1BE\x3"+
		"\x2\x2\x2@\x1C9\x3\x2\x2\x2\x42\x1CB\x3\x2\x2\x2\x44\x1CF\x3\x2\x2\x2"+
		"\x46\x1D5\x3\x2\x2\x2H\x1D7\x3\x2\x2\x2J\x1D9\x3\x2\x2\x2L\x1E2\x3\x2"+
		"\x2\x2N\x1E8\x3\x2\x2\x2P\x1EA\x3\x2\x2\x2R\x1F6\x3\x2\x2\x2T\x1FC\x3"+
		"\x2\x2\x2V\x1FE\x3\x2\x2\x2X\x202\x3\x2\x2\x2Z\x206\x3\x2\x2\x2\\\x20E"+
		"\x3\x2\x2\x2^\x21D\x3\x2\x2\x2`\x21F\x3\x2\x2\x2\x62\x22C\x3\x2\x2\x2"+
		"\x64\x233\x3\x2\x2\x2\x66\x23C\x3\x2\x2\x2h\x23E\x3\x2\x2\x2j\x243\x3"+
		"\x2\x2\x2l\x24B\x3\x2\x2\x2n\x24D\x3\x2\x2\x2p\x25A\x3\x2\x2\x2r\x261"+
		"\x3\x2\x2\x2t\x26B\x3\x2\x2\x2v\x26D\x3\x2\x2\x2x\x272\x3\x2\x2\x2z\x277"+
		"\x3\x2\x2\x2|\x27C\x3\x2\x2\x2~\x280\x3\x2\x2\x2\x80\x282\x3\x2\x2\x2"+
		"\x82\x28D\x3\x2\x2\x2\x84\x293\x3\x2\x2\x2\x86\x295\x3\x2\x2\x2\x88\x299"+
		"\x3\x2\x2\x2\x8A\x29F\x3\x2\x2\x2\x8C\x2A4\x3\x2\x2\x2\x8E\x2AA\x3\x2"+
		"\x2\x2\x90\x2AE\x3\x2\x2\x2\x92\x2B0\x3\x2\x2\x2\x94\x2B2\x3\x2\x2\x2"+
		"\x96\x2B4\x3\x2\x2\x2\x98\x2B6\x3\x2\x2\x2\x9A\x2B8\x3\x2\x2\x2\x9C\x2BB"+
		"\x3\x2\x2\x2\x9E\x2BE\x3\x2\x2\x2\xA0\x2C1\x3\x2\x2\x2\xA2\x2C8\x3\x2"+
		"\x2\x2\xA4\x2D0\x3\x2\x2\x2\xA6\x2D2\x3\x2\x2\x2\xA8\x2D4\x3\x2\x2\x2"+
		"\xAA\x2D6\x3\x2\x2\x2\xAC\x2D8\x3\x2\x2\x2\xAE\x2DA\x3\x2\x2\x2\xB0\x2DC"+
		"\x3\x2\x2\x2\xB2\x2DE\x3\x2\x2\x2\xB4\xB6\x5\n\x6\x2\xB5\xB4\x3\x2\x2"+
		"\x2\xB6\xB9\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\x3"+
		"\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xBA\xBF\x5\xA2R\x2\xBB\xBC\a.\x2\x2\xBC"+
		"\xBE\x5\xA2R\x2\xBD\xBB\x3\x2\x2\x2\xBE\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2"+
		"\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\x5\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC2"+
		"\xC7\x5\xA2R\x2\xC3\xC4\a/\x2\x2\xC4\xC6\x5\xA2R\x2\xC5\xC3\x3\x2\x2\x2"+
		"\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\a\x3"+
		"\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCF\x5\x4\x3\x2\xCB\xCC\a/\x2\x2\xCC"+
		"\xCE\x5\x4\x3\x2\xCD\xCB\x3\x2\x2\x2\xCE\xD1\x3\x2\x2\x2\xCF\xCD\x3\x2"+
		"\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\t\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD2\xD3"+
		"\a\x3\x2\x2\xD3\xD4\x5\x4\x3\x2\xD4\xD5\a\x30\x2\x2\xD5\xD6\x5\xA2R\x2"+
		"\xD6\xD7\a-\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xD9\x5\xB0Y\x2\xD9\xDD\a\x35"+
		"\x2\x2\xDA\xDC\x5\f\a\x2\xDB\xDA\x3\x2\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDB"+
		"\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xE0\x3\x2\x2\x2\xDF\xDD\x3\x2\x2"+
		"\x2\xE0\xE1\a\x36\x2\x2\xE1\v\x3\x2\x2\x2\xE2\xEE\x5\xE\b\x2\xE3\xEE\x5"+
		"\x14\v\x2\xE4\xEE\x5\x16\f\x2\xE5\xEE\x5\x18\r\x2\xE6\xEE\x5\x1C\xF\x2"+
		"\xE7\xEE\x5 \x11\x2\xE8\xEE\x5(\x15\x2\xE9\xEE\x5<\x1F\x2\xEA\xEE\x5Z"+
		".\x2\xEB\xEE\x5\x80\x41\x2\xEC\xEE\x5J&\x2\xED\xE2\x3\x2\x2\x2\xED\xE3"+
		"\x3\x2\x2\x2\xED\xE4\x3\x2\x2\x2\xED\xE5\x3\x2\x2\x2\xED\xE6\x3\x2\x2"+
		"\x2\xED\xE7\x3\x2\x2\x2\xED\xE8\x3\x2\x2\x2\xED\xE9\x3\x2\x2\x2\xED\xEA"+
		"\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEC\x3\x2\x2\x2\xEE\r\x3\x2\x2\x2"+
		"\xEF\xF0\a\x4\x2\x2\xF0\xF1\x5\xA2R\x2\xF1\xF3\a\x35\x2\x2\xF2\xF4\x5"+
		"\x10\t\x2\xF3\xF2\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2"+
		"\xF5\xF6\a\x36\x2\x2\xF6\xF\x3\x2\x2\x2\xF7\xFC\x5\x12\n\x2\xF8\xF9\a"+
		"/\x2\x2\xF9\xFB\x5\x12\n\x2\xFA\xF8\x3\x2\x2\x2\xFB\xFE\x3\x2\x2\x2\xFC"+
		"\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\x11\x3\x2\x2\x2\xFE\xFC\x3\x2"+
		"\x2\x2\xFF\x100\x5\xA2R\x2\x100\x13\x3\x2\x2\x2\x101\x102\a\x6\x2\x2\x102"+
		"\x105\x5\xA2R\x2\x103\x104\a-\x2\x2\x104\x106\x5\x4\x3\x2\x105\x103\x3"+
		"\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x10B\a\x35"+
		"\x2\x2\x108\x10A\x5\x1A\xE\x2\x109\x108\x3\x2\x2\x2\x10A\x10D\x3\x2\x2"+
		"\x2\x10B\x109\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10E\x3\x2\x2\x2"+
		"\x10D\x10B\x3\x2\x2\x2\x10E\x10F\a\x36\x2\x2\x10F\x15\x3\x2\x2\x2\x110"+
		"\x111\a\x5\x2\x2\x111\x114\x5\xA2R\x2\x112\x113\a-\x2\x2\x113\x115\x5"+
		"\x4\x3\x2\x114\x112\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x116\x3\x2"+
		"\x2\x2\x116\x11A\a\x35\x2\x2\x117\x119\x5\x1A\xE\x2\x118\x117\x3\x2\x2"+
		"\x2\x119\x11C\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2"+
		"\x11B\x11D\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D\x11E\a\x36\x2\x2\x11E"+
		"\x17\x3\x2\x2\x2\x11F\x120\a\x11\x2\x2\x120\x123\x5\xA2R\x2\x121\x122"+
		"\a-\x2\x2\x122\x124\x5\x4\x3\x2\x123\x121\x3\x2\x2\x2\x123\x124\x3\x2"+
		"\x2\x2\x124\x125\x3\x2\x2\x2\x125\x129\a\x35\x2\x2\x126\x128\x5\x1A\xE"+
		"\x2\x127\x126\x3\x2\x2\x2\x128\x12B\x3\x2\x2\x2\x129\x127\x3\x2\x2\x2"+
		"\x129\x12A\x3\x2\x2\x2\x12A\x12C\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12C"+
		"\x12D\a\x36\x2\x2\x12D\x19\x3\x2\x2\x2\x12E\x12F\x5\x8CG\x2\x12F\x130"+
		"\x5\xA2R\x2\x130\x131\a,\x2\x2\x131\x1B\x3\x2\x2\x2\x132\x133\a\x10\x2"+
		"\x2\x133\x134\x5\xA2R\x2\x134\x138\a\x35\x2\x2\x135\x137\x5\x1E\x10\x2"+
		"\x136\x135\x3\x2\x2\x2\x137\x13A\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x138"+
		"\x139\x3\x2\x2\x2\x139\x13E\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2\x13B\x13D"+
		"\x5\"\x12\x2\x13C\x13B\x3\x2\x2\x2\x13D\x140\x3\x2\x2\x2\x13E\x13C\x3"+
		"\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x141\x3\x2\x2\x2\x140\x13E\x3\x2"+
		"\x2\x2\x141\x142\a\x36\x2\x2\x142\x1D\x3\x2\x2\x2\x143\x144\a\x11\x2\x2"+
		"\x144\x145\x5\x4\x3\x2\x145\x146\a,\x2\x2\x146\x1F\x3\x2\x2\x2\x147\x148"+
		"\a\a\x2\x2\x148\x149\x5\xA2R\x2\x149\x14D\a\x35\x2\x2\x14A\x14C\x5\"\x12"+
		"\x2\x14B\x14A\x3\x2\x2\x2\x14C\x14F\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2"+
		"\x14D\x14E\x3\x2\x2\x2\x14E\x150\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x150"+
		"\x151\a\x36\x2\x2\x151!\x3\x2\x2\x2\x152\x155\x5\x8A\x46\x2\x153\x155"+
		"\x5\x98M\x2\x154\x152\x3\x2\x2\x2\x154\x153\x3\x2\x2\x2\x155\x156\x3\x2"+
		"\x2\x2\x156\x157\x5\xA2R\x2\x157\x159\a\x31\x2\x2\x158\x15A\x5$\x13\x2"+
		"\x159\x158\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B"+
		"\x15E\a\x32\x2\x2\x15C\x15D\a\b\x2\x2\x15D\x15F\x5\b\x5\x2\x15E\x15C\x3"+
		"\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161\a,\x2"+
		"\x2\x161#\x3\x2\x2\x2\x162\x167\x5&\x14\x2\x163\x164\a/\x2\x2\x164\x166"+
		"\x5&\x14\x2\x165\x163\x3\x2\x2\x2\x166\x169\x3\x2\x2\x2\x167\x165\x3\x2"+
		"\x2\x2\x167\x168\x3\x2\x2\x2\x168%\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2\x16A"+
		"\x16B\x5\x8CG\x2\x16B\x16C\x5\xA2R\x2\x16C\'\x3\x2\x2\x2\x16D\x16F\a\x12"+
		"\x2\x2\x16E\x16D\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x170\x3\x2\x2"+
		"\x2\x170\x171\a\x13\x2\x2\x171\x174\x5\xA2R\x2\x172\x173\a-\x2\x2\x173"+
		"\x175\x5\x4\x3\x2\x174\x172\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x176"+
		"\x3\x2\x2\x2\x176\x178\a\x35\x2\x2\x177\x179\x5*\x16\x2\x178\x177\x3\x2"+
		"\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\a\x36\x2"+
		"\x2\x17B)\x3\x2\x2\x2\x17C\x17E\x5,\x17\x2\x17D\x17C\x3\x2\x2\x2\x17E"+
		"\x17F\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180+\x3"+
		"\x2\x2\x2\x181\x187\x5.\x18\x2\x182\x187\x5\x30\x19\x2\x183\x187\x5\x36"+
		"\x1C\x2\x184\x187\x5\x38\x1D\x2\x185\x187\x5:\x1E\x2\x186\x181\x3\x2\x2"+
		"\x2\x186\x182\x3\x2\x2\x2\x186\x183\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2"+
		"\x186\x185\x3\x2\x2\x2\x187-\x3\x2\x2\x2\x188\x189\a\x16\x2\x2\x189\x18B"+
		"\x5\x4\x3\x2\x18A\x18C\x5\xA2R\x2\x18B\x18A\x3\x2\x2\x2\x18B\x18C\x3\x2"+
		"\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18E\x5\x32\x1A\x2\x18E/\x3\x2\x2\x2"+
		"\x18F\x190\a\x15\x2\x2\x190\x192\x5\x4\x3\x2\x191\x193\x5\xA2R\x2\x192"+
		"\x191\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x195"+
		"\x5\x32\x1A\x2\x195\x31\x3\x2\x2\x2\x196\x1A0\a,\x2\x2\x197\x19B\a\x35"+
		"\x2\x2\x198\x19A\x5\x34\x1B\x2\x199\x198\x3\x2\x2\x2\x19A\x19D\x3\x2\x2"+
		"\x2\x19B\x199\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19C\x19E\x3\x2\x2\x2"+
		"\x19D\x19B\x3\x2\x2\x2\x19E\x1A0\a\x36\x2\x2\x19F\x196\x3\x2\x2\x2\x19F"+
		"\x197\x3\x2\x2\x2\x1A0\x33\x3\x2\x2\x2\x1A1\x1A2\a\n\x2\x2\x1A2\x1A3\x5"+
		"\x4\x3\x2\x1A3\x1A4\a,\x2\x2\x1A4\x35\x3\x2\x2\x2\x1A5\x1A6\x5\x8CG\x2"+
		"\x1A6\x1A7\x5\xA2R\x2\x1A7\x1A8\a,\x2\x2\x1A8\x37\x3\x2\x2\x2\x1A9\x1AA"+
		"\a\x19\x2\x2\x1AA\x1AB\x5\xA2R\x2\x1AB\x1AC\a,\x2\x2\x1AC\x39\x3\x2\x2"+
		"\x2\x1AD\x1AE\a\x1A\x2\x2\x1AE\x1AF\x5\xA2R\x2\x1AF\x1B0\a,\x2\x2\x1B0"+
		";\x3\x2\x2\x2\x1B1\x1B2\t\x2\x2\x2\x1B2\x1B5\x5\xA2R\x2\x1B3\x1B4\a-\x2"+
		"\x2\x1B4\x1B6\x5\x4\x3\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2"+
		"\x1B6\x1B7\x3\x2\x2\x2\x1B7\x1B9\a\x35\x2\x2\x1B8\x1BA\x5> \x2\x1B9\x1B8"+
		"\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BC\a\x36"+
		"\x2\x2\x1BC=\x3\x2\x2\x2\x1BD\x1BF\x5@!\x2\x1BE\x1BD\x3\x2\x2\x2\x1BF"+
		"\x1C0\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1?\x3"+
		"\x2\x2\x2\x1C2\x1CA\x5.\x18\x2\x1C3\x1CA\x5\x30\x19\x2\x1C4\x1CA\x5\x36"+
		"\x1C\x2\x1C5\x1CA\x5\x38\x1D\x2\x1C6\x1CA\x5:\x1E\x2\x1C7\x1CA\x5\x42"+
		"\"\x2\x1C8\x1CA\x5\x44#\x2\x1C9\x1C2\x3\x2\x2\x2\x1C9\x1C3\x3\x2\x2\x2"+
		"\x1C9\x1C4\x3\x2\x2\x2\x1C9\x1C5\x3\x2\x2\x2\x1C9\x1C6\x3\x2\x2\x2\x1C9"+
		"\x1C7\x3\x2\x2\x2\x1C9\x1C8\x3\x2\x2\x2\x1CA\x41\x3\x2\x2\x2\x1CB\x1CC"+
		"\a\x13\x2\x2\x1CC\x1CD\x5\x4\x3\x2\x1CD\x1CE\a,\x2\x2\x1CE\x43\x3\x2\x2"+
		"\x2\x1CF\x1D0\a\x17\x2\x2\x1D0\x1D1\x5\x46$\x2\x1D1\x1D2\a\x18\x2\x2\x1D2"+
		"\x1D3\x5H%\x2\x1D3\x1D4\a,\x2\x2\x1D4\x45\x3\x2\x2\x2\x1D5\x1D6\x5\x4"+
		"\x3\x2\x1D6G\x3\x2\x2\x2\x1D7\x1D8\x5\x4\x3\x2\x1D8I\x3\x2\x2\x2\x1D9"+
		"\x1DA\a\x1C\x2\x2\x1DA\x1DB\x5\xA2R\x2\x1DB\x1DD\a\x35\x2\x2\x1DC\x1DE"+
		"\x5L\'\x2\x1DD\x1DC\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1DF\x3\x2"+
		"\x2\x2\x1DF\x1E0\a\x36\x2\x2\x1E0K\x3\x2\x2\x2\x1E1\x1E3\x5N(\x2\x1E2"+
		"\x1E1\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E2\x3\x2\x2\x2\x1E4\x1E5"+
		"\x3\x2\x2\x2\x1E5M\x3\x2\x2\x2\x1E6\x1E9\x5P)\x2\x1E7\x1E9\x5\x44#\x2"+
		"\x1E8\x1E6\x3\x2\x2\x2\x1E8\x1E7\x3\x2\x2\x2\x1E9O\x3\x2\x2\x2\x1EA\x1EB"+
		"\a\x1D\x2\x2\x1EB\x1EC\x5\xA2R\x2\x1EC\x1ED\a\x35\x2\x2\x1ED\x1F1\x5R"+
		"*\x2\x1EE\x1F0\x5T+\x2\x1EF\x1EE\x3\x2\x2\x2\x1F0\x1F3\x3\x2\x2\x2\x1F1"+
		"\x1EF\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2\x1F4\x3\x2\x2\x2\x1F3\x1F1"+
		"\x3\x2\x2\x2\x1F4\x1F5\a\x36\x2\x2\x1F5Q\x3\x2\x2\x2\x1F6\x1F7\a\x1E\x2"+
		"\x2\x1F7\x1F8\x5\xA2R\x2\x1F8\x1F9\a,\x2\x2\x1F9S\x3\x2\x2\x2\x1FA\x1FD"+
		"\x5V,\x2\x1FB\x1FD\x5X-\x2\x1FC\x1FA\x3\x2\x2\x2\x1FC\x1FB\x3\x2\x2\x2"+
		"\x1FDU\x3\x2\x2\x2\x1FE\x1FF\a\x1B\x2\x2\x1FF\x200\x5\x4\x3\x2\x200\x201"+
		"\a,\x2\x2\x201W\x3\x2\x2\x2\x202\x203\a\x10\x2\x2\x203\x204\x5\x4\x3\x2"+
		"\x204\x205\a,\x2\x2\x205Y\x3\x2\x2\x2\x206\x207\a\n\x2\x2\x207\x208\x5"+
		"\xA2R\x2\x208\x20A\a\x35\x2\x2\x209\x20B\x5\\/\x2\x20A\x209\x3\x2\x2\x2"+
		"\x20A\x20B\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20D\a\x36\x2\x2\x20D"+
		"[\x3\x2\x2\x2\x20E\x210\x5^\x30\x2\x20F\x211\x5l\x37\x2\x210\x20F\x3\x2"+
		"\x2\x2\x211\x212\x3\x2\x2\x2\x212\x210\x3\x2\x2\x2\x212\x213\x3\x2\x2"+
		"\x2\x213\x217\x3\x2\x2\x2\x214\x216\x5|?\x2\x215\x214\x3\x2\x2\x2\x216"+
		"\x219\x3\x2\x2\x2\x217\x215\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218]\x3"+
		"\x2\x2\x2\x219\x217\x3\x2\x2\x2\x21A\x21E\x5`\x31\x2\x21B\x21E\x5\x62"+
		"\x32\x2\x21C\x21E\x5\x64\x33\x2\x21D\x21A\x3\x2\x2\x2\x21D\x21B\x3\x2"+
		"\x2\x2\x21D\x21C\x3\x2\x2\x2\x21E_\x3\x2\x2\x2\x21F\x220\a\v\x2\x2\x220"+
		"\x22A\a_\x2\x2\x221\x22B\a,\x2\x2\x222\x226\a\x35\x2\x2\x223\x225\x5\x66"+
		"\x34\x2\x224\x223\x3\x2\x2\x2\x225\x228\x3\x2\x2\x2\x226\x224\x3\x2\x2"+
		"\x2\x226\x227\x3\x2\x2\x2\x227\x229\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2"+
		"\x229\x22B\a\x36\x2\x2\x22A\x221\x3\x2\x2\x2\x22A\x222\x3\x2\x2\x2\x22B"+
		"\x61\x3\x2\x2\x2\x22C\x22D\a\v\x2\x2\x22D\x231\a`\x2\x2\x22E\x232\a,\x2"+
		"\x2\x22F\x230\a\x35\x2\x2\x230\x232\a\x36\x2\x2\x231\x22E\x3\x2\x2\x2"+
		"\x231\x22F\x3\x2\x2\x2\x232\x63\x3\x2\x2\x2\x233\x234\a\v\x2\x2\x234\x238"+
		"\a\x61\x2\x2\x235\x239\a,\x2\x2\x236\x237\a\x35\x2\x2\x237\x239\a\x36"+
		"\x2\x2\x238\x235\x3\x2\x2\x2\x238\x236\x3\x2\x2\x2\x239\x65\x3\x2\x2\x2"+
		"\x23A\x23D\x5h\x35\x2\x23B\x23D\x5j\x36\x2\x23C\x23A\x3\x2\x2\x2\x23C"+
		"\x23B\x3\x2\x2\x2\x23Dg\x3\x2\x2\x2\x23E\x23F\a^\x2\x2\x23F\x240\a\x30"+
		"\x2\x2\x240\x241\x5\xA8U\x2\x241\x242\a,\x2\x2\x242i\x3\x2\x2\x2\x243"+
		"\x244\a\x65\x2\x2\x244\x245\a\x30\x2\x2\x245\x246\x5\xA8U\x2\x246\x247"+
		"\a,\x2\x2\x247k\x3\x2\x2\x2\x248\x24C\x5n\x38\x2\x249\x24C\x5p\x39\x2"+
		"\x24A\x24C\x5r:\x2\x24B\x248\x3\x2\x2\x2\x24B\x249\x3\x2\x2\x2\x24B\x24A"+
		"\x3\x2\x2\x2\x24Cm\x3\x2\x2\x2\x24D\x24E\a\f\x2\x2\x24E\x258\a\x62\x2"+
		"\x2\x24F\x259\a,\x2\x2\x250\x254\a\x35\x2\x2\x251\x253\x5t;\x2\x252\x251"+
		"\x3\x2\x2\x2\x253\x256\x3\x2\x2\x2\x254\x252\x3\x2\x2\x2\x254\x255\x3"+
		"\x2\x2\x2\x255\x257\x3\x2\x2\x2\x256\x254\x3\x2\x2\x2\x257\x259\a\x36"+
		"\x2\x2\x258\x24F\x3\x2\x2\x2\x258\x250\x3\x2\x2\x2\x259o\x3\x2\x2\x2\x25A"+
		"\x25B\a\f\x2\x2\x25B\x25F\a\x63\x2\x2\x25C\x260\a,\x2\x2\x25D\x25E\a\x35"+
		"\x2\x2\x25E\x260\a\x36\x2\x2\x25F\x25C\x3\x2\x2\x2\x25F\x25D\x3\x2\x2"+
		"\x2\x260q\x3\x2\x2\x2\x261\x262\a\f\x2\x2\x262\x266\a\x64\x2\x2\x263\x267"+
		"\a,\x2\x2\x264\x265\a\x35\x2\x2\x265\x267\a\x36\x2\x2\x266\x263\x3\x2"+
		"\x2\x2\x266\x264\x3\x2\x2\x2\x267s\x3\x2\x2\x2\x268\x26C\x5v<\x2\x269"+
		"\x26C\x5x=\x2\x26A\x26C\x5z>\x2\x26B\x268\x3\x2\x2\x2\x26B\x269\x3\x2"+
		"\x2\x2\x26B\x26A\x3\x2\x2\x2\x26Cu\x3\x2\x2\x2\x26D\x26E\a[\x2\x2\x26E"+
		"\x26F\a\x30\x2\x2\x26F\x270\x5\xA2R\x2\x270\x271\a,\x2\x2\x271w\x3\x2"+
		"\x2\x2\x272\x273\a]\x2\x2\x273\x274\a\x30\x2\x2\x274\x275\x5\xA8U\x2\x275"+
		"\x276\a,\x2\x2\x276y\x3\x2\x2\x2\x277\x278\a\\\x2\x2\x278\x279\a\x30\x2"+
		"\x2\x279\x27A\x5\xA2R\x2\x27A\x27B\a,\x2\x2\x27B{\x3\x2\x2\x2\x27C\x27D"+
		"\a\r\x2\x2\x27D\x27E\x5~@\x2\x27E\x27F\a,\x2\x2\x27F}\x3\x2\x2\x2\x280"+
		"\x281\x5\xA2R\x2\x281\x7F\x3\x2\x2\x2\x282\x283\a\xE\x2\x2\x283\x284\x5"+
		"\xA2R\x2\x284\x285\a-\x2\x2\x285\x286\x5\x4\x3\x2\x286\x288\a\x35\x2\x2"+
		"\x287\x289\x5\x82\x42\x2\x288\x287\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289"+
		"\x28A\x3\x2\x2\x2\x28A\x28B\a\x36\x2\x2\x28B\x81\x3\x2\x2\x2\x28C\x28E"+
		"\x5\x84\x43\x2\x28D\x28C\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x28D\x3"+
		"\x2\x2\x2\x28F\x290\x3\x2\x2\x2\x290\x83\x3\x2\x2\x2\x291\x294\x5\x86"+
		"\x44\x2\x292\x294\x5\x88\x45\x2\x293\x291\x3\x2\x2\x2\x293\x292\x3\x2"+
		"\x2\x2\x294\x85\x3\x2\x2\x2\x295\x296\a\n\x2\x2\x296\x297\x5\x4\x3\x2"+
		"\x297\x298\a,\x2\x2\x298\x87\x3\x2\x2\x2\x299\x29A\a\xF\x2\x2\x29A\x29B"+
		"\x5\xB0Y\x2\x29B\x29C\a,\x2\x2\x29C\x89\x3\x2\x2\x2\x29D\x2A0\x5\x8CG"+
		"\x2\x29E\x2A0\x5\x96L\x2\x29F\x29D\x3\x2\x2\x2\x29F\x29E\x3\x2\x2\x2\x2A0"+
		"\x8B\x3\x2\x2\x2\x2A1\x2A5\x5\xA0Q\x2\x2A2\x2A5\x5\x9EP\x2\x2A3\x2A5\x5"+
		"\x8EH\x2\x2A4\x2A1\x3\x2\x2\x2\x2A4\x2A2\x3\x2\x2\x2\x2A4\x2A3\x3\x2\x2"+
		"\x2\x2A5\x8D\x3\x2\x2\x2\x2A6\x2AB\x5\x94K\x2\x2A7\x2AB\x5\x9AN\x2\x2A8"+
		"\x2AB\x5\x9CO\x2\x2A9\x2AB\x5\x90I\x2\x2AA\x2A6\x3\x2\x2\x2\x2AA\x2A7"+
		"\x3\x2\x2\x2\x2AA\x2A8\x3\x2\x2\x2\x2AA\x2A9\x3\x2\x2\x2\x2AB\x8F\x3\x2"+
		"\x2\x2\x2AC\x2AF\x5\x92J\x2\x2AD\x2AF\x5\x4\x3\x2\x2AE\x2AC\x3\x2\x2\x2"+
		"\x2AE\x2AD\x3\x2\x2\x2\x2AF\x91\x3\x2\x2\x2\x2B0\x2B1\t\x3\x2\x2\x2B1"+
		"\x93\x3\x2\x2\x2\x2B2\x2B3\t\x4\x2\x2\x2B3\x95\x3\x2\x2\x2\x2B4\x2B5\a"+
		"+\x2\x2\x2B5\x97\x3\x2\x2\x2\x2B6\x2B7\a\t\x2\x2\x2B7\x99\x3\x2\x2\x2"+
		"\x2B8\x2B9\x5\x94K\x2\x2B9\x2BA\a\x39\x2\x2\x2BA\x9B\x3\x2\x2\x2\x2BB"+
		"\x2BC\x5\x90I\x2\x2BC\x2BD\a\x45\x2\x2\x2BD\x9D\x3\x2\x2\x2\x2BE\x2BF"+
		"\x5\xA0Q\x2\x2BF\x2C0\a\x45\x2\x2\x2C0\x9F\x3\x2\x2\x2\x2C1\x2C2\x5\x8E"+
		"H\x2\x2C2\x2C3\a\x33\x2\x2\x2C3\x2C4\a\x34\x2\x2\x2C4\xA1\x3\x2\x2\x2"+
		"\x2C5\x2C9\a\x66\x2\x2\x2C6\x2C9\ag\x2\x2\x2C7\x2C9\x5\xB2Z\x2\x2C8\x2C5"+
		"\x3\x2\x2\x2\x2C8\x2C6\x3\x2\x2\x2\x2C8\x2C7\x3\x2\x2\x2\x2C9\xA3\x3\x2"+
		"\x2\x2\x2CA\x2D1\x5\xA6T\x2\x2CB\x2D1\x5\xA8U\x2\x2CC\x2D1\x5\xAAV\x2"+
		"\x2CD\x2D1\x5\xACW\x2\x2CE\x2D1\x5\xAEX\x2\x2CF\x2D1\x5\xB0Y\x2\x2D0\x2CA"+
		"\x3\x2\x2\x2\x2D0\x2CB\x3\x2\x2\x2\x2D0\x2CC\x3\x2\x2\x2\x2D0\x2CD\x3"+
		"\x2\x2\x2\x2D0\x2CE\x3\x2\x2\x2\x2D0\x2CF\x3\x2\x2\x2\x2D1\xA5\x3\x2\x2"+
		"\x2\x2D2\x2D3\a\x1F\x2\x2\x2D3\xA7\x3\x2\x2\x2\x2D4\x2D5\t\x5\x2\x2\x2D5"+
		"\xA9\x3\x2\x2\x2\x2D6\x2D7\ah\x2\x2\x2D7\xAB\x3\x2\x2\x2\x2D8\x2D9\ai"+
		"\x2\x2\x2D9\xAD\x3\x2\x2\x2\x2DA\x2DB\aj\x2\x2\x2DB\xAF\x3\x2\x2\x2\x2DC"+
		"\x2DD\t\x6\x2\x2\x2DD\xB1\x3\x2\x2\x2\x2DE\x2DF\t\a\x2\x2\x2DF\xB3\x3"+
		"\x2\x2\x2\x41\xB7\xBF\xC7\xCF\xDD\xED\xF3\xFC\x105\x10B\x114\x11A\x123"+
		"\x129\x138\x13E\x14D\x154\x159\x15E\x167\x16E\x174\x178\x17F\x186\x18B"+
		"\x192\x19B\x19F\x1B5\x1B9\x1C0\x1C9\x1DD\x1E4\x1E8\x1F1\x1FC\x20A\x212"+
		"\x217\x21D\x226\x22A\x231\x238\x23C\x24B\x254\x258\x25F\x266\x26B\x288"+
		"\x28F\x293\x29F\x2A4\x2AA\x2AE\x2C8\x2D0";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Soal
