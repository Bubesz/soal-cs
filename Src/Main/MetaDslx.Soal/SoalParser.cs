//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\rldgf21p.1je\SoalParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Soal {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SoalParser : Parser {
	public const int
		KNamespace=1, KEnum=2, KException=3, KStruct=4, KInterface=5, KThrows=6, 
		KOneway=7, KReturn=8, KBinding=9, KTransport=10, KEncoding=11, KProtocol=12, 
		KEndpoint=13, KAddress=14, KDatabase=15, KEntity=16, KAbstract=17, KComponent=18, 
		KComposite=19, KReference=20, KService=21, KWire=22, KTo=23, KImplementation=24, 
		KLanguage=25, KAssembly=26, KDeployment=27, KEnvironment=28, KRuntime=29, 
		KNull=30, KTrue=31, KFalse=32, KObject=33, KString=34, KInt=35, KLong=36, 
		KFloat=37, KDouble=38, KByte=39, KBool=40, KAny=41, KVoid=42, KTypeof=43, 
		TSemicolon=44, TColon=45, TDot=46, TComma=47, TAssign=48, TOpenParen=49, 
		TCloseParen=50, TOpenBracket=51, TCloseBracket=52, TOpenBrace=53, TCloseBrace=54, 
		TLessThan=55, TGreaterThan=56, TQuestion=57, TQuestionQuestion=58, TAmpersand=59, 
		THat=60, TBar=61, TAndAlso=62, TOrElse=63, TPlusPlus=64, TMinusMinus=65, 
		TPlus=66, TMinus=67, TTilde=68, TExclamation=69, TSlash=70, TAsterisk=71, 
		TPercent=72, TLessThanOrEqual=73, TGreaterThanOrEqual=74, TEqual=75, TNotEqual=76, 
		TAsteriskAssign=77, TSlashAssign=78, TPercentAssign=79, TPlusAssign=80, 
		TMinusAssign=81, TLeftShiftAssign=82, TRightShiftAssign=83, TAmpersandAssign=84, 
		THatAssign=85, TBarAssign=86, IDate=87, ITime=88, IDateTime=89, ITimeSpan=90, 
		IVersion=91, IStyle=92, IMTOM=93, ISSL=94, IHTTP=95, IREST=96, IWebSocket=97, 
		ISOAP=98, IXML=99, IJSON=100, IClientAuthentication=101, IdentifierNormal=102, 
		IdentifierVerbatim=103, IntegerLiteral=104, DecimalLiteral=105, ScientificLiteral=106, 
		DateTimeOffsetLiteral=107, DateTimeLiteral=108, DateLiteral=109, TimeLiteral=110, 
		RegularStringLiteral=111, GuidLiteral=112, UTF8BOM=113, WHITESPACE=114, 
		CRLF=115, LINEBREAK=116, LINE_COMMENT=117, COMMENT=118, DoubleQuoteVerbatimStringLiteral=119, 
		SingleQuoteVerbatimStringLiteral=120, DoubleQuoteVerbatimStringLiteralStart=121;
	public const int
		RULE_main = 0, RULE_qualifiedName = 1, RULE_identifierList = 2, RULE_qualifiedNameList = 3, 
		RULE_annotationList = 4, RULE_operationAnnotationList = 5, RULE_operationAnnotation = 6, 
		RULE_annotation = 7, RULE_returnAnnotation = 8, RULE_annotationBody = 9, 
		RULE_annotationProperties = 10, RULE_annotationPropertyList = 11, RULE_annotationProperty = 12, 
		RULE_annotationPropertyValue = 13, RULE_namespaceDeclaration = 14, RULE_declaration = 15, 
		RULE_enumDeclaration = 16, RULE_enumLiterals = 17, RULE_enumLiteral = 18, 
		RULE_structDeclaration = 19, RULE_exceptionDeclaration = 20, RULE_entityDeclaration = 21, 
		RULE_propertyDeclaration = 22, RULE_databaseDeclaration = 23, RULE_entityReference = 24, 
		RULE_interfaceDeclaration = 25, RULE_operationDeclaration = 26, RULE_parameterList = 27, 
		RULE_parameter = 28, RULE_componentDeclaration = 29, RULE_componentElements = 30, 
		RULE_componentElement = 31, RULE_componentService = 32, RULE_componentReference = 33, 
		RULE_componentServiceOrReferenceBody = 34, RULE_componentServiceOrReferenceElement = 35, 
		RULE_componentProperty = 36, RULE_componentImplementation = 37, RULE_componentLanguage = 38, 
		RULE_compositeDeclaration = 39, RULE_compositeElements = 40, RULE_compositeElement = 41, 
		RULE_compositeComponent = 42, RULE_compositeWire = 43, RULE_wireSource = 44, 
		RULE_wireTarget = 45, RULE_deploymentDeclaration = 46, RULE_deploymentElements = 47, 
		RULE_deploymentElement = 48, RULE_environmentDeclaration = 49, RULE_runtimeDeclaration = 50, 
		RULE_runtimeReference = 51, RULE_assemblyReference = 52, RULE_databaseReference = 53, 
		RULE_bindingDeclaration = 54, RULE_bindingLayers = 55, RULE_transportLayer = 56, 
		RULE_httpTransportLayer = 57, RULE_restTransportLayer = 58, RULE_webSocketTransportLayer = 59, 
		RULE_httpTransportLayerProperties = 60, RULE_httpSslProperty = 61, RULE_httpClientAuthenticationProperty = 62, 
		RULE_encodingLayer = 63, RULE_soapEncodingLayer = 64, RULE_xmlEncodingLayer = 65, 
		RULE_jsonEncodingLayer = 66, RULE_soapEncodingProperties = 67, RULE_soapVersionProperty = 68, 
		RULE_soapMtomProperty = 69, RULE_soapStyleProperty = 70, RULE_protocolLayer = 71, 
		RULE_protocolLayerKind = 72, RULE_endpointDeclaration = 73, RULE_endpointProperties = 74, 
		RULE_endpointProperty = 75, RULE_endpointBindingProperty = 76, RULE_endpointAddressProperty = 77, 
		RULE_returnType = 78, RULE_typeReference = 79, RULE_simpleType = 80, RULE_nulledType = 81, 
		RULE_referenceType = 82, RULE_objectType = 83, RULE_valueType = 84, RULE_voidType = 85, 
		RULE_onewayType = 86, RULE_nullableType = 87, RULE_nonNullableType = 88, 
		RULE_nonNullableArrayType = 89, RULE_arrayType = 90, RULE_simpleArrayType = 91, 
		RULE_nulledArrayType = 92, RULE_constantValue = 93, RULE_typeofValue = 94, 
		RULE_identifier = 95, RULE_literal = 96, RULE_nullLiteral = 97, RULE_booleanLiteral = 98, 
		RULE_integerLiteral = 99, RULE_decimalLiteral = 100, RULE_scientificLiteral = 101, 
		RULE_stringLiteral = 102, RULE_contextualKeywords = 103;
	public static readonly string[] ruleNames = {
		"main", "qualifiedName", "identifierList", "qualifiedNameList", "annotationList", 
		"operationAnnotationList", "operationAnnotation", "annotation", "returnAnnotation", 
		"annotationBody", "annotationProperties", "annotationPropertyList", "annotationProperty", 
		"annotationPropertyValue", "namespaceDeclaration", "declaration", "enumDeclaration", 
		"enumLiterals", "enumLiteral", "structDeclaration", "exceptionDeclaration", 
		"entityDeclaration", "propertyDeclaration", "databaseDeclaration", "entityReference", 
		"interfaceDeclaration", "operationDeclaration", "parameterList", "parameter", 
		"componentDeclaration", "componentElements", "componentElement", "componentService", 
		"componentReference", "componentServiceOrReferenceBody", "componentServiceOrReferenceElement", 
		"componentProperty", "componentImplementation", "componentLanguage", "compositeDeclaration", 
		"compositeElements", "compositeElement", "compositeComponent", "compositeWire", 
		"wireSource", "wireTarget", "deploymentDeclaration", "deploymentElements", 
		"deploymentElement", "environmentDeclaration", "runtimeDeclaration", "runtimeReference", 
		"assemblyReference", "databaseReference", "bindingDeclaration", "bindingLayers", 
		"transportLayer", "httpTransportLayer", "restTransportLayer", "webSocketTransportLayer", 
		"httpTransportLayerProperties", "httpSslProperty", "httpClientAuthenticationProperty", 
		"encodingLayer", "soapEncodingLayer", "xmlEncodingLayer", "jsonEncodingLayer", 
		"soapEncodingProperties", "soapVersionProperty", "soapMtomProperty", "soapStyleProperty", 
		"protocolLayer", "protocolLayerKind", "endpointDeclaration", "endpointProperties", 
		"endpointProperty", "endpointBindingProperty", "endpointAddressProperty", 
		"returnType", "typeReference", "simpleType", "nulledType", "referenceType", 
		"objectType", "valueType", "voidType", "onewayType", "nullableType", "nonNullableType", 
		"nonNullableArrayType", "arrayType", "simpleArrayType", "nulledArrayType", 
		"constantValue", "typeofValue", "identifier", "literal", "nullLiteral", 
		"booleanLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"stringLiteral", "contextualKeywords"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'enum'", "'exception'", "'struct'", "'interface'", 
		"'throws'", "'oneway'", "'return'", "'binding'", "'transport'", "'encoding'", 
		"'protocol'", "'endpoint'", "'address'", "'database'", "'entity'", "'abstract'", 
		"'component'", "'composite'", "'reference'", "'service'", "'wire'", "'to'", 
		"'implementation'", "'language'", "'assembly'", "'deployment'", "'environment'", 
		"'runtime'", "'null'", "'true'", "'false'", "'object'", "'string'", "'int'", 
		"'long'", "'float'", "'double'", "'byte'", "'bool'", "'any'", "'void'", 
		"'typeof'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='", "'Date'", "'Time'", "'DateTime'", 
		"'TimeSpan'", "'Version'", "'Style'", "'MTOM'", "'SSL'", "'HTTP'", "'REST'", 
		"'WebSocket'", "'SOAP'", "'XML'", "'JSON'", "'ClientAuthentication'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KEnum", "KException", "KStruct", "KInterface", "KThrows", 
		"KOneway", "KReturn", "KBinding", "KTransport", "KEncoding", "KProtocol", 
		"KEndpoint", "KAddress", "KDatabase", "KEntity", "KAbstract", "KComponent", 
		"KComposite", "KReference", "KService", "KWire", "KTo", "KImplementation", 
		"KLanguage", "KAssembly", "KDeployment", "KEnvironment", "KRuntime", "KNull", 
		"KTrue", "KFalse", "KObject", "KString", "KInt", "KLong", "KFloat", "KDouble", 
		"KByte", "KBool", "KAny", "KVoid", "KTypeof", "TSemicolon", "TColon", 
		"TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", 
		"TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", 
		"TQuestion", "TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", 
		"TOrElse", "TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IDate", "ITime", "IDateTime", 
		"ITimeSpan", "IVersion", "IStyle", "IMTOM", "ISSL", "IHTTP", "IREST", 
		"IWebSocket", "ISOAP", "IXML", "IJSON", "IClientAuthentication", "IdentifierNormal", 
		"IdentifierVerbatim", "IntegerLiteral", "DecimalLiteral", "ScientificLiteral", 
		"DateTimeOffsetLiteral", "DateTimeLiteral", "DateLiteral", "TimeLiteral", 
		"RegularStringLiteral", "GuidLiteral", "UTF8BOM", "WHITESPACE", "CRLF", 
		"LINEBREAK", "LINE_COMMENT", "COMMENT", "DoubleQuoteVerbatimStringLiteral", 
		"SingleQuoteVerbatimStringLiteral", "DoubleQuoteVerbatimStringLiteralStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SoalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SoalParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KNamespace || _la==TOpenBracket) {
				{
				{
				State = 208; namespaceDeclaration();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(SoalParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(SoalParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; identifier();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TDot) {
				{
				{
				State = 215; Match(TDot);
				State = 216; identifier();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; identifier();
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 223; Match(TComma);
				State = 224; identifier();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; qualifiedName();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 231; Match(TComma);
				State = 232; qualifiedName();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(Context, State);
		EnterRule(_localctx, 8, RULE_annotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 238; annotation();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==TOpenBracket );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationAnnotationListContext : ParserRuleContext {
		public OperationAnnotationContext[] operationAnnotation() {
			return GetRuleContexts<OperationAnnotationContext>();
		}
		public OperationAnnotationContext operationAnnotation(int i) {
			return GetRuleContext<OperationAnnotationContext>(i);
		}
		public OperationAnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationAnnotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationAnnotationListContext operationAnnotationList() {
		OperationAnnotationListContext _localctx = new OperationAnnotationListContext(Context, State);
		EnterRule(_localctx, 10, RULE_operationAnnotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 243; operationAnnotation();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==TOpenBracket );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationAnnotationContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ReturnAnnotationContext returnAnnotation() {
			return GetRuleContext<ReturnAnnotationContext>(0);
		}
		public OperationAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationAnnotationContext operationAnnotation() {
		OperationAnnotationContext _localctx = new OperationAnnotationContext(Context, State);
		EnterRule(_localctx, 12, RULE_operationAnnotation);
		try {
			State = 250;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; annotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249; returnAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(TOpenBracket);
			State = 253; annotationBody();
			State = 254; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnAnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode KReturn() { return GetToken(SoalParser.KReturn, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public ReturnAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnAnnotationContext returnAnnotation() {
		ReturnAnnotationContext _localctx = new ReturnAnnotationContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(TOpenBracket);
			State = 257; Match(KReturn);
			State = 258; Match(TColon);
			State = 259; annotationBody();
			State = 260; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationPropertiesContext annotationProperties() {
			return GetRuleContext<AnnotationPropertiesContext>(0);
		}
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_annotationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; identifier();
			State = 264;
			_la = TokenStream.La(1);
			if (_la==TOpenParen) {
				{
				State = 263; annotationProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertiesContext : ParserRuleContext {
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public AnnotationPropertyListContext annotationPropertyList() {
			return GetRuleContext<AnnotationPropertyListContext>(0);
		}
		public AnnotationPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertiesContext annotationProperties() {
		AnnotationPropertiesContext _localctx = new AnnotationPropertiesContext(Context, State);
		EnterRule(_localctx, 20, RULE_annotationProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(TOpenParen);
			State = 268;
			_la = TokenStream.La(1);
			if (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 267; annotationPropertyList();
				}
			}

			State = 270; Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertyListContext : ParserRuleContext {
		public AnnotationPropertyContext[] annotationProperty() {
			return GetRuleContexts<AnnotationPropertyContext>();
		}
		public AnnotationPropertyContext annotationProperty(int i) {
			return GetRuleContext<AnnotationPropertyContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public AnnotationPropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationPropertyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationPropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationPropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertyListContext annotationPropertyList() {
		AnnotationPropertyListContext _localctx = new AnnotationPropertyListContext(Context, State);
		EnterRule(_localctx, 22, RULE_annotationPropertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; annotationProperty();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 273; Match(TComma);
				State = 274; annotationProperty();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public AnnotationPropertyValueContext annotationPropertyValue() {
			return GetRuleContext<AnnotationPropertyValueContext>(0);
		}
		public AnnotationPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertyContext annotationProperty() {
		AnnotationPropertyContext _localctx = new AnnotationPropertyContext(Context, State);
		EnterRule(_localctx, 24, RULE_annotationProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; identifier();
			State = 281; Match(TAssign);
			State = 282; annotationPropertyValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertyValueContext : ParserRuleContext {
		public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public TypeofValueContext typeofValue() {
			return GetRuleContext<TypeofValueContext>(0);
		}
		public AnnotationPropertyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationPropertyValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationPropertyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationPropertyValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationPropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertyValueContext annotationPropertyValue() {
		AnnotationPropertyValueContext _localctx = new AnnotationPropertyValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_annotationPropertyValue);
		try {
			State = 286;
			switch (TokenStream.La(1)) {
			case KNull:
			case KTrue:
			case KFalse:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
			case SingleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; constantValue();
				}
				break;
			case KTypeof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; typeofValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(SoalParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 288; annotationList();
				}
			}

			State = 291; Match(KNamespace);
			State = 292; qualifiedName();
			State = 293; Match(TAssign);
			State = 297;
			_la = TokenStream.La(1);
			if (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 294; identifier();
				State = 295; Match(TColon);
				}
			}

			State = 299; stringLiteral();
			State = 300; Match(TOpenBrace);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEnum) | (1L << KException) | (1L << KStruct) | (1L << KInterface) | (1L << KBinding) | (1L << KEndpoint) | (1L << KDatabase) | (1L << KEntity) | (1L << KAbstract) | (1L << KComponent) | (1L << KComposite) | (1L << KAssembly) | (1L << KDeployment) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 301; declaration();
				}
				}
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 307; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public ExceptionDeclarationContext exceptionDeclaration() {
			return GetRuleContext<ExceptionDeclarationContext>(0);
		}
		public EntityDeclarationContext entityDeclaration() {
			return GetRuleContext<EntityDeclarationContext>(0);
		}
		public DatabaseDeclarationContext databaseDeclaration() {
			return GetRuleContext<DatabaseDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ComponentDeclarationContext componentDeclaration() {
			return GetRuleContext<ComponentDeclarationContext>(0);
		}
		public CompositeDeclarationContext compositeDeclaration() {
			return GetRuleContext<CompositeDeclarationContext>(0);
		}
		public BindingDeclarationContext bindingDeclaration() {
			return GetRuleContext<BindingDeclarationContext>(0);
		}
		public EndpointDeclarationContext endpointDeclaration() {
			return GetRuleContext<EndpointDeclarationContext>(0);
		}
		public DeploymentDeclarationContext deploymentDeclaration() {
			return GetRuleContext<DeploymentDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_declaration);
		try {
			State = 320;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309; enumDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; structDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311; exceptionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 312; entityDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 313; databaseDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 314; interfaceDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 315; componentDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 316; compositeDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 317; bindingDeclaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 318; endpointDeclaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 319; deploymentDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(SoalParser.KEnum, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public EnumLiteralsContext enumLiterals() {
			return GetRuleContext<EnumLiteralsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 322; annotationList();
				}
			}

			State = 325; Match(KEnum);
			State = 326; identifier();
			State = 329;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 327; Match(TColon);
				State = 328; qualifiedName();
				}
			}

			State = 331; Match(TOpenBrace);
			State = 333;
			_la = TokenStream.La(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TOpenBracket - 51)) | (1L << (IDate - 51)) | (1L << (ITime - 51)) | (1L << (IDateTime - 51)) | (1L << (ITimeSpan - 51)) | (1L << (IVersion - 51)) | (1L << (IStyle - 51)) | (1L << (IMTOM - 51)) | (1L << (ISSL - 51)) | (1L << (IHTTP - 51)) | (1L << (IREST - 51)) | (1L << (IWebSocket - 51)) | (1L << (ISOAP - 51)) | (1L << (IXML - 51)) | (1L << (IJSON - 51)) | (1L << (IClientAuthentication - 51)) | (1L << (IdentifierNormal - 51)) | (1L << (IdentifierVerbatim - 51)))) != 0)) {
				{
				State = 332; enumLiterals();
				}
			}

			State = 335; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralsContext : ParserRuleContext {
		public EnumLiteralContext[] enumLiteral() {
			return GetRuleContexts<EnumLiteralContext>();
		}
		public EnumLiteralContext enumLiteral(int i) {
			return GetRuleContext<EnumLiteralContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public EnumLiteralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiterals; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumLiterals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumLiterals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiterals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralsContext enumLiterals() {
		EnumLiteralsContext _localctx = new EnumLiteralsContext(Context, State);
		EnterRule(_localctx, 34, RULE_enumLiterals);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; enumLiteral();
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 338; Match(TComma);
					State = 339; enumLiteral();
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 346;
			_la = TokenStream.La(1);
			if (_la==TComma) {
				{
				State = 345; Match(TComma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public EnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralContext enumLiteral() {
		EnumLiteralContext _localctx = new EnumLiteralContext(Context, State);
		EnterRule(_localctx, 36, RULE_enumLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 348; annotationList();
				}
			}

			State = 351; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode KStruct() { return GetToken(SoalParser.KStruct, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 353; annotationList();
				}
			}

			State = 356; Match(KStruct);
			State = 357; identifier();
			State = 360;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 358; Match(TColon);
				State = 359; qualifiedName();
				}
			}

			State = 362; Match(TOpenBrace);
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				{
				State = 363; propertyDeclaration();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 369; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionDeclarationContext : ParserRuleContext {
		public ITerminalNode KException() { return GetToken(SoalParser.KException, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public ExceptionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterExceptionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitExceptionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionDeclarationContext exceptionDeclaration() {
		ExceptionDeclarationContext _localctx = new ExceptionDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_exceptionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 371; annotationList();
				}
			}

			State = 374; Match(KException);
			State = 375; identifier();
			State = 378;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 376; Match(TColon);
				State = 377; qualifiedName();
				}
			}

			State = 380; Match(TOpenBrace);
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				{
				State = 381; propertyDeclaration();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 387; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclarationContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public EntityDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclarationContext entityDeclaration() {
		EntityDeclarationContext _localctx = new EntityDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_entityDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 389; annotationList();
				}
			}

			State = 392; Match(KEntity);
			State = 393; identifier();
			State = 396;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 394; Match(TColon);
				State = 395; qualifiedName();
				}
			}

			State = 398; Match(TOpenBrace);
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				{
				State = 399; propertyDeclaration();
				}
				}
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 405; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_propertyDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 407; annotationList();
				}
			}

			State = 410; typeReference();
			State = 411; identifier();
			State = 412; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseDeclarationContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public EntityReferenceContext[] entityReference() {
			return GetRuleContexts<EntityReferenceContext>();
		}
		public EntityReferenceContext entityReference(int i) {
			return GetRuleContext<EntityReferenceContext>(i);
		}
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public DatabaseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseDeclarationContext databaseDeclaration() {
		DatabaseDeclarationContext _localctx = new DatabaseDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_databaseDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 414; annotationList();
				}
			}

			State = 417; Match(KDatabase);
			State = 418; identifier();
			State = 419; Match(TOpenBrace);
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KEntity) {
				{
				{
				State = 420; entityReference();
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				{
				State = 426; operationDeclaration();
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 432; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityReferenceContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EntityReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityReferenceContext entityReference() {
		EntityReferenceContext _localctx = new EntityReferenceContext(Context, State);
		EnterRule(_localctx, 48, RULE_entityReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(KEntity);
			State = 435; qualifiedName();
			State = 436; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KInterface() { return GetToken(SoalParser.KInterface, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 438; annotationList();
				}
			}

			State = 441; Match(KInterface);
			State = 442; identifier();
			State = 443; Match(TOpenBrace);
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				{
				State = 444; operationDeclaration();
				}
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 450; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OnewayTypeContext onewayType() {
			return GetRuleContext<OnewayTypeContext>(0);
		}
		public OperationAnnotationListContext operationAnnotationList() {
			return GetRuleContext<OperationAnnotationListContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode KThrows() { return GetToken(SoalParser.KThrows, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 452; operationAnnotationList();
				}
			}

			State = 457;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KVoid:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				{
				State = 455; returnType();
				}
				break;
			case KOneway:
				{
				State = 456; onewayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 459; identifier();
			State = 460; Match(TOpenParen);
			State = 462;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 461; parameterList();
				}
			}

			State = 464; Match(TCloseParen);
			State = 467;
			_la = TokenStream.La(1);
			if (_la==KThrows) {
				{
				State = 465; Match(KThrows);
				State = 466; qualifiedNameList();
				}
			}

			State = 469; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 54, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; parameter();
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 472; Match(TComma);
				State = 473; parameter();
				}
				}
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 479; annotationList();
				}
			}

			State = 482; typeReference();
			State = 483; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentDeclarationContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode KAbstract() { return GetToken(SoalParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentElementsContext componentElements() {
			return GetRuleContext<ComponentElementsContext>(0);
		}
		public ComponentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDeclarationContext componentDeclaration() {
		ComponentDeclarationContext _localctx = new ComponentDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_componentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			_la = TokenStream.La(1);
			if (_la==KAbstract) {
				{
				State = 485; Match(KAbstract);
				}
			}

			State = 488; Match(KComponent);
			State = 489; identifier();
			State = 492;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 490; Match(TColon);
				State = 491; qualifiedName();
				}
			}

			State = 494; Match(TOpenBrace);
			State = 496;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 495; componentElements();
				}
			}

			State = 498; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementsContext : ParserRuleContext {
		public ComponentElementContext[] componentElement() {
			return GetRuleContexts<ComponentElementContext>();
		}
		public ComponentElementContext componentElement(int i) {
			return GetRuleContext<ComponentElementContext>(i);
		}
		public ComponentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementsContext componentElements() {
		ComponentElementsContext _localctx = new ComponentElementsContext(Context, State);
		EnterRule(_localctx, 60, RULE_componentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 500; componentElement();
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public ComponentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementContext componentElement() {
		ComponentElementContext _localctx = new ComponentElementContext(Context, State);
		EnterRule(_localctx, 62, RULE_componentElement);
		try {
			State = 510;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 506; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 507; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 508; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 509; componentLanguage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceContext : ParserRuleContext {
		public ITerminalNode KService() { return GetToken(SoalParser.KService, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentService; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentService(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentService(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentService(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceContext componentService() {
		ComponentServiceContext _localctx = new ComponentServiceContext(Context, State);
		EnterRule(_localctx, 64, RULE_componentService);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512; Match(KService);
			State = 513; qualifiedName();
			State = 515;
			_la = TokenStream.La(1);
			if (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 514; identifier();
				}
			}

			State = 517; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentReferenceContext : ParserRuleContext {
		public ITerminalNode KReference() { return GetToken(SoalParser.KReference, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentReferenceContext componentReference() {
		ComponentReferenceContext _localctx = new ComponentReferenceContext(Context, State);
		EnterRule(_localctx, 66, RULE_componentReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; Match(KReference);
			State = 520; qualifiedName();
			State = 522;
			_la = TokenStream.La(1);
			if (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 521; identifier();
				}
			}

			State = 524; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceBodyContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ComponentServiceOrReferenceElementContext[] componentServiceOrReferenceElement() {
			return GetRuleContexts<ComponentServiceOrReferenceElementContext>();
		}
		public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement(int i) {
			return GetRuleContext<ComponentServiceOrReferenceElementContext>(i);
		}
		public ComponentServiceOrReferenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
		ComponentServiceOrReferenceBodyContext _localctx = new ComponentServiceOrReferenceBodyContext(Context, State);
		EnterRule(_localctx, 68, RULE_componentServiceOrReferenceBody);
		int _la;
		try {
			State = 535;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 526; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527; Match(TOpenBrace);
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==KBinding) {
					{
					{
					State = 528; componentServiceOrReferenceElement();
					}
					}
					State = 533;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 534; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceElementContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentServiceOrReferenceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement() {
		ComponentServiceOrReferenceElementContext _localctx = new ComponentServiceOrReferenceElementContext(Context, State);
		EnterRule(_localctx, 70, RULE_componentServiceOrReferenceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(KBinding);
			State = 538; qualifiedName();
			State = 539; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentPropertyContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentPropertyContext componentProperty() {
		ComponentPropertyContext _localctx = new ComponentPropertyContext(Context, State);
		EnterRule(_localctx, 72, RULE_componentProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541; typeReference();
			State = 542; identifier();
			State = 543; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentImplementationContext : ParserRuleContext {
		public ITerminalNode KImplementation() { return GetToken(SoalParser.KImplementation, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentImplementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentImplementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentImplementation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentImplementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentImplementationContext componentImplementation() {
		ComponentImplementationContext _localctx = new ComponentImplementationContext(Context, State);
		EnterRule(_localctx, 74, RULE_componentImplementation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(KImplementation);
			State = 546; identifier();
			State = 547; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentLanguageContext : ParserRuleContext {
		public ITerminalNode KLanguage() { return GetToken(SoalParser.KLanguage, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentLanguageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentLanguage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentLanguage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentLanguage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentLanguageContext componentLanguage() {
		ComponentLanguageContext _localctx = new ComponentLanguageContext(Context, State);
		EnterRule(_localctx, 76, RULE_componentLanguage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; Match(KLanguage);
			State = 550; identifier();
			State = 551; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public ITerminalNode KComposite() { return GetToken(SoalParser.KComposite, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public CompositeElementsContext compositeElements() {
			return GetRuleContext<CompositeElementsContext>(0);
		}
		public CompositeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeDeclarationContext compositeDeclaration() {
		CompositeDeclarationContext _localctx = new CompositeDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_compositeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			_la = TokenStream.La(1);
			if ( !(_la==KComposite || _la==KAssembly) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 554; identifier();
			State = 557;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 555; Match(TColon);
				State = 556; qualifiedName();
				}
			}

			State = 559; Match(TOpenBrace);
			State = 561;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 560; compositeElements();
				}
			}

			State = 563; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementsContext : ParserRuleContext {
		public CompositeElementContext[] compositeElement() {
			return GetRuleContexts<CompositeElementContext>();
		}
		public CompositeElementContext compositeElement(int i) {
			return GetRuleContext<CompositeElementContext>(i);
		}
		public CompositeElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementsContext compositeElements() {
		CompositeElementsContext _localctx = new CompositeElementsContext(Context, State);
		EnterRule(_localctx, 80, RULE_compositeElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 565; compositeElement();
				}
				}
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public CompositeComponentContext compositeComponent() {
			return GetRuleContext<CompositeComponentContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public CompositeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementContext compositeElement() {
		CompositeElementContext _localctx = new CompositeElementContext(Context, State);
		EnterRule(_localctx, 82, RULE_compositeElement);
		try {
			State = 577;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 572; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 573; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 574; componentLanguage();
				}
				break;
			case KComponent:
				EnterOuterAlt(_localctx, 6);
				{
				State = 575; compositeComponent();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 7);
				{
				State = 576; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeComponentContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeComponentContext compositeComponent() {
		CompositeComponentContext _localctx = new CompositeComponentContext(Context, State);
		EnterRule(_localctx, 84, RULE_compositeComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579; Match(KComponent);
			State = 580; qualifiedName();
			State = 581; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeWireContext : ParserRuleContext {
		public ITerminalNode KWire() { return GetToken(SoalParser.KWire, 0); }
		public WireSourceContext wireSource() {
			return GetRuleContext<WireSourceContext>(0);
		}
		public ITerminalNode KTo() { return GetToken(SoalParser.KTo, 0); }
		public WireTargetContext wireTarget() {
			return GetRuleContext<WireTargetContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeWireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeWire; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeWire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeWire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeWire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeWireContext compositeWire() {
		CompositeWireContext _localctx = new CompositeWireContext(Context, State);
		EnterRule(_localctx, 86, RULE_compositeWire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(KWire);
			State = 584; wireSource();
			State = 585; Match(KTo);
			State = 586; wireTarget();
			State = 587; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireSourceContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireSourceContext wireSource() {
		WireSourceContext _localctx = new WireSourceContext(Context, State);
		EnterRule(_localctx, 88, RULE_wireSource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireTargetContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireTargetContext wireTarget() {
		WireTargetContext _localctx = new WireTargetContext(Context, State);
		EnterRule(_localctx, 90, RULE_wireTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentDeclarationContext : ParserRuleContext {
		public ITerminalNode KDeployment() { return GetToken(SoalParser.KDeployment, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public DeploymentElementsContext deploymentElements() {
			return GetRuleContext<DeploymentElementsContext>(0);
		}
		public DeploymentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentDeclarationContext deploymentDeclaration() {
		DeploymentDeclarationContext _localctx = new DeploymentDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_deploymentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593; Match(KDeployment);
			State = 594; identifier();
			State = 595; Match(TOpenBrace);
			State = 597;
			_la = TokenStream.La(1);
			if (_la==KWire || _la==KEnvironment) {
				{
				State = 596; deploymentElements();
				}
			}

			State = 599; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementsContext : ParserRuleContext {
		public DeploymentElementContext[] deploymentElement() {
			return GetRuleContexts<DeploymentElementContext>();
		}
		public DeploymentElementContext deploymentElement(int i) {
			return GetRuleContext<DeploymentElementContext>(i);
		}
		public DeploymentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementsContext deploymentElements() {
		DeploymentElementsContext _localctx = new DeploymentElementsContext(Context, State);
		EnterRule(_localctx, 94, RULE_deploymentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 601; deploymentElement();
				}
				}
				State = 604;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KWire || _la==KEnvironment );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementContext : ParserRuleContext {
		public EnvironmentDeclarationContext environmentDeclaration() {
			return GetRuleContext<EnvironmentDeclarationContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public DeploymentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementContext deploymentElement() {
		DeploymentElementContext _localctx = new DeploymentElementContext(Context, State);
		EnterRule(_localctx, 96, RULE_deploymentElement);
		try {
			State = 608;
			switch (TokenStream.La(1)) {
			case KEnvironment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 606; environmentDeclaration();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 2);
				{
				State = 607; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvironmentDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnvironment() { return GetToken(SoalParser.KEnvironment, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public RuntimeDeclarationContext runtimeDeclaration() {
			return GetRuleContext<RuntimeDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public RuntimeReferenceContext[] runtimeReference() {
			return GetRuleContexts<RuntimeReferenceContext>();
		}
		public RuntimeReferenceContext runtimeReference(int i) {
			return GetRuleContext<RuntimeReferenceContext>(i);
		}
		public EnvironmentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_environmentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnvironmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnvironmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvironmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvironmentDeclarationContext environmentDeclaration() {
		EnvironmentDeclarationContext _localctx = new EnvironmentDeclarationContext(Context, State);
		EnterRule(_localctx, 98, RULE_environmentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; Match(KEnvironment);
			State = 611; identifier();
			State = 612; Match(TOpenBrace);
			State = 613; runtimeDeclaration();
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KDatabase || _la==KAssembly) {
				{
				{
				State = 614; runtimeReference();
				}
				}
				State = 619;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 620; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeDeclarationContext : ParserRuleContext {
		public ITerminalNode KRuntime() { return GetToken(SoalParser.KRuntime, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public RuntimeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeDeclarationContext runtimeDeclaration() {
		RuntimeDeclarationContext _localctx = new RuntimeDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_runtimeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; Match(KRuntime);
			State = 623; identifier();
			State = 624; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeReferenceContext : ParserRuleContext {
		public AssemblyReferenceContext assemblyReference() {
			return GetRuleContext<AssemblyReferenceContext>(0);
		}
		public DatabaseReferenceContext databaseReference() {
			return GetRuleContext<DatabaseReferenceContext>(0);
		}
		public RuntimeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeReferenceContext runtimeReference() {
		RuntimeReferenceContext _localctx = new RuntimeReferenceContext(Context, State);
		EnterRule(_localctx, 102, RULE_runtimeReference);
		try {
			State = 628;
			switch (TokenStream.La(1)) {
			case KAssembly:
				EnterOuterAlt(_localctx, 1);
				{
				State = 626; assemblyReference();
				}
				break;
			case KDatabase:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627; databaseReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyReferenceContext : ParserRuleContext {
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public AssemblyReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAssemblyReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAssemblyReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyReferenceContext assemblyReference() {
		AssemblyReferenceContext _localctx = new AssemblyReferenceContext(Context, State);
		EnterRule(_localctx, 104, RULE_assemblyReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; Match(KAssembly);
			State = 631; qualifiedName();
			State = 632; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseReferenceContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public DatabaseReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseReferenceContext databaseReference() {
		DatabaseReferenceContext _localctx = new DatabaseReferenceContext(Context, State);
		EnterRule(_localctx, 106, RULE_databaseReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; Match(KDatabase);
			State = 635; qualifiedName();
			State = 636; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingDeclarationContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public BindingLayersContext bindingLayers() {
			return GetRuleContext<BindingLayersContext>(0);
		}
		public BindingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingDeclarationContext bindingDeclaration() {
		BindingDeclarationContext _localctx = new BindingDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_bindingDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(KBinding);
			State = 639; identifier();
			State = 640; Match(TOpenBrace);
			State = 642;
			_la = TokenStream.La(1);
			if (_la==KTransport) {
				{
				State = 641; bindingLayers();
				}
			}

			State = 644; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingLayersContext : ParserRuleContext {
		public TransportLayerContext transportLayer() {
			return GetRuleContext<TransportLayerContext>(0);
		}
		public EncodingLayerContext[] encodingLayer() {
			return GetRuleContexts<EncodingLayerContext>();
		}
		public EncodingLayerContext encodingLayer(int i) {
			return GetRuleContext<EncodingLayerContext>(i);
		}
		public ProtocolLayerContext[] protocolLayer() {
			return GetRuleContexts<ProtocolLayerContext>();
		}
		public ProtocolLayerContext protocolLayer(int i) {
			return GetRuleContext<ProtocolLayerContext>(i);
		}
		public BindingLayersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingLayers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingLayers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingLayers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingLayers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingLayersContext bindingLayers() {
		BindingLayersContext _localctx = new BindingLayersContext(Context, State);
		EnterRule(_localctx, 110, RULE_bindingLayers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646; transportLayer();
			State = 648;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 647; encodingLayer();
				}
				}
				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KEncoding );
			State = 655;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KProtocol) {
				{
				{
				State = 652; protocolLayer();
				}
				}
				State = 657;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransportLayerContext : ParserRuleContext {
		public HttpTransportLayerContext httpTransportLayer() {
			return GetRuleContext<HttpTransportLayerContext>(0);
		}
		public RestTransportLayerContext restTransportLayer() {
			return GetRuleContext<RestTransportLayerContext>(0);
		}
		public WebSocketTransportLayerContext webSocketTransportLayer() {
			return GetRuleContext<WebSocketTransportLayerContext>(0);
		}
		public TransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransportLayerContext transportLayer() {
		TransportLayerContext _localctx = new TransportLayerContext(Context, State);
		EnterRule(_localctx, 112, RULE_transportLayer);
		try {
			State = 661;
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 658; httpTransportLayer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659; restTransportLayer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 660; webSocketTransportLayer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IHTTP() { return GetToken(SoalParser.IHTTP, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public HttpTransportLayerPropertiesContext[] httpTransportLayerProperties() {
			return GetRuleContexts<HttpTransportLayerPropertiesContext>();
		}
		public HttpTransportLayerPropertiesContext httpTransportLayerProperties(int i) {
			return GetRuleContext<HttpTransportLayerPropertiesContext>(i);
		}
		public HttpTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpTransportLayerContext httpTransportLayer() {
		HttpTransportLayerContext _localctx = new HttpTransportLayerContext(Context, State);
		EnterRule(_localctx, 114, RULE_httpTransportLayer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663; Match(KTransport);
			State = 664; Match(IHTTP);
			State = 674;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 665; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 666; Match(TOpenBrace);
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==ISSL || _la==IClientAuthentication) {
					{
					{
					State = 667; httpTransportLayerProperties();
					}
					}
					State = 672;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 673; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IREST() { return GetToken(SoalParser.IREST, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public RestTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRestTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRestTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestTransportLayerContext restTransportLayer() {
		RestTransportLayerContext _localctx = new RestTransportLayerContext(Context, State);
		EnterRule(_localctx, 116, RULE_restTransportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676; Match(KTransport);
			State = 677; Match(IREST);
			State = 681;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 678; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 679; Match(TOpenBrace);
				State = 680; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WebSocketTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IWebSocket() { return GetToken(SoalParser.IWebSocket, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public WebSocketTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webSocketTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWebSocketTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWebSocketTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebSocketTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebSocketTransportLayerContext webSocketTransportLayer() {
		WebSocketTransportLayerContext _localctx = new WebSocketTransportLayerContext(Context, State);
		EnterRule(_localctx, 118, RULE_webSocketTransportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683; Match(KTransport);
			State = 684; Match(IWebSocket);
			State = 688;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 685; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 686; Match(TOpenBrace);
				State = 687; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpTransportLayerPropertiesContext : ParserRuleContext {
		public HttpSslPropertyContext httpSslProperty() {
			return GetRuleContext<HttpSslPropertyContext>(0);
		}
		public HttpClientAuthenticationPropertyContext httpClientAuthenticationProperty() {
			return GetRuleContext<HttpClientAuthenticationPropertyContext>(0);
		}
		public HttpTransportLayerPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpTransportLayerProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayerProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayerProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayerProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpTransportLayerPropertiesContext httpTransportLayerProperties() {
		HttpTransportLayerPropertiesContext _localctx = new HttpTransportLayerPropertiesContext(Context, State);
		EnterRule(_localctx, 120, RULE_httpTransportLayerProperties);
		try {
			State = 692;
			switch (TokenStream.La(1)) {
			case ISSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 690; httpSslProperty();
				}
				break;
			case IClientAuthentication:
				EnterOuterAlt(_localctx, 2);
				{
				State = 691; httpClientAuthenticationProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpSslPropertyContext : ParserRuleContext {
		public ITerminalNode ISSL() { return GetToken(SoalParser.ISSL, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public HttpSslPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpSslProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpSslProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpSslProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpSslProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpSslPropertyContext httpSslProperty() {
		HttpSslPropertyContext _localctx = new HttpSslPropertyContext(Context, State);
		EnterRule(_localctx, 122, RULE_httpSslProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; Match(ISSL);
			State = 695; Match(TAssign);
			State = 696; booleanLiteral();
			State = 697; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpClientAuthenticationPropertyContext : ParserRuleContext {
		public ITerminalNode IClientAuthentication() { return GetToken(SoalParser.IClientAuthentication, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public HttpClientAuthenticationPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpClientAuthenticationProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpClientAuthenticationProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpClientAuthenticationProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpClientAuthenticationProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpClientAuthenticationPropertyContext httpClientAuthenticationProperty() {
		HttpClientAuthenticationPropertyContext _localctx = new HttpClientAuthenticationPropertyContext(Context, State);
		EnterRule(_localctx, 124, RULE_httpClientAuthenticationProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699; Match(IClientAuthentication);
			State = 700; Match(TAssign);
			State = 701; booleanLiteral();
			State = 702; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingLayerContext : ParserRuleContext {
		public SoapEncodingLayerContext soapEncodingLayer() {
			return GetRuleContext<SoapEncodingLayerContext>(0);
		}
		public XmlEncodingLayerContext xmlEncodingLayer() {
			return GetRuleContext<XmlEncodingLayerContext>(0);
		}
		public JsonEncodingLayerContext jsonEncodingLayer() {
			return GetRuleContext<JsonEncodingLayerContext>(0);
		}
		public EncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingLayerContext encodingLayer() {
		EncodingLayerContext _localctx = new EncodingLayerContext(Context, State);
		EnterRule(_localctx, 126, RULE_encodingLayer);
		try {
			State = 707;
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704; soapEncodingLayer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705; xmlEncodingLayer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 706; jsonEncodingLayer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode ISOAP() { return GetToken(SoalParser.ISOAP, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public SoapEncodingPropertiesContext[] soapEncodingProperties() {
			return GetRuleContexts<SoapEncodingPropertiesContext>();
		}
		public SoapEncodingPropertiesContext soapEncodingProperties(int i) {
			return GetRuleContext<SoapEncodingPropertiesContext>(i);
		}
		public SoapEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapEncodingLayerContext soapEncodingLayer() {
		SoapEncodingLayerContext _localctx = new SoapEncodingLayerContext(Context, State);
		EnterRule(_localctx, 128, RULE_soapEncodingLayer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709; Match(KEncoding);
			State = 710; Match(ISOAP);
			State = 720;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 711; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 712; Match(TOpenBrace);
				State = 716;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (IVersion - 91)) | (1L << (IStyle - 91)) | (1L << (IMTOM - 91)))) != 0)) {
					{
					{
					State = 713; soapEncodingProperties();
					}
					}
					State = 718;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 719; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode IXML() { return GetToken(SoalParser.IXML, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public XmlEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterXmlEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitXmlEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlEncodingLayerContext xmlEncodingLayer() {
		XmlEncodingLayerContext _localctx = new XmlEncodingLayerContext(Context, State);
		EnterRule(_localctx, 130, RULE_xmlEncodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722; Match(KEncoding);
			State = 723; Match(IXML);
			State = 727;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 724; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 725; Match(TOpenBrace);
				State = 726; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode IJSON() { return GetToken(SoalParser.IJSON, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public JsonEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterJsonEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitJsonEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEncodingLayerContext jsonEncodingLayer() {
		JsonEncodingLayerContext _localctx = new JsonEncodingLayerContext(Context, State);
		EnterRule(_localctx, 132, RULE_jsonEncodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(KEncoding);
			State = 730; Match(IJSON);
			State = 734;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				{
				State = 731; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				{
				State = 732; Match(TOpenBrace);
				State = 733; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapEncodingPropertiesContext : ParserRuleContext {
		public SoapVersionPropertyContext soapVersionProperty() {
			return GetRuleContext<SoapVersionPropertyContext>(0);
		}
		public SoapMtomPropertyContext soapMtomProperty() {
			return GetRuleContext<SoapMtomPropertyContext>(0);
		}
		public SoapStylePropertyContext soapStyleProperty() {
			return GetRuleContext<SoapStylePropertyContext>(0);
		}
		public SoapEncodingPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapEncodingProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapEncodingPropertiesContext soapEncodingProperties() {
		SoapEncodingPropertiesContext _localctx = new SoapEncodingPropertiesContext(Context, State);
		EnterRule(_localctx, 134, RULE_soapEncodingProperties);
		try {
			State = 739;
			switch (TokenStream.La(1)) {
			case IVersion:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736; soapVersionProperty();
				}
				break;
			case IMTOM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737; soapMtomProperty();
				}
				break;
			case IStyle:
				EnterOuterAlt(_localctx, 3);
				{
				State = 738; soapStyleProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapVersionPropertyContext : ParserRuleContext {
		public ITerminalNode IVersion() { return GetToken(SoalParser.IVersion, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapVersionPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapVersionProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapVersionProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapVersionProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapVersionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapVersionPropertyContext soapVersionProperty() {
		SoapVersionPropertyContext _localctx = new SoapVersionPropertyContext(Context, State);
		EnterRule(_localctx, 136, RULE_soapVersionProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741; Match(IVersion);
			State = 742; Match(TAssign);
			State = 743; identifier();
			State = 744; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapMtomPropertyContext : ParserRuleContext {
		public ITerminalNode IMTOM() { return GetToken(SoalParser.IMTOM, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapMtomPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapMtomProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapMtomProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapMtomProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapMtomProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapMtomPropertyContext soapMtomProperty() {
		SoapMtomPropertyContext _localctx = new SoapMtomPropertyContext(Context, State);
		EnterRule(_localctx, 138, RULE_soapMtomProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746; Match(IMTOM);
			State = 747; Match(TAssign);
			State = 748; booleanLiteral();
			State = 749; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapStylePropertyContext : ParserRuleContext {
		public ITerminalNode IStyle() { return GetToken(SoalParser.IStyle, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapStylePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapStyleProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapStyleProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapStyleProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapStyleProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapStylePropertyContext soapStyleProperty() {
		SoapStylePropertyContext _localctx = new SoapStylePropertyContext(Context, State);
		EnterRule(_localctx, 140, RULE_soapStyleProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751; Match(IStyle);
			State = 752; Match(TAssign);
			State = 753; identifier();
			State = 754; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerContext : ParserRuleContext {
		public ITerminalNode KProtocol() { return GetToken(SoalParser.KProtocol, 0); }
		public ProtocolLayerKindContext protocolLayerKind() {
			return GetRuleContext<ProtocolLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ProtocolLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerContext protocolLayer() {
		ProtocolLayerContext _localctx = new ProtocolLayerContext(Context, State);
		EnterRule(_localctx, 142, RULE_protocolLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756; Match(KProtocol);
			State = 757; protocolLayerKind();
			State = 758; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerKindContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ProtocolLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerKindContext protocolLayerKind() {
		ProtocolLayerKindContext _localctx = new ProtocolLayerKindContext(Context, State);
		EnterRule(_localctx, 144, RULE_protocolLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointDeclarationContext : ParserRuleContext {
		public ITerminalNode KEndpoint() { return GetToken(SoalParser.KEndpoint, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EndpointPropertiesContext endpointProperties() {
			return GetRuleContext<EndpointPropertiesContext>(0);
		}
		public EndpointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointDeclarationContext endpointDeclaration() {
		EndpointDeclarationContext _localctx = new EndpointDeclarationContext(Context, State);
		EnterRule(_localctx, 146, RULE_endpointDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762; Match(KEndpoint);
			State = 763; identifier();
			State = 764; Match(TColon);
			State = 765; qualifiedName();
			State = 766; Match(TOpenBrace);
			State = 768;
			_la = TokenStream.La(1);
			if (_la==KBinding || _la==KAddress) {
				{
				State = 767; endpointProperties();
				}
			}

			State = 770; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertiesContext : ParserRuleContext {
		public EndpointPropertyContext[] endpointProperty() {
			return GetRuleContexts<EndpointPropertyContext>();
		}
		public EndpointPropertyContext endpointProperty(int i) {
			return GetRuleContext<EndpointPropertyContext>(i);
		}
		public EndpointPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertiesContext endpointProperties() {
		EndpointPropertiesContext _localctx = new EndpointPropertiesContext(Context, State);
		EnterRule(_localctx, 148, RULE_endpointProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 772; endpointProperty();
				}
				}
				State = 775;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KBinding || _la==KAddress );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertyContext : ParserRuleContext {
		public EndpointBindingPropertyContext endpointBindingProperty() {
			return GetRuleContext<EndpointBindingPropertyContext>(0);
		}
		public EndpointAddressPropertyContext endpointAddressProperty() {
			return GetRuleContext<EndpointAddressPropertyContext>(0);
		}
		public EndpointPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertyContext endpointProperty() {
		EndpointPropertyContext _localctx = new EndpointPropertyContext(Context, State);
		EnterRule(_localctx, 150, RULE_endpointProperty);
		try {
			State = 779;
			switch (TokenStream.La(1)) {
			case KBinding:
				EnterOuterAlt(_localctx, 1);
				{
				State = 777; endpointBindingProperty();
				}
				break;
			case KAddress:
				EnterOuterAlt(_localctx, 2);
				{
				State = 778; endpointAddressProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointBindingPropertyContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointBindingPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointBindingProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointBindingProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointBindingProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointBindingProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointBindingPropertyContext endpointBindingProperty() {
		EndpointBindingPropertyContext _localctx = new EndpointBindingPropertyContext(Context, State);
		EnterRule(_localctx, 152, RULE_endpointBindingProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781; Match(KBinding);
			State = 782; qualifiedName();
			State = 783; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointAddressPropertyContext : ParserRuleContext {
		public ITerminalNode KAddress() { return GetToken(SoalParser.KAddress, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointAddressPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointAddressProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointAddressProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointAddressProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointAddressProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointAddressPropertyContext endpointAddressProperty() {
		EndpointAddressPropertyContext _localctx = new EndpointAddressPropertyContext(Context, State);
		EnterRule(_localctx, 154, RULE_endpointAddressProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(KAddress);
			State = 786; stringLiteral();
			State = 787; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_returnType);
		try {
			State = 791;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public NonNullableArrayTypeContext nonNullableArrayType() {
			return GetRuleContext<NonNullableArrayTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NulledTypeContext nulledType() {
			return GetRuleContext<NulledTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 158, RULE_typeReference);
		try {
			State = 797;
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 793; nonNullableArrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 794; arrayType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 795; simpleType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 796; nulledType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 160, RULE_simpleType);
		try {
			State = 802;
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 799; valueType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 800; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 801; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NulledTypeContext : ParserRuleContext {
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public NonNullableTypeContext nonNullableType() {
			return GetRuleContext<NonNullableTypeContext>(0);
		}
		public NulledTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulledType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNulledType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNulledType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulledType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NulledTypeContext nulledType() {
		NulledTypeContext _localctx = new NulledTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_nulledType);
		try {
			State = 806;
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 804; nullableType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 805; nonNullableType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_referenceType);
		try {
			State = 810;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 808; objectType();
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 809; qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(SoalParser.KObject, 0); }
		public ITerminalNode KString() { return GetToken(SoalParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			_la = TokenStream.La(1);
			if ( !(_la==KObject || _la==KString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(SoalParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(SoalParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(SoalParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(SoalParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(SoalParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(SoalParser.KBool, 0); }
		public ITerminalNode IDate() { return GetToken(SoalParser.IDate, 0); }
		public ITerminalNode ITime() { return GetToken(SoalParser.ITime, 0); }
		public ITerminalNode IDateTime() { return GetToken(SoalParser.IDateTime, 0); }
		public ITerminalNode ITimeSpan() { return GetToken(SoalParser.ITimeSpan, 0); }
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterValueType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitValueType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		ValueTypeContext _localctx = new ValueTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_valueType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814;
			_la = TokenStream.La(1);
			if ( !(((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (KInt - 35)) | (1L << (KLong - 35)) | (1L << (KFloat - 35)) | (1L << (KDouble - 35)) | (1L << (KByte - 35)) | (1L << (KBool - 35)) | (1L << (IDate - 35)) | (1L << (ITime - 35)) | (1L << (IDateTime - 35)) | (1L << (ITimeSpan - 35)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(SoalParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 170, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnewayTypeContext : ParserRuleContext {
		public ITerminalNode KOneway() { return GetToken(SoalParser.KOneway, 0); }
		public OnewayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onewayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOnewayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOnewayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnewayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnewayTypeContext onewayType() {
		OnewayTypeContext _localctx = new OnewayTypeContext(Context, State);
		EnterRule(_localctx, 172, RULE_onewayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818; Match(KOneway);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(SoalParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820; valueType();
			State = 821; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullableTypeContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ITerminalNode TExclamation() { return GetToken(SoalParser.TExclamation, 0); }
		public NonNullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNonNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNonNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNullableTypeContext nonNullableType() {
		NonNullableTypeContext _localctx = new NonNullableTypeContext(Context, State);
		EnterRule(_localctx, 176, RULE_nonNullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; referenceType();
			State = 824; Match(TExclamation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullableArrayTypeContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ITerminalNode TExclamation() { return GetToken(SoalParser.TExclamation, 0); }
		public NonNullableArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullableArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNonNullableArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNonNullableArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNullableArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNullableArrayTypeContext nonNullableArrayType() {
		NonNullableArrayTypeContext _localctx = new NonNullableArrayTypeContext(Context, State);
		EnterRule(_localctx, 178, RULE_nonNullableArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826; arrayType();
			State = 827; Match(TExclamation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public SimpleArrayTypeContext simpleArrayType() {
			return GetRuleContext<SimpleArrayTypeContext>(0);
		}
		public NulledArrayTypeContext nulledArrayType() {
			return GetRuleContext<NulledArrayTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 180, RULE_arrayType);
		try {
			State = 831;
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 829; simpleArrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 830; nulledArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleArrayTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public SimpleArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSimpleArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSimpleArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleArrayTypeContext simpleArrayType() {
		SimpleArrayTypeContext _localctx = new SimpleArrayTypeContext(Context, State);
		EnterRule(_localctx, 182, RULE_simpleArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833; simpleType();
			State = 834; Match(TOpenBracket);
			State = 835; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NulledArrayTypeContext : ParserRuleContext {
		public NulledTypeContext nulledType() {
			return GetRuleContext<NulledTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public NulledArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulledArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNulledArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNulledArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulledArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NulledArrayTypeContext nulledArrayType() {
		NulledArrayTypeContext _localctx = new NulledArrayTypeContext(Context, State);
		EnterRule(_localctx, 184, RULE_nulledArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837; nulledType();
			State = 838; Match(TOpenBracket);
			State = 839; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantValueContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstantValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterConstantValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitConstantValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantValueContext constantValue() {
		ConstantValueContext _localctx = new ConstantValueContext(Context, State);
		EnterRule(_localctx, 186, RULE_constantValue);
		try {
			State = 843;
			switch (TokenStream.La(1)) {
			case KNull:
			case KTrue:
			case KFalse:
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
			case SingleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 841; literal();
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 842; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeofValueContext : ParserRuleContext {
		public ITerminalNode KTypeof() { return GetToken(SoalParser.KTypeof, 0); }
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public TypeofValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeofValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTypeofValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTypeofValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeofValueContext typeofValue() {
		TypeofValueContext _localctx = new TypeofValueContext(Context, State);
		EnterRule(_localctx, 188, RULE_typeofValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845; Match(KTypeof);
			State = 846; Match(TOpenParen);
			State = 847; returnType();
			State = 848; Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(SoalParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(SoalParser.IdentifierVerbatim, 0); }
		public ContextualKeywordsContext contextualKeywords() {
			return GetRuleContext<ContextualKeywordsContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 190, RULE_identifier);
		try {
			State = 853;
			switch (TokenStream.La(1)) {
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850; Match(IdentifierNormal);
				}
				break;
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 851; Match(IdentifierVerbatim);
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
				EnterOuterAlt(_localctx, 3);
				{
				State = 852; contextualKeywords();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 192, RULE_literal);
		try {
			State = 861;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 855; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 856; booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 857; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 858; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 859; scientificLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
			case SingleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 860; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(SoalParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(SoalParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(SoalParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 196, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(SoalParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(SoalParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 200, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(SoalParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 202, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(SoalParser.RegularStringLiteral, 0); }
		public ITerminalNode SingleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.SingleQuoteVerbatimStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 204, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			_la = TokenStream.La(1);
			if ( !(((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (RegularStringLiteral - 111)) | (1L << (DoubleQuoteVerbatimStringLiteral - 111)) | (1L << (SingleQuoteVerbatimStringLiteral - 111)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextualKeywordsContext : ParserRuleContext {
		public ITerminalNode IDate() { return GetToken(SoalParser.IDate, 0); }
		public ITerminalNode ITime() { return GetToken(SoalParser.ITime, 0); }
		public ITerminalNode IDateTime() { return GetToken(SoalParser.IDateTime, 0); }
		public ITerminalNode ITimeSpan() { return GetToken(SoalParser.ITimeSpan, 0); }
		public ITerminalNode IVersion() { return GetToken(SoalParser.IVersion, 0); }
		public ITerminalNode IStyle() { return GetToken(SoalParser.IStyle, 0); }
		public ITerminalNode IMTOM() { return GetToken(SoalParser.IMTOM, 0); }
		public ITerminalNode ISSL() { return GetToken(SoalParser.ISSL, 0); }
		public ITerminalNode IHTTP() { return GetToken(SoalParser.IHTTP, 0); }
		public ITerminalNode IREST() { return GetToken(SoalParser.IREST, 0); }
		public ITerminalNode IWebSocket() { return GetToken(SoalParser.IWebSocket, 0); }
		public ITerminalNode ISOAP() { return GetToken(SoalParser.ISOAP, 0); }
		public ITerminalNode IXML() { return GetToken(SoalParser.IXML, 0); }
		public ITerminalNode IJSON() { return GetToken(SoalParser.IJSON, 0); }
		public ITerminalNode IClientAuthentication() { return GetToken(SoalParser.IClientAuthentication, 0); }
		public ContextualKeywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextualKeywords; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterContextualKeywords(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitContextualKeywords(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextualKeywords(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextualKeywordsContext contextualKeywords() {
		ContextualKeywordsContext _localctx = new ContextualKeywordsContext(Context, State);
		EnterRule(_localctx, 206, RULE_contextualKeywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			_la = TokenStream.La(1);
			if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3{\x370\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x3\x2\a\x2\xD4\n\x2\f\x2\xE\x2\xD7\v\x2\x3\x3\x3\x3"+
		"\x3\x3\a\x3\xDC\n\x3\f\x3\xE\x3\xDF\v\x3\x3\x4\x3\x4\x3\x4\a\x4\xE4\n"+
		"\x4\f\x4\xE\x4\xE7\v\x4\x3\x5\x3\x5\x3\x5\a\x5\xEC\n\x5\f\x5\xE\x5\xEF"+
		"\v\x5\x3\x6\x6\x6\xF2\n\x6\r\x6\xE\x6\xF3\x3\a\x6\a\xF7\n\a\r\a\xE\a\xF8"+
		"\x3\b\x3\b\x5\b\xFD\n\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x5\v\x10B\n\v\x3\f\x3\f\x5\f\x10F\n\f\x3\f\x3\f\x3\r\x3\r"+
		"\x3\r\a\r\x116\n\r\f\r\xE\r\x119\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3"+
		"\xF\x5\xF\x121\n\xF\x3\x10\x5\x10\x124\n\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\x12C\n\x10\x3\x10\x3\x10\x3\x10\a\x10\x131\n\x10"+
		"\f\x10\xE\x10\x134\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x143\n\x11\x3\x12"+
		"\x5\x12\x146\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x14C\n\x12\x3\x12"+
		"\x3\x12\x5\x12\x150\n\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\a\x13\x157"+
		"\n\x13\f\x13\xE\x13\x15A\v\x13\x3\x13\x5\x13\x15D\n\x13\x3\x14\x5\x14"+
		"\x160\n\x14\x3\x14\x3\x14\x3\x15\x5\x15\x165\n\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x5\x15\x16B\n\x15\x3\x15\x3\x15\a\x15\x16F\n\x15\f\x15\xE\x15"+
		"\x172\v\x15\x3\x15\x3\x15\x3\x16\x5\x16\x177\n\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\x17D\n\x16\x3\x16\x3\x16\a\x16\x181\n\x16\f\x16\xE\x16"+
		"\x184\v\x16\x3\x16\x3\x16\x3\x17\x5\x17\x189\n\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x5\x17\x18F\n\x17\x3\x17\x3\x17\a\x17\x193\n\x17\f\x17\xE\x17"+
		"\x196\v\x17\x3\x17\x3\x17\x3\x18\x5\x18\x19B\n\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x19\x5\x19\x1A2\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x1A8"+
		"\n\x19\f\x19\xE\x19\x1AB\v\x19\x3\x19\a\x19\x1AE\n\x19\f\x19\xE\x19\x1B1"+
		"\v\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x5\x1B\x1BA\n"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x1C0\n\x1B\f\x1B\xE\x1B\x1C3\v"+
		"\x1B\x3\x1B\x3\x1B\x3\x1C\x5\x1C\x1C8\n\x1C\x3\x1C\x3\x1C\x5\x1C\x1CC"+
		"\n\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x1D1\n\x1C\x3\x1C\x3\x1C\x3\x1C\x5"+
		"\x1C\x1D6\n\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\a\x1D\x1DD\n\x1D\f"+
		"\x1D\xE\x1D\x1E0\v\x1D\x3\x1E\x5\x1E\x1E3\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1F\x5\x1F\x1E9\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1EF\n\x1F\x3"+
		"\x1F\x3\x1F\x5\x1F\x1F3\n\x1F\x3\x1F\x3\x1F\x3 \x6 \x1F8\n \r \xE \x1F9"+
		"\x3!\x3!\x3!\x3!\x3!\x5!\x201\n!\x3\"\x3\"\x3\"\x5\"\x206\n\"\x3\"\x3"+
		"\"\x3#\x3#\x3#\x5#\x20D\n#\x3#\x3#\x3$\x3$\x3$\a$\x214\n$\f$\xE$\x217"+
		"\v$\x3$\x5$\x21A\n$\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3"+
		"\'\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x5)\x230\n)\x3)\x3)\x5)\x234\n)\x3"+
		")\x3)\x3*\x6*\x239\n*\r*\xE*\x23A\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x244"+
		"\n+\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x3.\x3.\x3/\x3/\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x5\x30\x258\n\x30\x3\x30\x3\x30\x3\x31\x6\x31\x25D"+
		"\n\x31\r\x31\xE\x31\x25E\x3\x32\x3\x32\x5\x32\x263\n\x32\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\a\x33\x26A\n\x33\f\x33\xE\x33\x26D\v\x33\x3\x33"+
		"\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x5\x35\x277\n\x35\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x5\x38\x285\n\x38\x3\x38\x3\x38\x3\x39\x3\x39\x6\x39\x28B"+
		"\n\x39\r\x39\xE\x39\x28C\x3\x39\a\x39\x290\n\x39\f\x39\xE\x39\x293\v\x39"+
		"\x3:\x3:\x3:\x5:\x298\n:\x3;\x3;\x3;\x3;\x3;\a;\x29F\n;\f;\xE;\x2A2\v"+
		";\x3;\x5;\x2A5\n;\x3<\x3<\x3<\x3<\x3<\x5<\x2AC\n<\x3=\x3=\x3=\x3=\x3="+
		"\x5=\x2B3\n=\x3>\x3>\x5>\x2B7\n>\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3"+
		"@\x3\x41\x3\x41\x3\x41\x5\x41\x2C6\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\a\x42\x2CD\n\x42\f\x42\xE\x42\x2D0\v\x42\x3\x42\x5\x42\x2D3\n\x42"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x2DA\n\x43\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x5\x44\x2E1\n\x44\x3\x45\x3\x45\x3\x45\x5\x45\x2E6"+
		"\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3H\x3H"+
		"\x3H\x3H\x3H\x3I\x3I\x3I\x3I\x3J\x3J\x3K\x3K\x3K\x3K\x3K\x3K\x5K\x303"+
		"\nK\x3K\x3K\x3L\x6L\x308\nL\rL\xEL\x309\x3M\x3M\x5M\x30E\nM\x3N\x3N\x3"+
		"N\x3N\x3O\x3O\x3O\x3O\x3P\x3P\x5P\x31A\nP\x3Q\x3Q\x3Q\x3Q\x5Q\x320\nQ"+
		"\x3R\x3R\x3R\x5R\x325\nR\x3S\x3S\x5S\x329\nS\x3T\x3T\x5T\x32D\nT\x3U\x3"+
		"U\x3V\x3V\x3W\x3W\x3X\x3X\x3Y\x3Y\x3Y\x3Z\x3Z\x3Z\x3[\x3[\x3[\x3\\\x3"+
		"\\\x5\\\x342\n\\\x3]\x3]\x3]\x3]\x3^\x3^\x3^\x3^\x3_\x3_\x5_\x34E\n_\x3"+
		"`\x3`\x3`\x3`\x3`\x3\x61\x3\x61\x3\x61\x5\x61\x358\n\x61\x3\x62\x3\x62"+
		"\x3\x62\x3\x62\x3\x62\x3\x62\x5\x62\x360\n\x62\x3\x63\x3\x63\x3\x64\x3"+
		"\x64\x3\x65\x3\x65\x3\x66\x3\x66\x3g\x3g\x3h\x3h\x3i\x3i\x3i\x2\x2j\x2"+
		"\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36"+
		"\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84"+
		"\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8"+
		"\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC"+
		"\xCE\xD0\x2\b\x4\x2\x15\x15\x1C\x1C\x3\x2#$\x4\x2%*Y\\\x3\x2!\"\x4\x2"+
		"qqyz\x3\x2Yg\x37A\x2\xD5\x3\x2\x2\x2\x4\xD8\x3\x2\x2\x2\x6\xE0\x3\x2\x2"+
		"\x2\b\xE8\x3\x2\x2\x2\n\xF1\x3\x2\x2\x2\f\xF6\x3\x2\x2\x2\xE\xFC\x3\x2"+
		"\x2\x2\x10\xFE\x3\x2\x2\x2\x12\x102\x3\x2\x2\x2\x14\x108\x3\x2\x2\x2\x16"+
		"\x10C\x3\x2\x2\x2\x18\x112\x3\x2\x2\x2\x1A\x11A\x3\x2\x2\x2\x1C\x120\x3"+
		"\x2\x2\x2\x1E\x123\x3\x2\x2\x2 \x142\x3\x2\x2\x2\"\x145\x3\x2\x2\x2$\x153"+
		"\x3\x2\x2\x2&\x15F\x3\x2\x2\x2(\x164\x3\x2\x2\x2*\x176\x3\x2\x2\x2,\x188"+
		"\x3\x2\x2\x2.\x19A\x3\x2\x2\x2\x30\x1A1\x3\x2\x2\x2\x32\x1B4\x3\x2\x2"+
		"\x2\x34\x1B9\x3\x2\x2\x2\x36\x1C7\x3\x2\x2\x2\x38\x1D9\x3\x2\x2\x2:\x1E2"+
		"\x3\x2\x2\x2<\x1E8\x3\x2\x2\x2>\x1F7\x3\x2\x2\x2@\x200\x3\x2\x2\x2\x42"+
		"\x202\x3\x2\x2\x2\x44\x209\x3\x2\x2\x2\x46\x219\x3\x2\x2\x2H\x21B\x3\x2"+
		"\x2\x2J\x21F\x3\x2\x2\x2L\x223\x3\x2\x2\x2N\x227\x3\x2\x2\x2P\x22B\x3"+
		"\x2\x2\x2R\x238\x3\x2\x2\x2T\x243\x3\x2\x2\x2V\x245\x3\x2\x2\x2X\x249"+
		"\x3\x2\x2\x2Z\x24F\x3\x2\x2\x2\\\x251\x3\x2\x2\x2^\x253\x3\x2\x2\x2`\x25C"+
		"\x3\x2\x2\x2\x62\x262\x3\x2\x2\x2\x64\x264\x3\x2\x2\x2\x66\x270\x3\x2"+
		"\x2\x2h\x276\x3\x2\x2\x2j\x278\x3\x2\x2\x2l\x27C\x3\x2\x2\x2n\x280\x3"+
		"\x2\x2\x2p\x288\x3\x2\x2\x2r\x297\x3\x2\x2\x2t\x299\x3\x2\x2\x2v\x2A6"+
		"\x3\x2\x2\x2x\x2AD\x3\x2\x2\x2z\x2B6\x3\x2\x2\x2|\x2B8\x3\x2\x2\x2~\x2BD"+
		"\x3\x2\x2\x2\x80\x2C5\x3\x2\x2\x2\x82\x2C7\x3\x2\x2\x2\x84\x2D4\x3\x2"+
		"\x2\x2\x86\x2DB\x3\x2\x2\x2\x88\x2E5\x3\x2\x2\x2\x8A\x2E7\x3\x2\x2\x2"+
		"\x8C\x2EC\x3\x2\x2\x2\x8E\x2F1\x3\x2\x2\x2\x90\x2F6\x3\x2\x2\x2\x92\x2FA"+
		"\x3\x2\x2\x2\x94\x2FC\x3\x2\x2\x2\x96\x307\x3\x2\x2\x2\x98\x30D\x3\x2"+
		"\x2\x2\x9A\x30F\x3\x2\x2\x2\x9C\x313\x3\x2\x2\x2\x9E\x319\x3\x2\x2\x2"+
		"\xA0\x31F\x3\x2\x2\x2\xA2\x324\x3\x2\x2\x2\xA4\x328\x3\x2\x2\x2\xA6\x32C"+
		"\x3\x2\x2\x2\xA8\x32E\x3\x2\x2\x2\xAA\x330\x3\x2\x2\x2\xAC\x332\x3\x2"+
		"\x2\x2\xAE\x334\x3\x2\x2\x2\xB0\x336\x3\x2\x2\x2\xB2\x339\x3\x2\x2\x2"+
		"\xB4\x33C\x3\x2\x2\x2\xB6\x341\x3\x2\x2\x2\xB8\x343\x3\x2\x2\x2\xBA\x347"+
		"\x3\x2\x2\x2\xBC\x34D\x3\x2\x2\x2\xBE\x34F\x3\x2\x2\x2\xC0\x357\x3\x2"+
		"\x2\x2\xC2\x35F\x3\x2\x2\x2\xC4\x361\x3\x2\x2\x2\xC6\x363\x3\x2\x2\x2"+
		"\xC8\x365\x3\x2\x2\x2\xCA\x367\x3\x2\x2\x2\xCC\x369\x3\x2\x2\x2\xCE\x36B"+
		"\x3\x2\x2\x2\xD0\x36D\x3\x2\x2\x2\xD2\xD4\x5\x1E\x10\x2\xD3\xD2\x3\x2"+
		"\x2\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6"+
		"\x3\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD8\xDD\x5\xC0\x61\x2\xD9\xDA\a\x30"+
		"\x2\x2\xDA\xDC\x5\xC0\x61\x2\xDB\xD9\x3\x2\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD"+
		"\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\x5\x3\x2\x2\x2\xDF\xDD\x3\x2"+
		"\x2\x2\xE0\xE5\x5\xC0\x61\x2\xE1\xE2\a\x31\x2\x2\xE2\xE4\x5\xC0\x61\x2"+
		"\xE3\xE1\x3\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3"+
		"\x2\x2\x2\xE6\a\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xED\x5\x4\x3\x2\xE9"+
		"\xEA\a\x31\x2\x2\xEA\xEC\x5\x4\x3\x2\xEB\xE9\x3\x2\x2\x2\xEC\xEF\x3\x2"+
		"\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\t\x3\x2\x2\x2\xEF\xED"+
		"\x3\x2\x2\x2\xF0\xF2\x5\x10\t\x2\xF1\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2\x2"+
		"\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\v\x3\x2\x2\x2\xF5\xF7"+
		"\x5\xE\b\x2\xF6\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2"+
		"\xF8\xF9\x3\x2\x2\x2\xF9\r\x3\x2\x2\x2\xFA\xFD\x5\x10\t\x2\xFB\xFD\x5"+
		"\x12\n\x2\xFC\xFA\x3\x2\x2\x2\xFC\xFB\x3\x2\x2\x2\xFD\xF\x3\x2\x2\x2\xFE"+
		"\xFF\a\x35\x2\x2\xFF\x100\x5\x14\v\x2\x100\x101\a\x36\x2\x2\x101\x11\x3"+
		"\x2\x2\x2\x102\x103\a\x35\x2\x2\x103\x104\a\n\x2\x2\x104\x105\a/\x2\x2"+
		"\x105\x106\x5\x14\v\x2\x106\x107\a\x36\x2\x2\x107\x13\x3\x2\x2\x2\x108"+
		"\x10A\x5\xC0\x61\x2\x109\x10B\x5\x16\f\x2\x10A\x109\x3\x2\x2\x2\x10A\x10B"+
		"\x3\x2\x2\x2\x10B\x15\x3\x2\x2\x2\x10C\x10E\a\x33\x2\x2\x10D\x10F\x5\x18"+
		"\r\x2\x10E\x10D\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2"+
		"\x110\x111\a\x34\x2\x2\x111\x17\x3\x2\x2\x2\x112\x117\x5\x1A\xE\x2\x113"+
		"\x114\a\x31\x2\x2\x114\x116\x5\x1A\xE\x2\x115\x113\x3\x2\x2\x2\x116\x119"+
		"\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x19\x3\x2"+
		"\x2\x2\x119\x117\x3\x2\x2\x2\x11A\x11B\x5\xC0\x61\x2\x11B\x11C\a\x32\x2"+
		"\x2\x11C\x11D\x5\x1C\xF\x2\x11D\x1B\x3\x2\x2\x2\x11E\x121\x5\xBC_\x2\x11F"+
		"\x121\x5\xBE`\x2\x120\x11E\x3\x2\x2\x2\x120\x11F\x3\x2\x2\x2\x121\x1D"+
		"\x3\x2\x2\x2\x122\x124\x5\n\x6\x2\x123\x122\x3\x2\x2\x2\x123\x124\x3\x2"+
		"\x2\x2\x124\x125\x3\x2\x2\x2\x125\x126\a\x3\x2\x2\x126\x127\x5\x4\x3\x2"+
		"\x127\x12B\a\x32\x2\x2\x128\x129\x5\xC0\x61\x2\x129\x12A\a/\x2\x2\x12A"+
		"\x12C\x3\x2\x2\x2\x12B\x128\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D"+
		"\x3\x2\x2\x2\x12D\x12E\x5\xCEh\x2\x12E\x132\a\x37\x2\x2\x12F\x131\x5 "+
		"\x11\x2\x130\x12F\x3\x2\x2\x2\x131\x134\x3\x2\x2\x2\x132\x130\x3\x2\x2"+
		"\x2\x132\x133\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2"+
		"\x135\x136\a\x38\x2\x2\x136\x1F\x3\x2\x2\x2\x137\x143\x5\"\x12\x2\x138"+
		"\x143\x5(\x15\x2\x139\x143\x5*\x16\x2\x13A\x143\x5,\x17\x2\x13B\x143\x5"+
		"\x30\x19\x2\x13C\x143\x5\x34\x1B\x2\x13D\x143\x5<\x1F\x2\x13E\x143\x5"+
		"P)\x2\x13F\x143\x5n\x38\x2\x140\x143\x5\x94K\x2\x141\x143\x5^\x30\x2\x142"+
		"\x137\x3\x2\x2\x2\x142\x138\x3\x2\x2\x2\x142\x139\x3\x2\x2\x2\x142\x13A"+
		"\x3\x2\x2\x2\x142\x13B\x3\x2\x2\x2\x142\x13C\x3\x2\x2\x2\x142\x13D\x3"+
		"\x2\x2\x2\x142\x13E\x3\x2\x2\x2\x142\x13F\x3\x2\x2\x2\x142\x140\x3\x2"+
		"\x2\x2\x142\x141\x3\x2\x2\x2\x143!\x3\x2\x2\x2\x144\x146\x5\n\x6\x2\x145"+
		"\x144\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x148"+
		"\a\x4\x2\x2\x148\x14B\x5\xC0\x61\x2\x149\x14A\a/\x2\x2\x14A\x14C\x5\x4"+
		"\x3\x2\x14B\x149\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14D\x3\x2\x2"+
		"\x2\x14D\x14F\a\x37\x2\x2\x14E\x150\x5$\x13\x2\x14F\x14E\x3\x2\x2\x2\x14F"+
		"\x150\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x152\a\x38\x2\x2\x152#\x3"+
		"\x2\x2\x2\x153\x158\x5&\x14\x2\x154\x155\a\x31\x2\x2\x155\x157\x5&\x14"+
		"\x2\x156\x154\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2"+
		"\x158\x159\x3\x2\x2\x2\x159\x15C\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B"+
		"\x15D\a\x31\x2\x2\x15C\x15B\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D%\x3"+
		"\x2\x2\x2\x15E\x160\x5\n\x6\x2\x15F\x15E\x3\x2\x2\x2\x15F\x160\x3\x2\x2"+
		"\x2\x160\x161\x3\x2\x2\x2\x161\x162\x5\xC0\x61\x2\x162\'\x3\x2\x2\x2\x163"+
		"\x165\x5\n\x6\x2\x164\x163\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x166"+
		"\x3\x2\x2\x2\x166\x167\a\x6\x2\x2\x167\x16A\x5\xC0\x61\x2\x168\x169\a"+
		"/\x2\x2\x169\x16B\x5\x4\x3\x2\x16A\x168\x3\x2\x2\x2\x16A\x16B\x3\x2\x2"+
		"\x2\x16B\x16C\x3\x2\x2\x2\x16C\x170\a\x37\x2\x2\x16D\x16F\x5.\x18\x2\x16E"+
		"\x16D\x3\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x170\x171"+
		"\x3\x2\x2\x2\x171\x173\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173\x174\a\x38"+
		"\x2\x2\x174)\x3\x2\x2\x2\x175\x177\x5\n\x6\x2\x176\x175\x3\x2\x2\x2\x176"+
		"\x177\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179\a\x5\x2\x2\x179\x17C"+
		"\x5\xC0\x61\x2\x17A\x17B\a/\x2\x2\x17B\x17D\x5\x4\x3\x2\x17C\x17A\x3\x2"+
		"\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\x182\a\x37\x2"+
		"\x2\x17F\x181\x5.\x18\x2\x180\x17F\x3\x2\x2\x2\x181\x184\x3\x2\x2\x2\x182"+
		"\x180\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183\x185\x3\x2\x2\x2\x184\x182"+
		"\x3\x2\x2\x2\x185\x186\a\x38\x2\x2\x186+\x3\x2\x2\x2\x187\x189\x5\n\x6"+
		"\x2\x188\x187\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2"+
		"\x18A\x18B\a\x12\x2\x2\x18B\x18E\x5\xC0\x61\x2\x18C\x18D\a/\x2\x2\x18D"+
		"\x18F\x5\x4\x3\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x190"+
		"\x3\x2\x2\x2\x190\x194\a\x37\x2\x2\x191\x193\x5.\x18\x2\x192\x191\x3\x2"+
		"\x2\x2\x193\x196\x3\x2\x2\x2\x194\x192\x3\x2\x2\x2\x194\x195\x3\x2\x2"+
		"\x2\x195\x197\x3\x2\x2\x2\x196\x194\x3\x2\x2\x2\x197\x198\a\x38\x2\x2"+
		"\x198-\x3\x2\x2\x2\x199\x19B\x5\n\x6\x2\x19A\x199\x3\x2\x2\x2\x19A\x19B"+
		"\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19C\x19D\x5\xA0Q\x2\x19D\x19E\x5\xC0"+
		"\x61\x2\x19E\x19F\a.\x2\x2\x19F/\x3\x2\x2\x2\x1A0\x1A2\x5\n\x6\x2\x1A1"+
		"\x1A0\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A4"+
		"\a\x11\x2\x2\x1A4\x1A5\x5\xC0\x61\x2\x1A5\x1A9\a\x37\x2\x2\x1A6\x1A8\x5"+
		"\x32\x1A\x2\x1A7\x1A6\x3\x2\x2\x2\x1A8\x1AB\x3\x2\x2\x2\x1A9\x1A7\x3\x2"+
		"\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA\x1AF\x3\x2\x2\x2\x1AB\x1A9\x3\x2\x2"+
		"\x2\x1AC\x1AE\x5\x36\x1C\x2\x1AD\x1AC\x3\x2\x2\x2\x1AE\x1B1\x3\x2\x2\x2"+
		"\x1AF\x1AD\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B2\x3\x2\x2\x2\x1B1"+
		"\x1AF\x3\x2\x2\x2\x1B2\x1B3\a\x38\x2\x2\x1B3\x31\x3\x2\x2\x2\x1B4\x1B5"+
		"\a\x12\x2\x2\x1B5\x1B6\x5\x4\x3\x2\x1B6\x1B7\a.\x2\x2\x1B7\x33\x3\x2\x2"+
		"\x2\x1B8\x1BA\x5\n\x6\x2\x1B9\x1B8\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA"+
		"\x1BB\x3\x2\x2\x2\x1BB\x1BC\a\a\x2\x2\x1BC\x1BD\x5\xC0\x61\x2\x1BD\x1C1"+
		"\a\x37\x2\x2\x1BE\x1C0\x5\x36\x1C\x2\x1BF\x1BE\x3\x2\x2\x2\x1C0\x1C3\x3"+
		"\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C4\x3\x2"+
		"\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C4\x1C5\a\x38\x2\x2\x1C5\x35\x3\x2\x2\x2"+
		"\x1C6\x1C8\x5\f\a\x2\x1C7\x1C6\x3\x2\x2\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8"+
		"\x1CB\x3\x2\x2\x2\x1C9\x1CC\x5\x9EP\x2\x1CA\x1CC\x5\xAEX\x2\x1CB\x1C9"+
		"\x3\x2\x2\x2\x1CB\x1CA\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CE\x5"+
		"\xC0\x61\x2\x1CE\x1D0\a\x33\x2\x2\x1CF\x1D1\x5\x38\x1D\x2\x1D0\x1CF\x3"+
		"\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D5\a\x34"+
		"\x2\x2\x1D3\x1D4\a\b\x2\x2\x1D4\x1D6\x5\b\x5\x2\x1D5\x1D3\x3\x2\x2\x2"+
		"\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D8\a.\x2\x2\x1D8\x37"+
		"\x3\x2\x2\x2\x1D9\x1DE\x5:\x1E\x2\x1DA\x1DB\a\x31\x2\x2\x1DB\x1DD\x5:"+
		"\x1E\x2\x1DC\x1DA\x3\x2\x2\x2\x1DD\x1E0\x3\x2\x2\x2\x1DE\x1DC\x3\x2\x2"+
		"\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x39\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2\x2\x1E1"+
		"\x1E3\x5\n\x6\x2\x1E2\x1E1\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E4"+
		"\x3\x2\x2\x2\x1E4\x1E5\x5\xA0Q\x2\x1E5\x1E6\x5\xC0\x61\x2\x1E6;\x3\x2"+
		"\x2\x2\x1E7\x1E9\a\x13\x2\x2\x1E8\x1E7\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2"+
		"\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1EB\a\x14\x2\x2\x1EB\x1EE\x5\xC0\x61\x2"+
		"\x1EC\x1ED\a/\x2\x2\x1ED\x1EF\x5\x4\x3\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF"+
		"\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F2\a\x37\x2\x2\x1F1\x1F3\x5"+
		"> \x2\x1F2\x1F1\x3\x2\x2\x2\x1F2\x1F3\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2"+
		"\x1F4\x1F5\a\x38\x2\x2\x1F5=\x3\x2\x2\x2\x1F6\x1F8\x5@!\x2\x1F7\x1F6\x3"+
		"\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1F9\x1FA\x3\x2"+
		"\x2\x2\x1FA?\x3\x2\x2\x2\x1FB\x201\x5\x42\"\x2\x1FC\x201\x5\x44#\x2\x1FD"+
		"\x201\x5J&\x2\x1FE\x201\x5L\'\x2\x1FF\x201\x5N(\x2\x200\x1FB\x3\x2\x2"+
		"\x2\x200\x1FC\x3\x2\x2\x2\x200\x1FD\x3\x2\x2\x2\x200\x1FE\x3\x2\x2\x2"+
		"\x200\x1FF\x3\x2\x2\x2\x201\x41\x3\x2\x2\x2\x202\x203\a\x17\x2\x2\x203"+
		"\x205\x5\x4\x3\x2\x204\x206\x5\xC0\x61\x2\x205\x204\x3\x2\x2\x2\x205\x206"+
		"\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2\x207\x208\x5\x46$\x2\x208\x43\x3\x2"+
		"\x2\x2\x209\x20A\a\x16\x2\x2\x20A\x20C\x5\x4\x3\x2\x20B\x20D\x5\xC0\x61"+
		"\x2\x20C\x20B\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2"+
		"\x20E\x20F\x5\x46$\x2\x20F\x45\x3\x2\x2\x2\x210\x21A\a.\x2\x2\x211\x215"+
		"\a\x37\x2\x2\x212\x214\x5H%\x2\x213\x212\x3\x2\x2\x2\x214\x217\x3\x2\x2"+
		"\x2\x215\x213\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x218\x3\x2\x2\x2"+
		"\x217\x215\x3\x2\x2\x2\x218\x21A\a\x38\x2\x2\x219\x210\x3\x2\x2\x2\x219"+
		"\x211\x3\x2\x2\x2\x21AG\x3\x2\x2\x2\x21B\x21C\a\v\x2\x2\x21C\x21D\x5\x4"+
		"\x3\x2\x21D\x21E\a.\x2\x2\x21EI\x3\x2\x2\x2\x21F\x220\x5\xA0Q\x2\x220"+
		"\x221\x5\xC0\x61\x2\x221\x222\a.\x2\x2\x222K\x3\x2\x2\x2\x223\x224\a\x1A"+
		"\x2\x2\x224\x225\x5\xC0\x61\x2\x225\x226\a.\x2\x2\x226M\x3\x2\x2\x2\x227"+
		"\x228\a\x1B\x2\x2\x228\x229\x5\xC0\x61\x2\x229\x22A\a.\x2\x2\x22AO\x3"+
		"\x2\x2\x2\x22B\x22C\t\x2\x2\x2\x22C\x22F\x5\xC0\x61\x2\x22D\x22E\a/\x2"+
		"\x2\x22E\x230\x5\x4\x3\x2\x22F\x22D\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2"+
		"\x230\x231\x3\x2\x2\x2\x231\x233\a\x37\x2\x2\x232\x234\x5R*\x2\x233\x232"+
		"\x3\x2\x2\x2\x233\x234\x3\x2\x2\x2\x234\x235\x3\x2\x2\x2\x235\x236\a\x38"+
		"\x2\x2\x236Q\x3\x2\x2\x2\x237\x239\x5T+\x2\x238\x237\x3\x2\x2\x2\x239"+
		"\x23A\x3\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23BS\x3"+
		"\x2\x2\x2\x23C\x244\x5\x42\"\x2\x23D\x244\x5\x44#\x2\x23E\x244\x5J&\x2"+
		"\x23F\x244\x5L\'\x2\x240\x244\x5N(\x2\x241\x244\x5V,\x2\x242\x244\x5X"+
		"-\x2\x243\x23C\x3\x2\x2\x2\x243\x23D\x3\x2\x2\x2\x243\x23E\x3\x2\x2\x2"+
		"\x243\x23F\x3\x2\x2\x2\x243\x240\x3\x2\x2\x2\x243\x241\x3\x2\x2\x2\x243"+
		"\x242\x3\x2\x2\x2\x244U\x3\x2\x2\x2\x245\x246\a\x14\x2\x2\x246\x247\x5"+
		"\x4\x3\x2\x247\x248\a.\x2\x2\x248W\x3\x2\x2\x2\x249\x24A\a\x18\x2\x2\x24A"+
		"\x24B\x5Z.\x2\x24B\x24C\a\x19\x2\x2\x24C\x24D\x5\\/\x2\x24D\x24E\a.\x2"+
		"\x2\x24EY\x3\x2\x2\x2\x24F\x250\x5\x4\x3\x2\x250[\x3\x2\x2\x2\x251\x252"+
		"\x5\x4\x3\x2\x252]\x3\x2\x2\x2\x253\x254\a\x1D\x2\x2\x254\x255\x5\xC0"+
		"\x61\x2\x255\x257\a\x37\x2\x2\x256\x258\x5`\x31\x2\x257\x256\x3\x2\x2"+
		"\x2\x257\x258\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25A\a\x38\x2\x2"+
		"\x25A_\x3\x2\x2\x2\x25B\x25D\x5\x62\x32\x2\x25C\x25B\x3\x2\x2\x2\x25D"+
		"\x25E\x3\x2\x2\x2\x25E\x25C\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x61"+
		"\x3\x2\x2\x2\x260\x263\x5\x64\x33\x2\x261\x263\x5X-\x2\x262\x260\x3\x2"+
		"\x2\x2\x262\x261\x3\x2\x2\x2\x263\x63\x3\x2\x2\x2\x264\x265\a\x1E\x2\x2"+
		"\x265\x266\x5\xC0\x61\x2\x266\x267\a\x37\x2\x2\x267\x26B\x5\x66\x34\x2"+
		"\x268\x26A\x5h\x35\x2\x269\x268\x3\x2\x2\x2\x26A\x26D\x3\x2\x2\x2\x26B"+
		"\x269\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2\x26C\x26E\x3\x2\x2\x2\x26D\x26B"+
		"\x3\x2\x2\x2\x26E\x26F\a\x38\x2\x2\x26F\x65\x3\x2\x2\x2\x270\x271\a\x1F"+
		"\x2\x2\x271\x272\x5\xC0\x61\x2\x272\x273\a.\x2\x2\x273g\x3\x2\x2\x2\x274"+
		"\x277\x5j\x36\x2\x275\x277\x5l\x37\x2\x276\x274\x3\x2\x2\x2\x276\x275"+
		"\x3\x2\x2\x2\x277i\x3\x2\x2\x2\x278\x279\a\x1C\x2\x2\x279\x27A\x5\x4\x3"+
		"\x2\x27A\x27B\a.\x2\x2\x27Bk\x3\x2\x2\x2\x27C\x27D\a\x11\x2\x2\x27D\x27E"+
		"\x5\x4\x3\x2\x27E\x27F\a.\x2\x2\x27Fm\x3\x2\x2\x2\x280\x281\a\v\x2\x2"+
		"\x281\x282\x5\xC0\x61\x2\x282\x284\a\x37\x2\x2\x283\x285\x5p\x39\x2\x284"+
		"\x283\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286\x287"+
		"\a\x38\x2\x2\x287o\x3\x2\x2\x2\x288\x28A\x5r:\x2\x289\x28B\x5\x80\x41"+
		"\x2\x28A\x289\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x28A\x3\x2\x2\x2"+
		"\x28C\x28D\x3\x2\x2\x2\x28D\x291\x3\x2\x2\x2\x28E\x290\x5\x90I\x2\x28F"+
		"\x28E\x3\x2\x2\x2\x290\x293\x3\x2\x2\x2\x291\x28F\x3\x2\x2\x2\x291\x292"+
		"\x3\x2\x2\x2\x292q\x3\x2\x2\x2\x293\x291\x3\x2\x2\x2\x294\x298\x5t;\x2"+
		"\x295\x298\x5v<\x2\x296\x298\x5x=\x2\x297\x294\x3\x2\x2\x2\x297\x295\x3"+
		"\x2\x2\x2\x297\x296\x3\x2\x2\x2\x298s\x3\x2\x2\x2\x299\x29A\a\f\x2\x2"+
		"\x29A\x2A4\a\x61\x2\x2\x29B\x2A5\a.\x2\x2\x29C\x2A0\a\x37\x2\x2\x29D\x29F"+
		"\x5z>\x2\x29E\x29D\x3\x2\x2\x2\x29F\x2A2\x3\x2\x2\x2\x2A0\x29E\x3\x2\x2"+
		"\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1\x2A3\x3\x2\x2\x2\x2A2\x2A0\x3\x2\x2\x2"+
		"\x2A3\x2A5\a\x38\x2\x2\x2A4\x29B\x3\x2\x2\x2\x2A4\x29C\x3\x2\x2\x2\x2A5"+
		"u\x3\x2\x2\x2\x2A6\x2A7\a\f\x2\x2\x2A7\x2AB\a\x62\x2\x2\x2A8\x2AC\a.\x2"+
		"\x2\x2A9\x2AA\a\x37\x2\x2\x2AA\x2AC\a\x38\x2\x2\x2AB\x2A8\x3\x2\x2\x2"+
		"\x2AB\x2A9\x3\x2\x2\x2\x2ACw\x3\x2\x2\x2\x2AD\x2AE\a\f\x2\x2\x2AE\x2B2"+
		"\a\x63\x2\x2\x2AF\x2B3\a.\x2\x2\x2B0\x2B1\a\x37\x2\x2\x2B1\x2B3\a\x38"+
		"\x2\x2\x2B2\x2AF\x3\x2\x2\x2\x2B2\x2B0\x3\x2\x2\x2\x2B3y\x3\x2\x2\x2\x2B4"+
		"\x2B7\x5|?\x2\x2B5\x2B7\x5~@\x2\x2B6\x2B4\x3\x2\x2\x2\x2B6\x2B5\x3\x2"+
		"\x2\x2\x2B7{\x3\x2\x2\x2\x2B8\x2B9\a`\x2\x2\x2B9\x2BA\a\x32\x2\x2\x2BA"+
		"\x2BB\x5\xC6\x64\x2\x2BB\x2BC\a.\x2\x2\x2BC}\x3\x2\x2\x2\x2BD\x2BE\ag"+
		"\x2\x2\x2BE\x2BF\a\x32\x2\x2\x2BF\x2C0\x5\xC6\x64\x2\x2C0\x2C1\a.\x2\x2"+
		"\x2C1\x7F\x3\x2\x2\x2\x2C2\x2C6\x5\x82\x42\x2\x2C3\x2C6\x5\x84\x43\x2"+
		"\x2C4\x2C6\x5\x86\x44\x2\x2C5\x2C2\x3\x2\x2\x2\x2C5\x2C3\x3\x2\x2\x2\x2C5"+
		"\x2C4\x3\x2\x2\x2\x2C6\x81\x3\x2\x2\x2\x2C7\x2C8\a\r\x2\x2\x2C8\x2D2\a"+
		"\x64\x2\x2\x2C9\x2D3\a.\x2\x2\x2CA\x2CE\a\x37\x2\x2\x2CB\x2CD\x5\x88\x45"+
		"\x2\x2CC\x2CB\x3\x2\x2\x2\x2CD\x2D0\x3\x2\x2\x2\x2CE\x2CC\x3\x2\x2\x2"+
		"\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2D1\x3\x2\x2\x2\x2D0\x2CE\x3\x2\x2\x2\x2D1"+
		"\x2D3\a\x38\x2\x2\x2D2\x2C9\x3\x2\x2\x2\x2D2\x2CA\x3\x2\x2\x2\x2D3\x83"+
		"\x3\x2\x2\x2\x2D4\x2D5\a\r\x2\x2\x2D5\x2D9\a\x65\x2\x2\x2D6\x2DA\a.\x2"+
		"\x2\x2D7\x2D8\a\x37\x2\x2\x2D8\x2DA\a\x38\x2\x2\x2D9\x2D6\x3\x2\x2\x2"+
		"\x2D9\x2D7\x3\x2\x2\x2\x2DA\x85\x3\x2\x2\x2\x2DB\x2DC\a\r\x2\x2\x2DC\x2E0"+
		"\a\x66\x2\x2\x2DD\x2E1\a.\x2\x2\x2DE\x2DF\a\x37\x2\x2\x2DF\x2E1\a\x38"+
		"\x2\x2\x2E0\x2DD\x3\x2\x2\x2\x2E0\x2DE\x3\x2\x2\x2\x2E1\x87\x3\x2\x2\x2"+
		"\x2E2\x2E6\x5\x8A\x46\x2\x2E3\x2E6\x5\x8CG\x2\x2E4\x2E6\x5\x8EH\x2\x2E5"+
		"\x2E2\x3\x2\x2\x2\x2E5\x2E3\x3\x2\x2\x2\x2E5\x2E4\x3\x2\x2\x2\x2E6\x89"+
		"\x3\x2\x2\x2\x2E7\x2E8\a]\x2\x2\x2E8\x2E9\a\x32\x2\x2\x2E9\x2EA\x5\xC0"+
		"\x61\x2\x2EA\x2EB\a.\x2\x2\x2EB\x8B\x3\x2\x2\x2\x2EC\x2ED\a_\x2\x2\x2ED"+
		"\x2EE\a\x32\x2\x2\x2EE\x2EF\x5\xC6\x64\x2\x2EF\x2F0\a.\x2\x2\x2F0\x8D"+
		"\x3\x2\x2\x2\x2F1\x2F2\a^\x2\x2\x2F2\x2F3\a\x32\x2\x2\x2F3\x2F4\x5\xC0"+
		"\x61\x2\x2F4\x2F5\a.\x2\x2\x2F5\x8F\x3\x2\x2\x2\x2F6\x2F7\a\xE\x2\x2\x2F7"+
		"\x2F8\x5\x92J\x2\x2F8\x2F9\a.\x2\x2\x2F9\x91\x3\x2\x2\x2\x2FA\x2FB\x5"+
		"\xC0\x61\x2\x2FB\x93\x3\x2\x2\x2\x2FC\x2FD\a\xF\x2\x2\x2FD\x2FE\x5\xC0"+
		"\x61\x2\x2FE\x2FF\a/\x2\x2\x2FF\x300\x5\x4\x3\x2\x300\x302\a\x37\x2\x2"+
		"\x301\x303\x5\x96L\x2\x302\x301\x3\x2\x2\x2\x302\x303\x3\x2\x2\x2\x303"+
		"\x304\x3\x2\x2\x2\x304\x305\a\x38\x2\x2\x305\x95\x3\x2\x2\x2\x306\x308"+
		"\x5\x98M\x2\x307\x306\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x307\x3\x2"+
		"\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x97\x3\x2\x2\x2\x30B\x30E\x5\x9AN\x2"+
		"\x30C\x30E\x5\x9CO\x2\x30D\x30B\x3\x2\x2\x2\x30D\x30C\x3\x2\x2\x2\x30E"+
		"\x99\x3\x2\x2\x2\x30F\x310\a\v\x2\x2\x310\x311\x5\x4\x3\x2\x311\x312\a"+
		".\x2\x2\x312\x9B\x3\x2\x2\x2\x313\x314\a\x10\x2\x2\x314\x315\x5\xCEh\x2"+
		"\x315\x316\a.\x2\x2\x316\x9D\x3\x2\x2\x2\x317\x31A\x5\xA0Q\x2\x318\x31A"+
		"\x5\xACW\x2\x319\x317\x3\x2\x2\x2\x319\x318\x3\x2\x2\x2\x31A\x9F\x3\x2"+
		"\x2\x2\x31B\x320\x5\xB4[\x2\x31C\x320\x5\xB6\\\x2\x31D\x320\x5\xA2R\x2"+
		"\x31E\x320\x5\xA4S\x2\x31F\x31B\x3\x2\x2\x2\x31F\x31C\x3\x2\x2\x2\x31F"+
		"\x31D\x3\x2\x2\x2\x31F\x31E\x3\x2\x2\x2\x320\xA1\x3\x2\x2\x2\x321\x325"+
		"\x5\xAAV\x2\x322\x325\x5\xA8U\x2\x323\x325\x5\x4\x3\x2\x324\x321\x3\x2"+
		"\x2\x2\x324\x322\x3\x2\x2\x2\x324\x323\x3\x2\x2\x2\x325\xA3\x3\x2\x2\x2"+
		"\x326\x329\x5\xB0Y\x2\x327\x329\x5\xB2Z\x2\x328\x326\x3\x2\x2\x2\x328"+
		"\x327\x3\x2\x2\x2\x329\xA5\x3\x2\x2\x2\x32A\x32D\x5\xA8U\x2\x32B\x32D"+
		"\x5\x4\x3\x2\x32C\x32A\x3\x2\x2\x2\x32C\x32B\x3\x2\x2\x2\x32D\xA7\x3\x2"+
		"\x2\x2\x32E\x32F\t\x3\x2\x2\x32F\xA9\x3\x2\x2\x2\x330\x331\t\x4\x2\x2"+
		"\x331\xAB\x3\x2\x2\x2\x332\x333\a,\x2\x2\x333\xAD\x3\x2\x2\x2\x334\x335"+
		"\a\t\x2\x2\x335\xAF\x3\x2\x2\x2\x336\x337\x5\xAAV\x2\x337\x338\a;\x2\x2"+
		"\x338\xB1\x3\x2\x2\x2\x339\x33A\x5\xA6T\x2\x33A\x33B\aG\x2\x2\x33B\xB3"+
		"\x3\x2\x2\x2\x33C\x33D\x5\xB6\\\x2\x33D\x33E\aG\x2\x2\x33E\xB5\x3\x2\x2"+
		"\x2\x33F\x342\x5\xB8]\x2\x340\x342\x5\xBA^\x2\x341\x33F\x3\x2\x2\x2\x341"+
		"\x340\x3\x2\x2\x2\x342\xB7\x3\x2\x2\x2\x343\x344\x5\xA2R\x2\x344\x345"+
		"\a\x35\x2\x2\x345\x346\a\x36\x2\x2\x346\xB9\x3\x2\x2\x2\x347\x348\x5\xA4"+
		"S\x2\x348\x349\a\x35\x2\x2\x349\x34A\a\x36\x2\x2\x34A\xBB\x3\x2\x2\x2"+
		"\x34B\x34E\x5\xC2\x62\x2\x34C\x34E\x5\xC0\x61\x2\x34D\x34B\x3\x2\x2\x2"+
		"\x34D\x34C\x3\x2\x2\x2\x34E\xBD\x3\x2\x2\x2\x34F\x350\a-\x2\x2\x350\x351"+
		"\a\x33\x2\x2\x351\x352\x5\x9EP\x2\x352\x353\a\x34\x2\x2\x353\xBF\x3\x2"+
		"\x2\x2\x354\x358\ah\x2\x2\x355\x358\ai\x2\x2\x356\x358\x5\xD0i\x2\x357"+
		"\x354\x3\x2\x2\x2\x357\x355\x3\x2\x2\x2\x357\x356\x3\x2\x2\x2\x358\xC1"+
		"\x3\x2\x2\x2\x359\x360\x5\xC4\x63\x2\x35A\x360\x5\xC6\x64\x2\x35B\x360"+
		"\x5\xC8\x65\x2\x35C\x360\x5\xCA\x66\x2\x35D\x360\x5\xCCg\x2\x35E\x360"+
		"\x5\xCEh\x2\x35F\x359\x3\x2\x2\x2\x35F\x35A\x3\x2\x2\x2\x35F\x35B\x3\x2"+
		"\x2\x2\x35F\x35C\x3\x2\x2\x2\x35F\x35D\x3\x2\x2\x2\x35F\x35E\x3\x2\x2"+
		"\x2\x360\xC3\x3\x2\x2\x2\x361\x362\a \x2\x2\x362\xC5\x3\x2\x2\x2\x363"+
		"\x364\t\x5\x2\x2\x364\xC7\x3\x2\x2\x2\x365\x366\aj\x2\x2\x366\xC9\x3\x2"+
		"\x2\x2\x367\x368\ak\x2\x2\x368\xCB\x3\x2\x2\x2\x369\x36A\al\x2\x2\x36A"+
		"\xCD\x3\x2\x2\x2\x36B\x36C\t\x6\x2\x2\x36C\xCF\x3\x2\x2\x2\x36D\x36E\t"+
		"\a\x2\x2\x36E\xD1\x3\x2\x2\x2Y\xD5\xDD\xE5\xED\xF3\xF8\xFC\x10A\x10E\x117"+
		"\x120\x123\x12B\x132\x142\x145\x14B\x14F\x158\x15C\x15F\x164\x16A\x170"+
		"\x176\x17C\x182\x188\x18E\x194\x19A\x1A1\x1A9\x1AF\x1B9\x1C1\x1C7\x1CB"+
		"\x1D0\x1D5\x1DE\x1E2\x1E8\x1EE\x1F2\x1F9\x200\x205\x20C\x215\x219\x22F"+
		"\x233\x23A\x243\x257\x25E\x262\x26B\x276\x284\x28C\x291\x297\x2A0\x2A4"+
		"\x2AB\x2B2\x2B6\x2C5\x2CE\x2D2\x2D9\x2E0\x2E5\x302\x309\x30D\x319\x31F"+
		"\x324\x328\x32C\x341\x34D\x357\x35F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Soal
