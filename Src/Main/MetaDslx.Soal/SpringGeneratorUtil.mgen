namespace MetaDslx.Soal;
generator SpringGeneratorUtil for object;



properties Properties
	string entityPackage = "entity";
	string repositoryPackage = "repository";
	string exceptionPackage = "exception";
	string interfacePackage = "interfaces";
	string enumPackage = "enums";
	string serviceFacadePackage = "facade";
	string controllerPackage = "controller";
end properties



template GenerateGetter(Property prop)
^
public [prop.Type.GetJavaName()] get[prop.Name.ToString().ToPascalCase()]() {
	return this.[prop.Name.ToString().ToCamelCase()];
}
end template



template GenerateSetter(Property prop)
^
public void set[prop.Name.ToString().ToPascalCase()]([prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()]) {
	this.[prop.Name.ToString().ToCamelCase()] = [prop.Name.ToString().ToCamelCase()];
}
end template



template GenerateImports(Declaration declaration)
[GenerateImports(declaration, true)]
end template



template GenerateImports(Declaration declaration, bool reposNeeded)
	[if (declaration.GetImports().Any())]
		[loop (declaration->import:GetImports())]
			[if ( !(import.Contains("repo") && reposNeeded==false ))]
[import]
			[end if]
		[end loop]
^
	[end if]
end template



template GeneratePomStart()
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

end template



template GeneratePomDependency(string group, string artifact, string version)
<dependency>
    <groupId>[group]</groupId>
    <artifactId>[artifact]</artifactId>
    <version>[version]</version>
</dependency>
end template



function string GetParameterList(Operation op)
    string result = "";
    loop (op->param:Parameters; string delimiter = ""; delimiter = ", ")
        result = result + delimiter + param.Type.GetJavaName() + " " + param.Name.ToString().ToCamelCase();
    end loop
    return result;
end function



function string GetParameterNameList(Operation op)
    string result = "";
    loop (op->param:Parameters; string delimiter = ""; delimiter = ", ")
        result = result + delimiter + param.Name.ToString().ToCamelCase();
    end loop
    return result;
end function



function string GetExceptionList(Operation op)
    string result = "";
    loop (op->exc:Exceptions; string delimiter = ""; delimiter = ", ")
        result = result + delimiter + exc.GetJavaName();
    end loop
    return result;
end function



function string GetPropertyList(Struct sType)
    string result = "";
    loop (sType->p:Properties; string delimiter = ""; delimiter = ", ")
        result = result + delimiter + p.Type.GetJavaName() + " " + p.Name.ToString().ToCamelCase();
    end loop
    return result;
end function



function int GetNumberOfFieldWithIdSuffix(Struct sType)
	int result = 0;
	loop (sType->p:Properties)
		if (p.Name.ToString().EndsWith("Id"))
			result++;
		end if
    end loop
    return result;
end function



function string GetPackage(Declaration d)
	return d.Namespace.FullName.ToLower();
end function



function string GetBindingType(Reference reference)
	Binding binding = reference.Binding;
	if (binding == null)
		return "";
	end if
	if (binding.Transport is RestTransportBindingElement)
		return "Rest";
	end if
	if (binding.Transport is WebSocketTransportBindingElement)
		return "WebSocket";
	end if
	loop (binding->encoding:Encodings)
		if (encoding is SoapEncodingBindingElement)
			return "WebService";
		end if
	end loop
	return "";
end function
