namespace MetaDslx.Soal;
generator SpringGenerator for object;

using generator XsdGenerator;

properties Properties
	bool SingleFileWsdl = false;
	bool SeparateXsdWsdl = false;
end properties

template Generate(Namespace ns)

	[loop(ins:ns.GetImportedNamespaces())]
	[end loop]


end template


template GenerateEntity(StructuredType sType)
package [sType.Namespace.FullName].entity
^
import javax.persistence.*;
^
	[if (!(sType is Exception))] //TODO is entity?
@Entity
public class [sType.Name] {
	[else]
public class [sType.Name] extends Exception {
	[end if]

[if (!(sType is Exception))]
	^
	@Id
	@GeneratedValue
	private Long [sType.Name.ToString().ToCamelCase()]Id;
[end if]

[loop (sType->prop:Properties)]
	^
	private [prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()];
[end loop]

[if (sType is Exception)]
	^
	public [sType.Name]([GetPropertyList(sType)]) {
[loop (sType->prop:Properties)]
		this.[prop.Name.ToString().ToCamelCase()] = [prop.Name.ToString().ToCamelCase()];
[end loop]
	}
[end if]



[if (sType is Struct)]
	^
		[if (hasloop (sType->id:Properties where id.Name.EndsWith("Id")))]
			[loop (sType->id:Properties where id.Name.EndsWith("Id"))]
	public [id.Type.GetJavaName()] get[id.Name.ToString().ToPascalCase()]() {
		return this.[id.Name.ToString().ToCamelCase()];
	}
	^
	public void set[id.Name.ToString().ToPascalCase()]([id.Type.GetJavaName()] [id.Name.ToString().ToCamelCase()]) {
		this.[id.Name.ToString().ToCamelCase()] = [id.Name.ToString().ToCamelCase()];
	}
			[end loop]
		[else]
	public Long get[sType.Name.ToString().ToPascalCase()]Id() {
		return this.[sType.Name.ToString().ToCamelCase()]Id;
	}

	^
	public void set[sType.Name.ToString().ToPascalCase()]Id(Long [sType.Name.ToString().ToCamelCase()]Id) {
		this.[sType.Name.ToString().ToCamelCase()]Id = [sType.Name.ToString().ToCamelCase()]Id;
	}
		[end if]
[end if]


[loop (sType->prop:Properties where !prop.Name.EndsWith("Id"))]
	^
	public [prop.Type.GetJavaName()] get[prop.Name.ToString().ToPascalCase()]() {
		return this.[prop.Name.ToString().ToCamelCase()];
	}
		[if (sType is Struct)]
	^
	public void set[prop.Name.ToString().ToPascalCase()]([prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()]) {
		this.[prop.Name.ToString().ToCamelCase()] = [prop.Name.ToString().ToCamelCase()];
	}
		[end if]
[end loop]

}
end template

function string GetPropertyList(StructuredType sType)
    string result = "";
    loop (sType->p:Properties; string delimiter = ""; delimiter = ", ")
        result = result + delimiter + p.Type.GetJavaName() + " " + p.Name.ToString().ToCamelCase();
    end loop
    return result;
end function


template GenerateWsdlAbstractPart(Namespace ns)
[loop(ns.Declarations->intf:typeof(Interface))]
[GenerateMessages(intf)]
[end loop]
[GenerateFaultMessages(ns)]
[loop(ns.Declarations->intf:typeof(Interface))]
[GeneratePortType(intf)]
[end loop]
end template

template GenerateWsdlAbstractPart(Interface intf)
[GenerateMessages(intf)]
[GenerateFaultMessages(intf)]
[GeneratePortType(intf)]
end template

template GenerateMessages(Interface intf)
[loop(intf.Operations->op:typeof(Operation))]
^
<wsdl:message name="[intf.Name]_[op.Name]_InputMessage">
	<wsdl:part name="parameters" element="[intf.Namespace.Prefix]:[op.Name]"/>
</wsdl:message>
[if(!op.IsOneway)]
^
<wsdl:message name="[intf.Name]_[op.Name]_OutputMessage">
	<wsdl:part name="parameters" element="[intf.Namespace.Prefix]:[op.Name]Response"/>
</wsdl:message>
[end if]
[end loop]
end template

template GenerateFaultMessages(Namespace ns)
[loop(ex:ns.GetInterfaceExceptions())]
^
<wsdl:message name="[ex.Name]_FaultMessage">
	<wsdl:part name="fault" element="[ex.Namespace.Prefix]:[ex.Name]"/>
</wsdl:message>
[end loop]
end template

template GenerateFaultMessages(Interface intf)
[loop(ex:intf.GetInterfaceExceptions())]
^
<wsdl:message name="[ex.Name]_FaultMessage">
	<wsdl:part name="fault" element="[ex.Namespace.Prefix]:[ex.Name]"/>
</wsdl:message>
[end loop]
end template

template GeneratePortType(Interface intf)
^
<wsdl:portType name="[intf.Name]">
	[GenerateOperations(intf)]
</wsdl:portType>
end template

template GenerateOperations(Interface intf)
[loop(intf.Operations->op:typeof(Operation))]
<wsdl:operation name="[op.Name]">
	<wsdl:input wsaw:action="[op.Interface.Namespace.UriWithSlash() + op.Interface.Name + "/" + op.Name]" message="[op.Interface.Namespace.Prefix]:[op.Interface.Name]_[op.Name]_InputMessage"/>
[if(!op.IsOneway)]
	<wsdl:output wsaw:action="[op.Interface.Namespace.UriWithSlash() + op.Interface.Name + "/" + op.Name + "Response"]" message="[op.Interface.Namespace.Prefix]:[op.Interface.Name]_[op.Name]_OutputMessage"/>
	[loop(ex:op.Exceptions)]
	<wsdl:fault wsaw:action="[op.Interface.Namespace.UriWithSlash() + op.Interface.Name + "/" + op.Name + "Fault/" + ex.Name]" message="[op.Interface.Namespace.Prefix]:[ex.Name]_FaultMessage" name="[ex.Name]"/>
	[end loop]
[end if]
</wsdl:operation>
[end loop]
end template

template GenerateWsdlBindingPart(Namespace ns)
[loop(ns.Declarations->endp:typeof(Endpoint))]
[GenerateWsdlBinding(endp)]
[end loop]
end template

template GenerateWsdlBinding(Endpoint endp)
^
[string soapPrefix = endp.Binding.GetSoapPrefix()]
<wsdl:binding name="[endp.Interface.Name]_[endp.Binding.Name]_Binding" type="[endp.Interface.Namespace.Prefix]:[endp.Interface.Name]">
	[if(endp.Binding.HasPolicy())]
	<wsp:PolicyReference URI="#[endp.Binding.Name]_Policy"/>
	[end if]
	[if(soapPrefix != null)]
		[if(endp.Binding.Transport is HttpTransportBindingElement)]
	<[soapPrefix]:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		[else]
	<[soapPrefix]:binding style="document"/>
		[end if]
	[end if]
	[loop(op:endp.Interface.Operations)]
	<wsdl:operation name="[op.Name]">
		[if(soapPrefix != null)]
		<[soapPrefix]:operation style="document" soapAction="[op.Interface.Namespace.UriWithSlash() + op.Interface.Name + "/" + op.Name]"/>
		[end if]
		<wsdl:input>
		[if(endp.Binding.HasOperationPolicy())]
			<wsp:PolicyReference URI="#[endp.Binding.Name]_Input_Policy"/>
		[end if]
		[if(soapPrefix != null)]
			<[soapPrefix]:body use="literal"/>
		[end if]
		</wsdl:input>
		[if(!op.IsOneway)]
		<wsdl:output>
			[if(endp.Binding.HasOperationPolicy())]
			<wsp:PolicyReference URI="#[endp.Binding.Name]_Output_Policy"/>
			[end if]
			[if(soapPrefix != null)]
			<[soapPrefix]:body use="literal"/>
			[end if]
		</wsdl:output>
			[loop(ex:op.Exceptions)]
		<wsdl:fault name="[ex.Name]">
			[if(soapPrefix != null)]
			<[soapPrefix]:fault name="[ex.Name]" use="literal"/>
			[end if]
		</wsdl:fault>
			[end loop]
		[end if]
	</wsdl:operation>
	[end loop]
</wsdl:binding>
end template

template GenerateWsdlEndpointPart(Namespace ns)
[loop(ns.Declarations->endp:typeof(Endpoint))]
[GenerateWsdlEndpoint(endp)]
[end loop]
end template

template GenerateWsdlEndpoint(Endpoint endp)
^
[string soapPrefix = endp.Binding.GetSoapPrefix()]
<wsdl:service name="[endp.Name]">
	<wsdl:port name="[endp.Interface.Name]_[endp.Binding.Name]_Port" binding="[endp.Namespace.Prefix]:[endp.Interface.Name]_[endp.Binding.Name]_Binding">
	[if(soapPrefix != null)]
		<[soapPrefix]:address location="[endp.Address]"/>
	[end if]
	</wsdl:port>
</wsdl:service>
end template



template GenerateWsdlPoliciesPart(Namespace ns)
[loop(ns.Declarations->binding:typeof(Binding))]
[GenerateWsdlPolicy(binding)]
[end loop]
end template

template GenerateWsdlPolicy(Binding binding)
[if(binding.HasPolicy())]
^
<wsp:Policy wsu:Id="[binding.Name]_Policy">
	[GenerateHttpsPolicy(binding)]
	[GenerateMtomPolicy(binding)]
	[GenerateAddressingPolicy(binding)]
</wsp:Policy>
[end if]
end template

template GenerateHttpsPolicy(Binding binding)
[if(binding.Transport is HttpTransportBindingElement && ((HttpTransportBindingElement)binding.Transport).Ssl)]
<sp:TransportBinding>
	<wsp:Policy>
		<sp:TransportToken>
			<wsp:Policy>
			[if(((HttpTransportBindingElement)binding.Transport).ClientAuthentication)]
				<sp:HttpsToken RequireClientCertificate="true"/>
			[else]
				<sp:HttpsToken RequireClientCertificate="false"/>
			[end if]
			</wsp:Policy>
		</sp:TransportToken>
		<sp:AlgorithmSuite>
			<wsp:Policy>
				<sp:Basic256/>
			</wsp:Policy>
		</sp:AlgorithmSuite>
		<sp:Layout>
			<wsp:Policy>
				<sp:Strict/>
			</wsp:Policy>
		</sp:Layout> 
	</wsp:Policy>
</sp:TransportBinding>
[end if]
end template

template GenerateMtomPolicy(Binding binding)
[if(hasloop(binding->Encodings->enc:typeof(SoapEncodingBindingElement) where enc.Mtom))]
<wsoma:OptimizedMimeSerialization/>
[end if]
end template

template GenerateAddressingPolicy(Binding binding)
[if(hasloop(binding->Protocols->typeof(WsAddressingBindingElement)))]
<wsam:Addressing/>
[end if]
end template
