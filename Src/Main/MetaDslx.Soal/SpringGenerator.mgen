namespace MetaDslx.Soal;
generator SpringGenerator for object;

using generator XsdGenerator;

properties Properties
	bool SingleFileWsdl = false;
	bool SeparateXsdWsdl = false;
end properties

template GenerateInterface(Interface iface)
[GetPackageRow(iface)].interface;
^
public interface [iface.Name] {
[loop (iface->op:Operations)]
	[op.ReturnType.GetJavaName()] [op.Name]([GetParameterList(op)]);
[end loop]
}
end template

template GenerateEnum(Enum myEnum)
[GetPackageRow(myEnum)].enum;
^
public enum [myEnum.Name] {
[loop (myEnum->literal:EnumLiterals; string delimiter=""; delimiter=", ")]
	[delimiter][literal]
[end loop]
}
end template

template GenerateEntity(StructuredType sType)
[GetPackageRow(sType)].entity;
^
	[if (sType is Entity)] 
import javax.persistence.*;
^
@Entity
	[end if]
public class [sType.Name] {

[int ids = GetNumberOfFieldWithIdSuffix(sType)]
[if (ids != 1)]
	^
		[if (sType is Entity)]
	@Id
	@GeneratedValue
		[end if]
	private Long [sType.Name.ToString().ToCamelCase()]Id;
[end if]

[loop (sType->prop:Properties)]
	^
		[if (sType is Entity && ids == 1 && prop.Name.ToString().EndsWith("Id"))]
	@Id
	@GeneratedValue
		[end if]
	private [prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()];
[end loop]


	^
[if (ids == 1)]
		[loop (sType->id:Properties where id.Name.EndsWith("Id"))]
	public [id.Type.GetJavaName()] get[id.Name.ToString().ToPascalCase()]() {
		return this.[id.Name.ToString().ToCamelCase()];
	}
	^
	public void set[id.Name.ToString().ToPascalCase()]([id.Type.GetJavaName()] [id.Name.ToString().ToCamelCase()]) {
		this.[id.Name.ToString().ToCamelCase()] = [id.Name.ToString().ToCamelCase()];
	}
		[end loop]
[else]
	public Long get[sType.Name.ToString().ToPascalCase()]Id() {
		return this.[sType.Name.ToString().ToCamelCase()]Id;
	}

	^
	public void set[sType.Name.ToString().ToPascalCase()]Id(Long [sType.Name.ToString().ToCamelCase()]Id) {
		this.[sType.Name.ToString().ToCamelCase()]Id = [sType.Name.ToString().ToCamelCase()]Id;
	}
[end if]

[loop (sType->prop:Properties where !prop.Name.EndsWith("Id"))]
	[GenerateGetter(prop)]
	[GenerateSetter(prop)]
[end loop]

}
end template

template GenerateException(Exception ex)
[GetPackageRow(ex)].exception;
^
public class [ex.Name] extends Exception {

[loop (ex->prop:Properties)]
	^
	private [prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()];
[end loop]

	^
	public [ex.Name]([GetPropertyList(ex)]) {
[loop (ex->prop:Properties)]
		this.[prop.Name.ToString().ToCamelCase()] = [prop.Name.ToString().ToCamelCase()];
[end loop]
	}

[loop (ex->prop:Properties)]
	[GenerateGetter(prop)]
[end loop]

}
end template

function string GetParameterList(Operation op)
    string result = "";
    loop (op->param:Parameters; string delimiter = ""; delimiter = ", ")
        result = result + delimiter + param.Type.GetJavaName() + " " + param.Name.ToString().ToCamelCase();
    end loop
    return result;
end function

function string GetPropertyList(StructuredType sType)
    string result = "";
    loop (sType->p:Properties; string delimiter = ""; delimiter = ", ")
        result = result + delimiter + p.Type.GetJavaName() + " " + p.Name.ToString().ToCamelCase();
    end loop
    return result;
end function

function int GetNumberOfFieldWithIdSuffix(StructuredType sType)
	int result = 0;
	loop (sType->p:Properties)
		if (p.Name.ToString().EndsWith("Id"))
			result++;
		end if
    end loop
    return result;
end function

function string GetPackageRow(Declaration d)
return "package "+d.Namespace.FullName.ToLower();
end function

template GenerateGetter(Property prop)
^
public [prop.Type.GetJavaName()] get[prop.Name.ToString().ToPascalCase()]() {
	return this.[prop.Name.ToString().ToCamelCase()];
}
end template

template GenerateSetter(Property prop)
^
public void set[prop.Name.ToString().ToPascalCase()]([prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()]) {
	this.[prop.Name.ToString().ToCamelCase()] = [prop.Name.ToString().ToCamelCase()];
}
end template
