namespace MetaDslx.Soal;
generator SpringGenerator for object;

using generator SpringGeneratorUtil;

template GenerateInterface(Interface iface)
package [SpringGeneratorUtil.GetPackage(iface)].[SpringGeneratorUtil.Properties.interfacePackage];
^
[SpringGeneratorUtil.GenerateImports(iface)]
public interface [iface.Name] {
[loop (iface->op:Operations)]
	[op.ReturnType.GetJavaName()] [op.Name]([SpringGeneratorUtil.GetParameterList(op)]);
[end loop]
}
end template

template GenerateComponent(Component component)
package [SpringGeneratorUtil.GetPackage(component)].[SpringGeneratorUtil.Properties.serviceFacadePackage];
^
	[HashSet<Service> services = new HashSet<Service>(component.Services)]
	[if (services.Any())]
		[loop(services->i:Interface)]
import [SpringGeneratorUtil.GetPackage(component)].[SpringGeneratorUtil.Properties.interfacePackage].[i.Name];
		[end loop]
	[end if]
//import [SpringGeneratorUtil.GetPackage(component)].util.ListUtil; TODO
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
^
[SpringGeneratorUtil.GenerateImports(component)]
@Service
[string interfaces = SpringGeneratorUtil.GetInterfaceList(component)]
[if (interfaces.Any())]
public class [component.Name] implements [interfaces] {
[else]
public class [component.Name] {
[end if]
^
[loop (component->repo:GetRepositories())]
	@Autowired
	[repo];
[end loop]
^
[loop (component->reference:References)]
	@Autowired
	private [reference.Interface.Name] [reference.Name];
[end loop]
^
[loop(component->s:Services)]
[Interface i = s.Interface]
	//operations of [i.Name]
		[loop(i->op:Operations)]
	public [op.ReturnType.GetJavaName()] [op.Name]([SpringGeneratorUtil.GetParameterList(op)]) {
	^
	}
	^
		[end loop]
		^
[end loop]
}
end template

template GenerateEnum(Enum myEnum)
package [SpringGeneratorUtil.GetPackage(myEnum)].[SpringGeneratorUtil.Properties.enumPackage];
^
public enum [myEnum.Name] {
[loop (myEnum->literal:EnumLiterals; string delimiter=""; delimiter=",")]
[delimiter]
	[literal.Name.ToUpper()]\
[end loop]
^
^
}
end template

template GenerateException(Exception ex)
package [SpringGeneratorUtil.GetPackage(ex)].[SpringGeneratorUtil.Properties.exceptionPackage];
^
[SpringGeneratorUtil.GenerateImports(ex)]
^
public class [ex.Name] extends Exception {

[loop (ex->prop:Properties)]
	^
	private [prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()];
[end loop]

	^
	public [ex.Name]([SpringGeneratorUtil.GetPropertyList(ex)]) {
[loop (ex->prop:Properties)]
		this.[prop.Name.ToString().ToCamelCase()] = [prop.Name.ToString().ToCamelCase()];
[end loop]
	}

[loop (ex->prop:Properties)]
	[SpringGeneratorUtil.GenerateGetter(prop)]
[end loop]

}
end template

//TODO separate entity and Struct
template GenerateEntity(StructuredType sType)
package [SpringGeneratorUtil.GetPackage(sType)].[SpringGeneratorUtil.Properties.entityPackage];
^
[SpringGeneratorUtil.GenerateImports(sType)]
^
	[if (sType is Entity)] 
import javax.persistence.*;
^
@Entity
	[end if]
public class [sType.Name] {

[int ids = SpringGeneratorUtil.GetNumberOfFieldWithIdSuffix(sType)]
[if (ids != 1)]
	^
		[if (sType is Entity)]
	@Id
	@GeneratedValue
		[end if]
	private Long [sType.Name.ToString().ToCamelCase()]Id;
[end if]

[loop (sType->prop:Properties)]
	^
		[if (sType is Entity && ids == 1 && prop.Name.ToString().EndsWith("Id"))]
	@Id
	@GeneratedValue
		[end if]
	private [prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()];
[end loop]


	^
[if (ids == 1)]
		[loop (sType->id:Properties where id.Name.EndsWith("Id"))]
	public [id.Type.GetJavaName()] get[id.Name.ToString().ToPascalCase()]() {
		return this.[id.Name.ToString().ToCamelCase()];
	}
	^
	public void set[id.Name.ToString().ToPascalCase()]([id.Type.GetJavaName()] [id.Name.ToString().ToCamelCase()]) {
		this.[id.Name.ToString().ToCamelCase()] = [id.Name.ToString().ToCamelCase()];
	}
		[end loop]
[else]
	public Long get[sType.Name.ToString().ToPascalCase()]Id() {
		return this.[sType.Name.ToString().ToCamelCase()]Id;
	}

	^
	public void set[sType.Name.ToString().ToPascalCase()]Id(Long [sType.Name.ToString().ToCamelCase()]Id) {
		this.[sType.Name.ToString().ToCamelCase()]Id = [sType.Name.ToString().ToCamelCase()]Id;
	}
[end if]

[loop (sType->prop:Properties where !prop.Name.EndsWith("Id"))]
	[SpringGeneratorUtil.GenerateGetter(prop)]
	[SpringGeneratorUtil.GenerateSetter(prop)]
[end loop]

}
end template

template GenerateRepository(Entity entity)
package [SpringGeneratorUtil.GetPackage(entity)].[SpringGeneratorUtil.Properties.repositoryPackage];
^
import [SpringGeneratorUtil.GetPackage(entity)].[SpringGeneratorUtil.Properties.entityPackage].[entity.Name];
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
^
@Repository
public interface [entity.Name]Repository extends CrudRepository<[entity.Name],Long> {
^
}
end template

template GeneratePersistence(Namespace ns)
<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence" version="2.0">
    <persistence-unit name="[ns.Name]PU" transaction-type="RESOURCE_LOCAL">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
		^
	[loop (ns->entity:Declarations where entity is Entity)]
		<class>[SpringGeneratorUtil.GetPackage(entity)].[SpringGeneratorUtil.Properties.entityPackage].[entity.Name]</class>
	[end loop]
	^
        <class>iit.cinema.status.ReservationStatus</class>
        <class>iit.cinema.status.SeatStatus</class>
		^
        <shared-cache-mode>NONE</shared-cache-mode>
		^
        <properties>
            <!--for debug-->
            <property name="eclipselink.ddl-generation" value="create-tables"/>
            <!--<property name="eclipselink.logging.level" value="FINE"/>-->
			^
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.url"
                      value="jdbc:h2:mem/[ns.Name]"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/><!-- sa? -->
        </properties>
    </persistence-unit>
</persistence>
end template

template generateMasterPom(Namespace ns, List<string> modules)
[SpringGeneratorUtil.GeneratePomStart()]
^
    <properties>
        <springframework.version>4.1.6.RELEASE</springframework.version>
        <spring-data-jpa.version>1.9.0.RELEASE</spring-data-jpa.version>
        <!--<spring-security.version>4.0.2.RELEASE</spring-security.version>-->
    </properties>
^
    <groupId>[ns.Name]</groupId>
    <artifactId>[ns.Name]App</artifactId>
    <packaging>pom</packaging>
    <version>1.0</version>
    <modules>
[loop (module:modules)]
        <module>[ns.Name]-[module]</module>
[end loop]
    </modules>
^
    <dependencies>
        <!-- eclipseLink -->
		[SpringGeneratorUtil.GeneratePomDependency("org.eclipse.persistence", "javax.persistence", "2.1.0")]
		[SpringGeneratorUtil.GeneratePomDependency("org.eclipse.persistence", "eclipselink", "2.6.2")]
    </dependencies>
</project>
end template

template generateComponentPom(Namespace ns, string moduleName, List<string> modules)
[SpringGeneratorUtil.GeneratePomStart()]
    <parent>
        <artifactId>[ns.Name]App</artifactId>
        <groupId>[ns.Name]</groupId>
        <version>1.0</version>
    </parent>

    <artifactId>[ns.Name]-[moduleName]</artifactId>

    <dependencies>
        [SpringGeneratorUtil.GeneratePomDependency(ns.Name, ns.Name+"-Commons", "1.0")]
		[SpringGeneratorUtil.GeneratePomDependency(ns.Name, ns.Name+"-Data", "1.0")]

[loop (module:modules)]
		[SpringGeneratorUtil.GeneratePomDependency(ns.Name, ns.Name+"-"+module, "1.0")]
[end loop]

        [SpringGeneratorUtil.GeneratePomDependency("org.springframework", "spring-context", "${springframework.version}")]
    </dependencies>
</project>
end template

template generateDataPom(Namespace ns)
[SpringGeneratorUtil.GeneratePomStart()]
    <parent>
        <artifactId>[ns.Name]App</artifactId>
        <groupId>[ns.Name]</groupId>
        <version>1.0</version>
    </parent>

    <artifactId>[ns.Name]-Data</artifactId>

    <dependencies>
		<!-- spring data -->
		[SpringGeneratorUtil.GeneratePomDependency("org.springframework","spring-orm", "${springframework.version}")]
		[SpringGeneratorUtil.GeneratePomDependency("org.springframework.data", "spring-data-jpa", "${spring-data-jpa.version}")]
          <!--  <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-orm</artifactId>
                </exclusion>
            </exclusions> -->
	</dependencies>
</project>
end template
