namespace MetaDslx.Soal;
generator SpringClassGenerator for object;

using generator SpringGeneratorUtil;

template GenerateInterface(Interface iface)
package [SpringGeneratorUtil.GetPackage(iface)].[SpringGeneratorUtil.Properties.interfacePackage];
^
[SpringGeneratorUtil.GenerateImports(iface)]
public interface [iface.Name] {
[loop (iface->op:Operations)]
	[op.ReturnType.GetJavaName()] [op.Name]([SpringGeneratorUtil.GetParameterList(op)]);
[end loop]
}
end template

template GenerateComponent(Component component)
package [SpringGeneratorUtil.GetPackage(component)].[SpringGeneratorUtil.Properties.serviceFacadePackage];
^
//import [SpringGeneratorUtil.GetPackage(component)].util.ListUtil; TODO
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
^
[SpringGeneratorUtil.GenerateImports(component)]
@Service
[string interfaces = SpringGeneratorUtil.GetInterfaceList(component)]
[if (interfaces.Any())]
public class [component.Name] implements [interfaces] {
[else]
public class [component.Name] {
[end if]
^
[loop (component->repo:GetRepositories())]
	@Autowired
	[repo];
[end loop]
^
[loop (component->reference:References)]
	@Autowired
	private [reference.Interface.Name] [reference.Name];
[end loop]
^
[loop(component->s:Services)]
[Interface i = s.Interface]
	//operations of [i.Name]
		[loop(i->op:Operations)]
	public [op.ReturnType.GetJavaName()] [op.Name]([SpringGeneratorUtil.GetParameterList(op)]) {
	^
	}
	^
		[end loop]
		^
[end loop]
}
end template

template GenerateEnum(Enum myEnum)
package [SpringGeneratorUtil.GetPackage(myEnum)].[SpringGeneratorUtil.Properties.enumPackage];
^
public enum [myEnum.Name] {
[loop (myEnum->literal:EnumLiterals; string delimiter=""; delimiter=",")]
[delimiter]
	[literal.Name.ToUpper()]\
[end loop]
;^
[loop (myEnum->literal:EnumLiterals)]
^
	public boolean is[literal.Name.ToPascalCase()]() {
		return [literal.Name.ToUpper()].equals(this);
	}

[end loop]
^
}
end template

template GenerateException(Exception ex)
package [SpringGeneratorUtil.GetPackage(ex)].[SpringGeneratorUtil.Properties.exceptionPackage];
^
[SpringGeneratorUtil.GenerateImports(ex)]
^
public class [ex.Name] extends Exception {

[loop (ex->prop:Properties)]
	^
	private [prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()];
[end loop]

	^
	public [ex.Name]([SpringGeneratorUtil.GetPropertyList(ex)]) {
[loop (ex->prop:Properties)]
		this.[prop.Name.ToString().ToCamelCase()] = [prop.Name.ToString().ToCamelCase()];
[end loop]
	}

[loop (ex->prop:Properties)]
	[SpringGeneratorUtil.GenerateGetter(prop)]
[end loop]

}
end template

//TODO separate entity and Struct
template GenerateEntity(StructuredType sType)
package [SpringGeneratorUtil.GetPackage(sType)].[SpringGeneratorUtil.Properties.entityPackage];
^
[SpringGeneratorUtil.GenerateImports(sType)]
^
	[if (sType is Entity)] 
import javax.persistence.*;
^
@Entity
	[end if]
public class [sType.Name] {

[int ids = SpringGeneratorUtil.GetNumberOfFieldWithIdSuffix(sType)]
[if (ids != 1)]
	^
		[if (sType is Entity)]
	@Id
	@GeneratedValue
		[end if]
	private Long [sType.Name.ToString().ToCamelCase()]Id;
[end if]

[loop (sType->prop:Properties)]
	^
		[if (sType is Entity && ids == 1 && prop.Name.ToString().EndsWith("Id"))]
	@Id
	@GeneratedValue
		[end if]
	private [prop.Type.GetJavaName()] [prop.Name.ToString().ToCamelCase()];
[end loop]


	^
[if (ids == 1)]
		[loop (sType->id:Properties where id.Name.EndsWith("Id"))]
	public [id.Type.GetJavaName()] get[id.Name.ToString().ToPascalCase()]() {
		return this.[id.Name.ToString().ToCamelCase()];
	}
	^
	public void set[id.Name.ToString().ToPascalCase()]([id.Type.GetJavaName()] [id.Name.ToString().ToCamelCase()]) {
		this.[id.Name.ToString().ToCamelCase()] = [id.Name.ToString().ToCamelCase()];
	}
		[end loop]
[else]
	public Long get[sType.Name.ToString().ToPascalCase()]Id() {
		return this.[sType.Name.ToString().ToCamelCase()]Id;
	}

	^
	public void set[sType.Name.ToString().ToPascalCase()]Id(Long [sType.Name.ToString().ToCamelCase()]Id) {
		this.[sType.Name.ToString().ToCamelCase()]Id = [sType.Name.ToString().ToCamelCase()]Id;
	}
[end if]

[loop (sType->prop:Properties where !prop.Name.EndsWith("Id"))]
	[SpringGeneratorUtil.GenerateGetter(prop)]
	[SpringGeneratorUtil.GenerateSetter(prop)]
[end loop]

}
end template

template GenerateRepository(Entity entity)
package [SpringGeneratorUtil.GetPackage(entity)].[SpringGeneratorUtil.Properties.repositoryPackage];
^
import [SpringGeneratorUtil.GetPackage(entity)].[SpringGeneratorUtil.Properties.entityPackage].[entity.Name];
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
^
@Repository
public interface [entity.Name]Repository extends CrudRepository<[entity.Name],Long> {
^
}
end template
