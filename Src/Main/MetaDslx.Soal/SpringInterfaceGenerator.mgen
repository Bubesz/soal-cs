namespace MetaDslx.Soal;
generator SpringInterfaceGenerator for object;

using generator SpringGeneratorUtil;


template GenerateInterface(Interface iface, string bindingType)
package [SpringGeneratorUtil.GetPackage(iface)].[SpringGeneratorUtil.Properties.interfacePackage];
^
[if (bindingType.Equals("Rest"))]
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
[end if]
[if (bindingType.Equals("WebService"))]
//import ?;
[end if]
[if (bindingType.Equals("WebSockett"))]
//import ?;
[end if]

[SpringGeneratorUtil.GenerateImports(iface, false)]
^
[InterfaceAnnotation(bindingType)]
public interface [iface.Name][bindingType] {
[loop (iface->op:Operations)]
^
[OperationAnnotation(bindingType, op)]
	[op.Result.Type.GetJavaName()] [op.Name.ToCamelCase()](\
	[loop (op->param:Parameters; string delimiter = ""; delimiter = ", ")]
[delimiter][ParameterAnnotation(bindingType)][param.Type.GetJavaName()] [param.Name.ToString().ToCamelCase()]\
    [end loop]
)\
	[if (op.Exceptions.Any())]
 throws [SpringGeneratorUtil.GetExceptionList(op)]\
	[end if]
;

[end loop]
}
end template



template GenerateInterfaceImplementation(Interface iface, string functionName)
package [SpringGeneratorUtil.GetPackage(iface)].[functionName];
^
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
^
import [SpringGeneratorUtil.GetPackage(iface)].[SpringGeneratorUtil.Properties.interfacePackage].[iface.Name];
[SpringGeneratorUtil.GenerateImports(iface)]
^
@Service
public class [iface.Name]Impl implements [iface.Name] {
[loop (iface->repo:GetRepositories())]
^
	@Autowired
	private [repo];
[end loop]
[loop(iface->op:Operations)]
^
	public [op.Result.Type.GetJavaName()] [op.Name.ToCamelCase()]([SpringGeneratorUtil.GetParameterList(op)])\
	[if (op.Exceptions.Any())]
 throws [SpringGeneratorUtil.GetExceptionList(op)] \
	[end if]
{
		// TODO implement method
		throw new UnsupportedOperationException("Not yet implemented.");
	}
[end loop]
}
end template


// proxies to business logic
template GenerateProxyInterfaceImplementation(Interface iface, string functionName, string bindingType)
package [SpringGeneratorUtil.GetPackage(iface)].[functionName];
^
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
^
import [SpringGeneratorUtil.GetPackage(iface)].[SpringGeneratorUtil.Properties.interfacePackage].[iface.Name][bindingType];
[SpringGeneratorUtil.GenerateImports(iface, false)]
^
@Service
public class [iface.Name][bindingType]Impl implements [iface.Name][bindingType] {
^
	@Autowired
	private [iface.Name]Impl [iface.Name.ToCamelCase()]Impl;

[loop(iface->op:Operations)]
^
	public [op.Result.Type.GetJavaName()] [op.Name.ToCamelCase()]([SpringGeneratorUtil.GetParameterList(op)])\
	[if (op.Exceptions.Any())]
 throws [SpringGeneratorUtil.GetExceptionList(op)] \
	[end if]
{
			[if (op.Result.Type.GetJavaName() != "void")]
		return [iface.Name.ToCamelCase()]Impl.[op.Name.ToCamelCase()]([SpringGeneratorUtil.GetParameterNameList(op)]);
			[else]
		[iface.Name.ToCamelCase()]Impl.[op.Name.ToCamelCase()]([SpringGeneratorUtil.GetParameterNameList(op)]);
			[end if]
	}
[end loop]
}
end template


// accessor of remote service (TODO for any tpye ?)
template GenerateProxyForInterface(Interface iface, string functionName, string bindingType)
package [SpringGeneratorUtil.GetPackage(iface)].proxy;
^
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
^
import org.springframework.hateoas.Link;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
^
import [SpringGeneratorUtil.GetPackage(iface)].[SpringGeneratorUtil.Properties.interfacePackage].[iface.Name][bindingType];
[SpringGeneratorUtil.GenerateImports(iface, false)]
^
import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
^
@Service
public class [iface.Name][bindingType]Proxy implements [iface.Name][bindingType] {
^
	private RestTemplate restTemplate = new RestTemplate();

[loop(iface->op:Operations)]
	^
	private String urlOf[op.Name.ToPascalCase()];
[end loop]

[loop(iface->op:Operations)]
^
	@Override
	public [op.Result.Type.GetJavaName()] [op.Name.ToCamelCase()]([SpringGeneratorUtil.GetParameterList(op)])\
	[if (op.Exceptions.Any())]
 throws [SpringGeneratorUtil.GetExceptionList(op)] \
	[end if]
{
		String url = getUrlOf[op.Name.ToPascalCase()]();
	[ArrayType array = op.Result.Type as ArrayType]
	[if (array != null)]
		[array.InnerType.GetJavaName()]\[\] response = restTemplate.getForObject(url, [array.InnerType.GetJavaName()]\[\].class);
	[else]
		[op.Result.Type.GetJavaName()]\[\] response = restTemplate.getForObject(url, [op.Result.Type.GetJavaName()]\[\].class);
	[end if]

	[if (op.Result.Type.GetJavaName() != "void")]
		return Arrays.stream(response).collect(Collectors.toList());
	[else]
			//FIXME
		//[iface.Name.ToCamelCase()]Impl.[op.Name.ToCamelCase()]([SpringGeneratorUtil.GetParameterNameList(op)]);
	[end if]
	}
[end loop]

[loop(iface->op:Operations)]
	^
	private String getUrlOf[op.Name.ToPascalCase()]() {
        if (this.urlOf[op.Name.ToPascalCase()] != null) {
            return this.urlOf[op.Name.ToPascalCase()];
        }
		^
        // eg.: http://127.0.0.2:8080/Cinema-CinemaWeb-1.0/getMoviesFromReservation/
        Link link = linkTo(methodOn(IReservationLogicRest.class).getMoviesFromReservation()).withSelfRel();
		[string currentComponent = "CinemaWeb"]
		[string targetComponent = "ReservationLogic"]
        String currentComponentName = "Cinema-[currentComponent]";
        String targetComponentName = "Cinema-[targetComponent]";
        RequestAttributes requestAttributes = RequestContextHolder.currentRequestAttributes();
        HttpServletRequest curRequest = ((ServletRequestAttributes) requestAttributes).getRequest();
        String serverName = curRequest.getServerName();
        String serverPort = String.valueOf(curRequest.getServerPort());
		^
        // eg.: http://127.0.0.2:8080/Cinema-ReservationLogic-1.0/getMoviesFromReservation/
        String url = link.getHref();
        url = url.replace(serverName, Configuration.getString("[targetComponent][bindingType]Server"));
        url = url.replace(":" + serverPort, ":" + Configuration.getString([targetComponent][bindingType]Port"));
        url = url.replace(currentComponentName, targetComponentName);
		^
        this.urlOf[op.Name.ToPascalCase()] = url;
        return url;
    }
[end loop]
}
end template



template GenerateCrudRepositoryCopy(string namespaceName, string entityName, string bindingType)
package [namespaceName.ToLower()].[SpringGeneratorUtil.Properties.interfacePackage];
^
import [namespaceName.ToLower()].[SpringGeneratorUtil.Properties.entityPackage].[entityName];
^
public interface [entityName]Repository[bindingType] {
	// should copy CrudRepository<[entityName], Long>
^
	public long count();
^
	public void delete(Long id);
^
	public void delete([entityName] entity);
^
	public void delete(Iterable<? extends [entityName]> entities);
^
	public void deleteAll();
^
	public boolean exists(Long id) ;
^
	public Iterable<[entityName]> findAll();
^
	public Iterable<[entityName]> findAll(Iterable<Long> entities);
^
	public [entityName] findOne(Long id);
^
	public <S extends [entityName]> S save(S entity);
^
	public <S extends [entityName]> Iterable<S> save(Iterable<S> entities);
^
}
end template


template GenerateRepositoryProxyImpl(string namespaceName, string entityName, string bindingType)
package [namespaceName.ToLower()].[SpringGeneratorUtil.Properties.repositoryPackage];
^
import org.springframework.beans.factory.annotation.Autowired;
^
import [namespaceName.ToLower()].[SpringGeneratorUtil.Properties.entityPackage].[entityName];
import [namespaceName.ToLower()].[SpringGeneratorUtil.Properties.repositoryPackage].[entityName]Repository;
import [namespaceName.ToLower()].[SpringGeneratorUtil.Properties.interfacePackage].[entityName]Repository[bindingType];
^
public class [entityName]Repository[bindingType]Impl implements [entityName]Repository[bindingType] {
^
	@Autowired
	[entityName]Repository repository;
^
	@Override
	public long count() {
		return repository.count();
	}
^
	@Override
	public void delete(Long id) {
		repository.delete(id);
	}
^
	@Override
	public void delete([entityName] entity) {
		repository.delete(entity);
	}
^
	@Override
	public void delete(Iterable<? extends [entityName]> entities) {
		repository.delete(entities);
	}
^
	@Override
	public void deleteAll() {
		repository.deleteAll();
	}
^
	@Override
	public boolean exists(Long id) {
		return repository.exists(id);
	}
^
	@Override
	public Iterable<[entityName]> findAll() {
		return repository.findAll();
	}
^
	@Override
	public Iterable<[entityName]> findAll(Iterable<Long> entities) {
		return repository.findAll(entities);
	}
^
	@Override
	public [entityName] findOne(Long id) {
		return repository.findOne(id);
	}
^
	@Override
	public <S extends [entityName]> S save(S entity) {
		return repository.save(entity);
	}
^
	@Override
	public <S extends [entityName]> Iterable<S> save(Iterable<S> entities) {
		return repository.save(entities);
	}
^
}
end template


template InterfaceAnnotation(string bindingType)
	[if (bindingType.Equals("Rest"))]
@RestController
	[else if (bindingType.Equals("WebService"))]
//@WebService
	[else if (bindingType.Equals("WebSockett"))]
//@WebSocket
	[end if]
end template



template OperationAnnotation(string bindingType, Operation op)
	[if (bindingType.Equals("Rest"))]
	@RequestMapping(value="[op.Name.ToCamelCase()]")
	[else if (bindingType.Equals("WebService"))]
	//@WebService
	[else if (bindingType.Equals("WebSockett"))]
	//@WebSocket
	[end if]
end template



template ParameterAnnotation(string bindingType)
	[if (bindingType.Equals("Rest"))]
@PathVariable \
	[else if (bindingType.Equals("WebService"))]
		
	[else if (bindingType.Equals("WebSockett"))]
		
	[end if]
end template
