namespace MetaDslx.Soal;
generator SoalPrinter for IEnumerable<MetaDslx.Core.ModelObject>;

template Generate()
[loop(Instances->ns:typeof(Namespace))]
[GenerateNamespace(ns)]
[end loop]
end template

template GenerateNamespace(Namespace ns)
[if (ns.Declarations.Count > 0)]
[if (ns.Prefix != null)]
namespace [ns.FullName] = [ns.Prefix]:"[ns.Uri]"
[else]
namespace [ns.FullName] = "[ns.Uri]"
[end if]
{
	[loop(ns->Declarations->enm:typeof(Enum))]
	[GenerateEnum(ns, enm)]
^
	[end loop]
	[loop(ns->Declarations->st:typeof(StructuredType))]
	[GenerateStructuredType(ns, st)]
^
	[end loop]
	[loop(ns->Declarations->intf:typeof(Interface))]
	[GenerateInterface(ns, intf)]
^
	[end loop]
	[loop(ns->Declarations->bnd:typeof(Binding))]
	[GenerateBinding(ns, bnd)]
^
	[end loop]
	[loop(ns->Declarations->endp:typeof(Endpoint))]
	[GenerateEndpoint(ns, endp)]
^
	[end loop]
}
^
[end if]
end template

function string GetAncestor(Namespace currentNs, StructuredType st)
	StructuredType baseType = null;
	if (st is Struct)
		baseType = ((Struct)st).BaseType;
	else if (st is Exception)
		baseType = ((Exception)st).BaseType;
	else if (st is Entity)
		baseType = ((Entity)st).BaseType;
	end if
	if (baseType != null)
		if (baseType.Namespace == currentNs)
			return ": "+baseType.Name;
		else
			return ": "+baseType.FullName();
		end if
	end if
	return "";
end function

template GenerateAnnotations(AnnotatedElement ae)
[loop(ae->annot:Annotations)]
["["][annot.Name]["]"]
[end loop]
end template

template GenerateAnnotationsSingleLine(AnnotatedElement ae)
[loop(ae->annot:Annotations)]
["["][annot.Name]["]"]\
[end loop]
end template

template GenerateReturnAnnotations(IList<Annotation> al)
[loop(annot:al)]
["[return: "][annot.Name]["]"]
[end loop]
end template

template GenerateEnum(Namespace currentNs, Enum enm)
[GenerateAnnotations(enm)]
enum [enm.Name]
{
	[GenerateEnumLiterals(currentNs, enm)]
}
end template

template GenerateEnumLiterals(Namespace currentNs, Enum enm)
	[loop(lit:enm.EnumLiterals; string delim = ""; delim = ", ")]
[delim]
[GenerateAnnotations(lit)]\
[lit.Name]\
	[end loop]
end template

template GenerateStructuredType(Namespace currentNs, StructuredType st)
[GenerateAnnotations(st)]
[if (st is Struct)]
struct \
[else if (st is Exception)]
exception \
[else if (st is Entity)]
entity \
[end if]
[st.Name] [GetAncestor(currentNs, st)]
{
	[loop(st->prop:Properties)]
	[GenerateProperty(currentNs, prop)]
	[end loop]
}
end template

template GenerateProperty(Namespace currentNs, Property prop)
[GenerateAnnotations(prop)]
[GenerateType(currentNs, prop.Type)] [prop.Name];
end template

template GenerateRef(Namespace currentNs, Declaration decl)
[if (decl != null)]
[if (decl.Namespace != currentNs)]
[decl.FullName()]\
[else]
[decl.Name]\
[end if]
[end if]
end template

template GenerateType(Namespace currentNs, SoalType t)
[if (t is PrimitiveType)]
[((PrimitiveType)t).Name]\
[else if (t is NullableType)]
[GenerateType(currentNs, ((NullableType)t).InnerType)]?\
[else if (t is NonNullableType)]
[GenerateType(currentNs, ((NonNullableType)t).InnerType)]!\
[else if (t is ArrayType)]
[GenerateType(currentNs, ((ArrayType)t).InnerType)]["[]"]\
[else if (t is Declaration)]
[GenerateRef(currentNs, (Declaration)t)]
[else]
[t]\
[end if]
end template

template GenerateReturnType(Namespace currentNs, Operation op)
[if (op.IsOneway)]
oneway\
[else]
[GenerateType(currentNs, op.ReturnType)]\
[end if]
end template

template GenerateThrows(Namespace currentNs, Operation op)
[loop(op->ex:Exceptions; string delim = " throws "; delim = ", ")]
[delim][GenerateType(currentNs, ex)]
[end loop]
end template

template GenerateParameters(Namespace currentNs, Operation op)
[loop(op->p:Parameters; string delim = ""; delim = ", ")]
[delim][GenerateAnnotationsSingleLine(p)][GenerateType(currentNs, p.Type)] [p.Name]
[end loop]
end template

template GenerateOperation(Namespace currentNs, Operation op)
[GenerateAnnotations(op)]
[GenerateReturnAnnotations(op.ReturnAnnotations)]\
[GenerateReturnType(currentNs, op)] [op.Name]([GenerateParameters(currentNs, op)])[GenerateThrows(currentNs, op)];
end template

template GenerateInterface(Namespace currentNs, Interface intf)
[GenerateAnnotations(intf)]
interface [intf.Name]
{
	[loop(intf->op:Operations)]
	[GenerateOperation(currentNs, op)]
	[end loop]
}
end template

template GenerateTransportBinding(Namespace currentNs, TransportBindingElement bnd)
[switch (bnd)]
[type as HttpTransportBindingElement:]
	[if (bnd.Ssl)]
transport HTTP
{
	Ssl = true;
	ClientAuthentication = [bnd.ClientAuthentication.ToString().ToLower()];
}
	[else]
transport HTTP;
	[end if]
[type as RestTransportBindingElement:]transport REST;
[type as WebSocketTransportBindingElement:]transport WebSocket;
[end switch]
end template

template GenerateEncodingBinding(Namespace currentNs, EncodingBindingElement bnd)
[switch (bnd)]
[type as SoapEncodingBindingElement:]
[if (bnd.Style != SoapEncodingStyle.DocumentWrapped || bnd.Version != SoapVersion.Soap11 || bnd.Mtom)]
encoding SOAP
{
	[if (bnd.Style != SoapEncodingStyle.DocumentWrapped)]
	Style = [bnd.Style];
	[end if]
	[if (bnd.Version != SoapVersion.Soap11)]
	Version = [bnd.Version];
	[end if]
	[if (bnd.Mtom)]
	Mtom = true;
	[end if]
}
[else]
encoding SOAP;
[end if]
[type as XmlEncodingBindingElement:]encoding XML;
[type as JsonEncodingBindingElement:]encoding JSON;
[end switch]
end template

template GenerateProtocolBinding(Namespace currentNs, ProtocolBindingElement bnd)
[switch (bnd)]
[type as WsAddressingBindingElement:]protocol WsAddressing;
[end switch]
end template

template GenerateBinding(Namespace currentNs, Binding bnd)
binding [bnd.Name]
{
	[GenerateTransportBinding(currentNs, bnd.Transport)]
	[loop(bnd->enc:Encodings)]
	[GenerateEncodingBinding(currentNs, enc)]
	[end loop]
	[loop(bnd->prot:Protocols)]
	[GenerateProtocolBinding(currentNs, prot)]
	[end loop]
}
end template

template GenerateEndpoint(Namespace currentNs, Endpoint endp)
endpoint [endp.Name] : [GenerateRef(currentNs, endp.Interface)]
{
	binding [GenerateRef(currentNs, endp.Binding)];
	address "[endp.Address]";
}
end template
